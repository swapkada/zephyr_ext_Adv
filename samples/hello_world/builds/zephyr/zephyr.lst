
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
GEN_ABS_SYM_END
       0:	20001bc0 	.word	0x20001bc0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000e15 	.word	0x00000e15
       8:	00000e65 	.word	0x00000e65
       c:	00000cad 	.word	0x00000cad
      10:	00000cad 	.word	0x00000cad
      14:	00000cad 	.word	0x00000cad
      18:	00000cad 	.word	0x00000cad
      1c:	00000cad 	.word	0x00000cad
      20:	00000cad 	.word	0x00000cad
      24:	00000cad 	.word	0x00000cad
      28:	00000cad 	.word	0x00000cad
      2c:	000008a1 	.word	0x000008a1
      30:	00000cad 	.word	0x00000cad
      34:	00000cad 	.word	0x00000cad
      38:	0000085d 	.word	0x0000085d
      3c:	00000cad 	.word	0x00000cad

00000040 <_irq_vector_table>:
      40:	00000dd9 00007f5b 00000dd9 00000dd9     ....[...........
      50:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      60:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      70:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      80:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      90:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      a0:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      b0:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      c0:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      d0:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      e0:	00000dd9 00000dd9 00000dd9 00000dd9     ................
      f0:	00000dd9 00000dd9                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 00001461 00000000 00000c25     ....a.......%...
     108:	00000000 00000c25 00000000 00000c25     ....%.......%...
     118:	00000000 00000c25 00000000 00000c25     ....%.......%...
     128:	20002bf0 00001711 00000000 00000c25     .+. ........%...
     138:	00000000 00000c25 00000000 00000c25     ....%.......%...
     148:	00000000 00000c25 00000000 00007f21     ....%.......!...
     158:	00000000 00000c25 20002bcc 00001ad1     ....%....+. ....
     168:	00000000 00000c25 00000000 00000c25     ....%.......%...
     178:	00000000 00000c25 00000000 00001c15     ....%...........
     188:	00000000 00000c25 00000000 00000c25     ....%.......%...
     198:	00000000 00000c25 00000000 00000c25     ....%.......%...
     1a8:	00000000 00000c25 00000000 00000c25     ....%.......%...
     1b8:	00000000 00007f55 00000000 00000c25     ....U.......%...
     1c8:	00000000 00000c25 00000000 00000c25     ....%.......%...
     1d8:	00000000 00000c25 00000000 00000c25     ....%.......%...
     1e8:	00000000 00000c25 00000000 00000c25     ....%.......%...
     1f8:	00000000 00000c25 00000000 00000c25     ....%.......%...
     208:	00000000 00000c25 00000000 00000c25     ....%.......%...
     218:	00000000 00000c25 00000000 00000c25     ....%.......%...
     228:	00000000 00000c25 00000000 00000c25     ....%.......%...
     238:	00000000 00000c25 00000000 00000c25     ....%.......%...
     248:	00000000 00000c25 00000000 00000c25     ....%.......%...
     258:	00000000 00000c25 00000000 00000c25     ....%.......%...

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b986 	b.w	58c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	9e08      	ldr	r6, [sp, #32]
     2c6:	4604      	mov	r4, r0
     2c8:	4688      	mov	r8, r1
     2ca:	2b00      	cmp	r3, #0
     2cc:	d14b      	bne.n	366 <__udivmoddi4+0xa6>
     2ce:	428a      	cmp	r2, r1
     2d0:	4615      	mov	r5, r2
     2d2:	d967      	bls.n	3a4 <__udivmoddi4+0xe4>
     2d4:	fab2 f282 	clz	r2, r2
     2d8:	b14a      	cbz	r2, 2ee <__udivmoddi4+0x2e>
     2da:	f1c2 0720 	rsb	r7, r2, #32
     2de:	fa01 f302 	lsl.w	r3, r1, r2
     2e2:	fa20 f707 	lsr.w	r7, r0, r7
     2e6:	4095      	lsls	r5, r2
     2e8:	ea47 0803 	orr.w	r8, r7, r3
     2ec:	4094      	lsls	r4, r2
     2ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2f2:	0c23      	lsrs	r3, r4, #16
     2f4:	fbb8 f7fe 	udiv	r7, r8, lr
     2f8:	fa1f fc85 	uxth.w	ip, r5
     2fc:	fb0e 8817 	mls	r8, lr, r7, r8
     300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     304:	fb07 f10c 	mul.w	r1, r7, ip
     308:	4299      	cmp	r1, r3
     30a:	d909      	bls.n	320 <__udivmoddi4+0x60>
     30c:	18eb      	adds	r3, r5, r3
     30e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     312:	f080 811b 	bcs.w	54c <CONFIG_BT_RX_STACK_SIZE+0x14c>
     316:	4299      	cmp	r1, r3
     318:	f240 8118 	bls.w	54c <CONFIG_BT_RX_STACK_SIZE+0x14c>
     31c:	3f02      	subs	r7, #2
     31e:	442b      	add	r3, r5
     320:	1a5b      	subs	r3, r3, r1
     322:	b2a4      	uxth	r4, r4
     324:	fbb3 f0fe 	udiv	r0, r3, lr
     328:	fb0e 3310 	mls	r3, lr, r0, r3
     32c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     330:	fb00 fc0c 	mul.w	ip, r0, ip
     334:	45a4      	cmp	ip, r4
     336:	d909      	bls.n	34c <__udivmoddi4+0x8c>
     338:	192c      	adds	r4, r5, r4
     33a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     33e:	f080 8107 	bcs.w	550 <CONFIG_BT_RX_STACK_SIZE+0x150>
     342:	45a4      	cmp	ip, r4
     344:	f240 8104 	bls.w	550 <CONFIG_BT_RX_STACK_SIZE+0x150>
     348:	3802      	subs	r0, #2
     34a:	442c      	add	r4, r5
     34c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     350:	eba4 040c 	sub.w	r4, r4, ip
     354:	2700      	movs	r7, #0
     356:	b11e      	cbz	r6, 360 <__udivmoddi4+0xa0>
     358:	40d4      	lsrs	r4, r2
     35a:	2300      	movs	r3, #0
     35c:	e9c6 4300 	strd	r4, r3, [r6]
     360:	4639      	mov	r1, r7
     362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     366:	428b      	cmp	r3, r1
     368:	d909      	bls.n	37e <__udivmoddi4+0xbe>
     36a:	2e00      	cmp	r6, #0
     36c:	f000 80eb 	beq.w	546 <CONFIG_BT_RX_STACK_SIZE+0x146>
     370:	2700      	movs	r7, #0
     372:	e9c6 0100 	strd	r0, r1, [r6]
     376:	4638      	mov	r0, r7
     378:	4639      	mov	r1, r7
     37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     37e:	fab3 f783 	clz	r7, r3
     382:	2f00      	cmp	r7, #0
     384:	d147      	bne.n	416 <CONFIG_BT_RX_STACK_SIZE+0x16>
     386:	428b      	cmp	r3, r1
     388:	d302      	bcc.n	390 <__udivmoddi4+0xd0>
     38a:	4282      	cmp	r2, r0
     38c:	f200 80fa 	bhi.w	584 <CONFIG_BT_RX_STACK_SIZE+0x184>
     390:	1a84      	subs	r4, r0, r2
     392:	eb61 0303 	sbc.w	r3, r1, r3
     396:	2001      	movs	r0, #1
     398:	4698      	mov	r8, r3
     39a:	2e00      	cmp	r6, #0
     39c:	d0e0      	beq.n	360 <__udivmoddi4+0xa0>
     39e:	e9c6 4800 	strd	r4, r8, [r6]
     3a2:	e7dd      	b.n	360 <__udivmoddi4+0xa0>
     3a4:	b902      	cbnz	r2, 3a8 <__udivmoddi4+0xe8>
     3a6:	deff      	udf	#255	; 0xff
     3a8:	fab2 f282 	clz	r2, r2
     3ac:	2a00      	cmp	r2, #0
     3ae:	f040 808f 	bne.w	4d0 <CONFIG_BT_RX_STACK_SIZE+0xd0>
     3b2:	1b49      	subs	r1, r1, r5
     3b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3b8:	fa1f f885 	uxth.w	r8, r5
     3bc:	2701      	movs	r7, #1
     3be:	fbb1 fcfe 	udiv	ip, r1, lr
     3c2:	0c23      	lsrs	r3, r4, #16
     3c4:	fb0e 111c 	mls	r1, lr, ip, r1
     3c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3cc:	fb08 f10c 	mul.w	r1, r8, ip
     3d0:	4299      	cmp	r1, r3
     3d2:	d907      	bls.n	3e4 <__udivmoddi4+0x124>
     3d4:	18eb      	adds	r3, r5, r3
     3d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3da:	d202      	bcs.n	3e2 <__udivmoddi4+0x122>
     3dc:	4299      	cmp	r1, r3
     3de:	f200 80cd 	bhi.w	57c <CONFIG_BT_RX_STACK_SIZE+0x17c>
     3e2:	4684      	mov	ip, r0
     3e4:	1a59      	subs	r1, r3, r1
     3e6:	b2a3      	uxth	r3, r4
     3e8:	fbb1 f0fe 	udiv	r0, r1, lr
     3ec:	fb0e 1410 	mls	r4, lr, r0, r1
     3f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     3f4:	fb08 f800 	mul.w	r8, r8, r0
     3f8:	45a0      	cmp	r8, r4
     3fa:	d907      	bls.n	40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     3fc:	192c      	adds	r4, r5, r4
     3fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     402:	d202      	bcs.n	40a <CONFIG_BT_RX_STACK_SIZE+0xa>
     404:	45a0      	cmp	r8, r4
     406:	f200 80b6 	bhi.w	576 <CONFIG_BT_RX_STACK_SIZE+0x176>
     40a:	4618      	mov	r0, r3
     40c:	eba4 0408 	sub.w	r4, r4, r8
     410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     414:	e79f      	b.n	356 <__udivmoddi4+0x96>
     416:	f1c7 0c20 	rsb	ip, r7, #32
     41a:	40bb      	lsls	r3, r7
     41c:	fa22 fe0c 	lsr.w	lr, r2, ip
     420:	ea4e 0e03 	orr.w	lr, lr, r3
     424:	fa01 f407 	lsl.w	r4, r1, r7
     428:	fa20 f50c 	lsr.w	r5, r0, ip
     42c:	fa21 f30c 	lsr.w	r3, r1, ip
     430:	ea4f 481e 	mov.w	r8, lr, lsr #16
     434:	4325      	orrs	r5, r4
     436:	fbb3 f9f8 	udiv	r9, r3, r8
     43a:	0c2c      	lsrs	r4, r5, #16
     43c:	fb08 3319 	mls	r3, r8, r9, r3
     440:	fa1f fa8e 	uxth.w	sl, lr
     444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     448:	fb09 f40a 	mul.w	r4, r9, sl
     44c:	429c      	cmp	r4, r3
     44e:	fa02 f207 	lsl.w	r2, r2, r7
     452:	fa00 f107 	lsl.w	r1, r0, r7
     456:	d90b      	bls.n	470 <CONFIG_BT_RX_STACK_SIZE+0x70>
     458:	eb1e 0303 	adds.w	r3, lr, r3
     45c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     460:	f080 8087 	bcs.w	572 <CONFIG_BT_RX_STACK_SIZE+0x172>
     464:	429c      	cmp	r4, r3
     466:	f240 8084 	bls.w	572 <CONFIG_BT_RX_STACK_SIZE+0x172>
     46a:	f1a9 0902 	sub.w	r9, r9, #2
     46e:	4473      	add	r3, lr
     470:	1b1b      	subs	r3, r3, r4
     472:	b2ad      	uxth	r5, r5
     474:	fbb3 f0f8 	udiv	r0, r3, r8
     478:	fb08 3310 	mls	r3, r8, r0, r3
     47c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     480:	fb00 fa0a 	mul.w	sl, r0, sl
     484:	45a2      	cmp	sl, r4
     486:	d908      	bls.n	49a <CONFIG_BT_RX_STACK_SIZE+0x9a>
     488:	eb1e 0404 	adds.w	r4, lr, r4
     48c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     490:	d26b      	bcs.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     492:	45a2      	cmp	sl, r4
     494:	d969      	bls.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     496:	3802      	subs	r0, #2
     498:	4474      	add	r4, lr
     49a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     49e:	fba0 8902 	umull	r8, r9, r0, r2
     4a2:	eba4 040a 	sub.w	r4, r4, sl
     4a6:	454c      	cmp	r4, r9
     4a8:	46c2      	mov	sl, r8
     4aa:	464b      	mov	r3, r9
     4ac:	d354      	bcc.n	558 <CONFIG_BT_RX_STACK_SIZE+0x158>
     4ae:	d051      	beq.n	554 <CONFIG_BT_RX_STACK_SIZE+0x154>
     4b0:	2e00      	cmp	r6, #0
     4b2:	d069      	beq.n	588 <CONFIG_BT_RX_STACK_SIZE+0x188>
     4b4:	ebb1 050a 	subs.w	r5, r1, sl
     4b8:	eb64 0403 	sbc.w	r4, r4, r3
     4bc:	fa04 fc0c 	lsl.w	ip, r4, ip
     4c0:	40fd      	lsrs	r5, r7
     4c2:	40fc      	lsrs	r4, r7
     4c4:	ea4c 0505 	orr.w	r5, ip, r5
     4c8:	e9c6 5400 	strd	r5, r4, [r6]
     4cc:	2700      	movs	r7, #0
     4ce:	e747      	b.n	360 <__udivmoddi4+0xa0>
     4d0:	f1c2 0320 	rsb	r3, r2, #32
     4d4:	fa20 f703 	lsr.w	r7, r0, r3
     4d8:	4095      	lsls	r5, r2
     4da:	fa01 f002 	lsl.w	r0, r1, r2
     4de:	fa21 f303 	lsr.w	r3, r1, r3
     4e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     4e6:	4338      	orrs	r0, r7
     4e8:	0c01      	lsrs	r1, r0, #16
     4ea:	fbb3 f7fe 	udiv	r7, r3, lr
     4ee:	fa1f f885 	uxth.w	r8, r5
     4f2:	fb0e 3317 	mls	r3, lr, r7, r3
     4f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4fa:	fb07 f308 	mul.w	r3, r7, r8
     4fe:	428b      	cmp	r3, r1
     500:	fa04 f402 	lsl.w	r4, r4, r2
     504:	d907      	bls.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     506:	1869      	adds	r1, r5, r1
     508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     50c:	d22f      	bcs.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     50e:	428b      	cmp	r3, r1
     510:	d92d      	bls.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     512:	3f02      	subs	r7, #2
     514:	4429      	add	r1, r5
     516:	1acb      	subs	r3, r1, r3
     518:	b281      	uxth	r1, r0
     51a:	fbb3 f0fe 	udiv	r0, r3, lr
     51e:	fb0e 3310 	mls	r3, lr, r0, r3
     522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     526:	fb00 f308 	mul.w	r3, r0, r8
     52a:	428b      	cmp	r3, r1
     52c:	d907      	bls.n	53e <CONFIG_BT_RX_STACK_SIZE+0x13e>
     52e:	1869      	adds	r1, r5, r1
     530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     534:	d217      	bcs.n	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     536:	428b      	cmp	r3, r1
     538:	d915      	bls.n	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     53a:	3802      	subs	r0, #2
     53c:	4429      	add	r1, r5
     53e:	1ac9      	subs	r1, r1, r3
     540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     544:	e73b      	b.n	3be <__udivmoddi4+0xfe>
     546:	4637      	mov	r7, r6
     548:	4630      	mov	r0, r6
     54a:	e709      	b.n	360 <__udivmoddi4+0xa0>
     54c:	4607      	mov	r7, r0
     54e:	e6e7      	b.n	320 <__udivmoddi4+0x60>
     550:	4618      	mov	r0, r3
     552:	e6fb      	b.n	34c <__udivmoddi4+0x8c>
     554:	4541      	cmp	r1, r8
     556:	d2ab      	bcs.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     558:	ebb8 0a02 	subs.w	sl, r8, r2
     55c:	eb69 020e 	sbc.w	r2, r9, lr
     560:	3801      	subs	r0, #1
     562:	4613      	mov	r3, r2
     564:	e7a4      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     566:	4660      	mov	r0, ip
     568:	e7e9      	b.n	53e <CONFIG_BT_RX_STACK_SIZE+0x13e>
     56a:	4618      	mov	r0, r3
     56c:	e795      	b.n	49a <CONFIG_BT_RX_STACK_SIZE+0x9a>
     56e:	4667      	mov	r7, ip
     570:	e7d1      	b.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     572:	4681      	mov	r9, r0
     574:	e77c      	b.n	470 <CONFIG_BT_RX_STACK_SIZE+0x70>
     576:	3802      	subs	r0, #2
     578:	442c      	add	r4, r5
     57a:	e747      	b.n	40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     57c:	f1ac 0c02 	sub.w	ip, ip, #2
     580:	442b      	add	r3, r5
     582:	e72f      	b.n	3e4 <__udivmoddi4+0x124>
     584:	4638      	mov	r0, r7
     586:	e708      	b.n	39a <__udivmoddi4+0xda>
     588:	4637      	mov	r7, r6
     58a:	e6e9      	b.n	360 <__udivmoddi4+0xa0>

0000058c <__aeabi_idiv0>:
     58c:	4770      	bx	lr
     58e:	bf00      	nop

00000590 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     590:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     592:	4603      	mov	r3, r0
     594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     598:	b90a      	cbnz	r2, 59e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     59a:	701a      	strb	r2, [r3, #0]

	return dest;
}
     59c:	4770      	bx	lr
		*d = *s;
     59e:	f803 2b01 	strb.w	r2, [r3], #1
     5a2:	e7f7      	b.n	594 <strcpy+0x4>

000005a4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5a4:	3801      	subs	r0, #1
     5a6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5b0:	4293      	cmp	r3, r2
     5b2:	d102      	bne.n	5ba <strcmp+0x16>
     5b4:	2b00      	cmp	r3, #0
     5b6:	d1f7      	bne.n	5a8 <strcmp+0x4>
     5b8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ba:	1a98      	subs	r0, r3, r2
     5bc:	4770      	bx	lr

000005be <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5be:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5c0:	b15a      	cbz	r2, 5da <memcmp+0x1c>
     5c2:	3901      	subs	r1, #1
     5c4:	1884      	adds	r4, r0, r2
     5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
     5ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5ce:	42a0      	cmp	r0, r4
     5d0:	d001      	beq.n	5d6 <memcmp+0x18>
     5d2:	429a      	cmp	r2, r3
     5d4:	d0f7      	beq.n	5c6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5d6:	1ad0      	subs	r0, r2, r3
}
     5d8:	bd10      	pop	{r4, pc}
		return 0;
     5da:	4610      	mov	r0, r2
     5dc:	e7fc      	b.n	5d8 <memcmp+0x1a>

000005de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
     5de:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5e0:	ea81 0400 	eor.w	r4, r1, r0
     5e4:	07a5      	lsls	r5, r4, #30
     5e6:	4603      	mov	r3, r0
     5e8:	d00b      	beq.n	602 <CONFIG_BT_CTLR_COMPANY_ID+0x11>
     5ea:	3b01      	subs	r3, #1
     5ec:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     5ee:	4291      	cmp	r1, r2
     5f0:	d11d      	bne.n	62e <CONFIG_BT_CTLR_COMPANY_ID+0x3d>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
     5f4:	2a00      	cmp	r2, #0
     5f6:	d0fc      	beq.n	5f2 <CONFIG_BT_CTLR_COMPANY_ID+0x1>
			*(d_byte++) = *(s_byte++);
     5f8:	f811 4b01 	ldrb.w	r4, [r1], #1
     5fc:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     600:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     602:	079c      	lsls	r4, r3, #30
     604:	d1f6      	bne.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     606:	1f1d      	subs	r5, r3, #4
     608:	460c      	mov	r4, r1
     60a:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
     60c:	1b3e      	subs	r6, r7, r4
     60e:	2e03      	cmp	r6, #3
     610:	d808      	bhi.n	624 <CONFIG_BT_CTLR_COMPANY_ID+0x33>
     612:	0894      	lsrs	r4, r2, #2
     614:	f06f 0503 	mvn.w	r5, #3
     618:	fb05 2204 	mla	r2, r5, r4, r2
     61c:	00a4      	lsls	r4, r4, #2
     61e:	4423      	add	r3, r4
     620:	4421      	add	r1, r4
     622:	e7e2      	b.n	5ea <memcpy+0xc>
			*(d_word++) = *(s_word++);
     624:	f854 6b04 	ldr.w	r6, [r4], #4
     628:	f845 6f04 	str.w	r6, [r5, #4]!
     62c:	e7ee      	b.n	60c <CONFIG_BT_CTLR_COMPANY_ID+0x1b>
		*(d_byte++) = *(s_byte++);
     62e:	f811 4b01 	ldrb.w	r4, [r1], #1
     632:	f803 4f01 	strb.w	r4, [r3, #1]!
     636:	e7da      	b.n	5ee <memcpy+0x10>

00000638 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     63a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     63c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     63e:	079c      	lsls	r4, r3, #30
     640:	d10f      	bne.n	662 <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     642:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     646:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     64a:	461d      	mov	r5, r3
     64c:	189f      	adds	r7, r3, r2
     64e:	1b7e      	subs	r6, r7, r5
     650:	2e03      	cmp	r6, #3
     652:	d80c      	bhi.n	66e <memset+0x36>
     654:	0894      	lsrs	r4, r2, #2
     656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     65a:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     65c:	429c      	cmp	r4, r3
     65e:	d109      	bne.n	674 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     660:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
     662:	2a00      	cmp	r2, #0
     664:	d0fc      	beq.n	660 <memset+0x28>
		*(d_byte++) = c_byte;
     666:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     66a:	3a01      	subs	r2, #1
     66c:	e7e7      	b.n	63e <memset+0x6>
		*(d_word++) = c_word;
     66e:	f845 4b04 	str.w	r4, [r5], #4
     672:	e7ec      	b.n	64e <memset+0x16>
		*(d_byte++) = c_byte;
     674:	f804 1b01 	strb.w	r1, [r4], #1
     678:	e7f0      	b.n	65c <memset+0x24>
	...

0000067c <main>:
#include <zephyr.h>
#include <misc/printk.h>

void main(void)
{
	printk("Hello World! %s\n", CONFIG_ARCH);
     67c:	4901      	ldr	r1, [pc, #4]	; (684 <main+0x8>)
     67e:	4802      	ldr	r0, [pc, #8]	; (688 <main+0xc>)
     680:	f000 bde0 	b.w	1244 <printk>
     684:	0000a3b5 	.word	0x0000a3b5
     688:	0000a3b9 	.word	0x0000a3b9

0000068c <errata_103>:
#endif /* CONFIG_SOC_NRF52832 */

#ifdef CONFIG_SOC_NRF52840
static bool errata_36(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     68c:	4b05      	ldr	r3, [pc, #20]	; (6a4 <errata_103+0x18>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     692:	bf01      	itttt	eq
     694:	4b04      	ldreq	r3, [pc, #16]	; (6a8 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     696:	6818      	ldreq	r0, [r3, #0]
     698:	fab0 f080 	clzeq	r0, r0
     69c:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     69e:	bf18      	it	ne
     6a0:	2000      	movne	r0, #0
}
     6a2:	4770      	bx	lr
     6a4:	10000130 	.word	0x10000130
     6a8:	10000134 	.word	0x10000134

000006ac <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     6ac:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     6ae:	f04f 0320 	mov.w	r3, #32
     6b2:	f3ef 8111 	mrs	r1, BASEPRI
     6b6:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     6ba:	f7ff ffe7 	bl	68c <errata_103>
     6be:	b140      	cbz	r0, 6d2 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     6c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     6c4:	2200      	movs	r2, #0
     6c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     6ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     6ce:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     6d2:	f7ff ffdb 	bl	68c <errata_103>
     6d6:	b110      	cbz	r0, 6de <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     6d8:	4b38      	ldr	r3, [pc, #224]	; (7bc <nordicsemi_nrf52_init+0x110>)
     6da:	4a39      	ldr	r2, [pc, #228]	; (7c0 <nordicsemi_nrf52_init+0x114>)
     6dc:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     6de:	f7ff ffd5 	bl	68c <errata_103>
     6e2:	b118      	cbz	r0, 6ec <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     6e4:	4b37      	ldr	r3, [pc, #220]	; (7c4 <nordicsemi_nrf52_init+0x118>)
     6e6:	22fb      	movs	r2, #251	; 0xfb
     6e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     6ec:	f7ff ffce 	bl	68c <errata_103>
     6f0:	b148      	cbz	r0, 706 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     6f2:	4835      	ldr	r0, [pc, #212]	; (7c8 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     6f4:	4b35      	ldr	r3, [pc, #212]	; (7cc <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     6f6:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     6f8:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     6fa:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     6fe:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     702:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     704:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     706:	f7ff ffc1 	bl	68c <errata_103>
     70a:	b118      	cbz	r0, 714 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     70c:	4b30      	ldr	r3, [pc, #192]	; (7d0 <nordicsemi_nrf52_init+0x124>)
     70e:	f44f 7200 	mov.w	r2, #512	; 0x200
     712:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     714:	f7ff ffba 	bl	68c <errata_103>
     718:	b148      	cbz	r0, 72e <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     71a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     71e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     722:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     724:	bf44      	itt	mi
     726:	f06f 0201 	mvnmi.w	r2, #1
     72a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     72e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     732:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     736:	2a00      	cmp	r2, #0
     738:	db03      	blt.n	742 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     73a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     73e:	2b00      	cmp	r3, #0
     740:	da2f      	bge.n	7a2 <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     742:	4b24      	ldr	r3, [pc, #144]	; (7d4 <nordicsemi_nrf52_init+0x128>)
     744:	2201      	movs	r2, #1
     746:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     74a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     74e:	2a00      	cmp	r2, #0
     750:	d0fb      	beq.n	74a <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     752:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     756:	2112      	movs	r1, #18
     758:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     75c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     760:	2a00      	cmp	r2, #0
     762:	d0fb      	beq.n	75c <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     764:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     768:	2212      	movs	r2, #18
     76a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     76e:	4b19      	ldr	r3, [pc, #100]	; (7d4 <nordicsemi_nrf52_init+0x128>)
     770:	461a      	mov	r2, r3
     772:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     776:	2900      	cmp	r1, #0
     778:	d0fb      	beq.n	772 <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     77a:	2100      	movs	r1, #0
     77c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     780:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     784:	2b00      	cmp	r3, #0
     786:	d0fb      	beq.n	780 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     788:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     78c:	4912      	ldr	r1, [pc, #72]	; (7d8 <nordicsemi_nrf52_init+0x12c>)
     78e:	4b13      	ldr	r3, [pc, #76]	; (7dc <nordicsemi_nrf52_init+0x130>)
     790:	68ca      	ldr	r2, [r1, #12]
     792:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     796:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     798:	60cb      	str	r3, [r1, #12]
     79a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     79e:	bf00      	nop
     7a0:	e7fd      	b.n	79e <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     7a2:	4b0d      	ldr	r3, [pc, #52]	; (7d8 <nordicsemi_nrf52_init+0x12c>)
     7a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7a8:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     7aa:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     7ac:	4b0c      	ldr	r3, [pc, #48]	; (7e0 <nordicsemi_nrf52_init+0x134>)
     7ae:	4a0d      	ldr	r2, [pc, #52]	; (7e4 <nordicsemi_nrf52_init+0x138>)
     7b0:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     7b2:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     7b6:	2000      	movs	r0, #0
     7b8:	bd08      	pop	{r3, pc}
     7ba:	bf00      	nop
     7bc:	4000568c 	.word	0x4000568c
     7c0:	00038148 	.word	0x00038148
     7c4:	4000f000 	.word	0x4000f000
     7c8:	40000ee4 	.word	0x40000ee4
     7cc:	10000258 	.word	0x10000258
     7d0:	40029640 	.word	0x40029640
     7d4:	4001e000 	.word	0x4001e000
     7d8:	e000ed00 	.word	0xe000ed00
     7dc:	05fa0004 	.word	0x05fa0004
     7e0:	20002944 	.word	0x20002944
     7e4:	03d09000 	.word	0x03d09000

000007e8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     7e8:	4808      	ldr	r0, [pc, #32]	; (80c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     7ea:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     7ec:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     7ee:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     7f0:	d80b      	bhi.n	80a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     7f2:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     7f4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     7f6:	d008      	beq.n	80a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     7f8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     7fa:	f009 f8eb 	bl	99d4 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     7fe:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     802:	4903      	ldr	r1, [pc, #12]	; (810 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     808:	600a      	str	r2, [r1, #0]

0000080a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     80a:	4770      	bx	lr
    ldr r0, =_kernel
     80c:	20000d7c 	.word	0x20000d7c
    ldr r1, =_SCS_ICSR
     810:	e000ed04 	.word	0xe000ed04

00000814 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     814:	4804      	ldr	r0, [pc, #16]	; (828 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     816:	2300      	movs	r3, #0
     818:	2120      	movs	r1, #32
     81a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     81c:	3301      	adds	r3, #1
     81e:	2b2e      	cmp	r3, #46	; 0x2e
     820:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     824:	d1f9      	bne.n	81a <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     826:	4770      	bx	lr
     828:	e000e100 	.word	0xe000e100

0000082c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     82c:	4a08      	ldr	r2, [pc, #32]	; (850 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     82e:	4909      	ldr	r1, [pc, #36]	; (854 <__swap+0x28>)
	_current->arch.basepri = key;
     830:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     832:	6809      	ldr	r1, [r1, #0]
     834:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     836:	4908      	ldr	r1, [pc, #32]	; (858 <__swap+0x2c>)
	_current->arch.basepri = key;
     838:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     83a:	684b      	ldr	r3, [r1, #4]
     83c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     840:	604b      	str	r3, [r1, #4]
     842:	2300      	movs	r3, #0
     844:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     848:	6893      	ldr	r3, [r2, #8]
}
     84a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     84c:	4770      	bx	lr
     84e:	bf00      	nop
     850:	20000d7c 	.word	0x20000d7c
     854:	0000a9d4 	.word	0x0000a9d4
     858:	e000ed00 	.word	0xe000ed00

0000085c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     85c:	490e      	ldr	r1, [pc, #56]	; (898 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     85e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     860:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     864:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     866:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     86a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     86e:	4f0b      	ldr	r7, [pc, #44]	; (89c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     870:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     874:	2020      	movs	r0, #32
    msr BASEPRI, r0
     876:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     87a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     87c:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     87e:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     880:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     882:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     884:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     886:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     88a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     88e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     892:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     896:	4770      	bx	lr
    ldr r1, =_kernel
     898:	20000d7c 	.word	0x20000d7c
    ldr v4, =_SCS_ICSR
     89c:	e000ed04 	.word	0xe000ed04

000008a0 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     8a0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     8a4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     8a6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     8aa:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     8ae:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     8b0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     8b4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     8b8:	d001      	beq.n	8be <_context_switch>

    cmp r1, #2
     8ba:	2902      	cmp	r1, #2
    beq _oops
     8bc:	d007      	beq.n	8ce <_oops>

000008be <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     8be:	4040      	eors	r0, r0
    msr BASEPRI, r0
     8c0:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     8c4:	4904      	ldr	r1, [pc, #16]	; (8d8 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     8ca:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     8cc:	4770      	bx	lr

000008ce <_oops>:

_oops:
    push {lr}
     8ce:	b500      	push	{lr}
    blx _do_kernel_oops
     8d0:	f000 fa2c 	bl	d2c <_do_kernel_oops>
    pop {pc}
     8d4:	bd00      	pop	{pc}
     8d6:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     8d8:	e000ed04 	.word	0xe000ed04

000008dc <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     8dc:	b510      	push	{r4, lr}
     8de:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8e0:	f009 f84e 	bl	9980 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     8e4:	6822      	ldr	r2, [r4, #0]
     8e6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     8ec:	4801      	ldr	r0, [pc, #4]	; (8f4 <_FaultThreadShow.isra.2+0x18>)
     8ee:	f000 bca9 	b.w	1244 <printk>
     8f2:	bf00      	nop
     8f4:	0000a52f 	.word	0x0000a52f

000008f8 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     8f8:	b510      	push	{r4, lr}
     8fa:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     8fc:	481a      	ldr	r0, [pc, #104]	; (968 <_UsageFault+0x70>)
     8fe:	f000 fca1 	bl	1244 <printk>

	_FaultThreadShow(esf);
     902:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     906:	4c19      	ldr	r4, [pc, #100]	; (96c <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     908:	f7ff ffe8 	bl	8dc <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     90c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     90e:	019a      	lsls	r2, r3, #6
     910:	d502      	bpl.n	918 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     912:	4817      	ldr	r0, [pc, #92]	; (970 <_UsageFault+0x78>)
     914:	f000 fc96 	bl	1244 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     918:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     91a:	01db      	lsls	r3, r3, #7
     91c:	d502      	bpl.n	924 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     91e:	4815      	ldr	r0, [pc, #84]	; (974 <_UsageFault+0x7c>)
     920:	f000 fc90 	bl	1244 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     926:	0318      	lsls	r0, r3, #12
     928:	d502      	bpl.n	930 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     92a:	4813      	ldr	r0, [pc, #76]	; (978 <_UsageFault+0x80>)
     92c:	f000 fc8a 	bl	1244 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     930:	4c0e      	ldr	r4, [pc, #56]	; (96c <_UsageFault+0x74>)
     932:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     934:	0359      	lsls	r1, r3, #13
     936:	d502      	bpl.n	93e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     938:	4810      	ldr	r0, [pc, #64]	; (97c <_UsageFault+0x84>)
     93a:	f000 fc83 	bl	1244 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     93e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     940:	039a      	lsls	r2, r3, #14
     942:	d502      	bpl.n	94a <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     944:	480e      	ldr	r0, [pc, #56]	; (980 <_UsageFault+0x88>)
     946:	f000 fc7d 	bl	1244 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     94a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     94c:	03db      	lsls	r3, r3, #15
     94e:	d502      	bpl.n	956 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     950:	480c      	ldr	r0, [pc, #48]	; (984 <_UsageFault+0x8c>)
     952:	f000 fc77 	bl	1244 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     956:	4a05      	ldr	r2, [pc, #20]	; (96c <_UsageFault+0x74>)
     958:	6a93      	ldr	r3, [r2, #40]	; 0x28
     95a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     95e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     962:	6293      	str	r3, [r2, #40]	; 0x28
}
     964:	bd10      	pop	{r4, pc}
     966:	bf00      	nop
     968:	0000a630 	.word	0x0000a630
     96c:	e000ed00 	.word	0xe000ed00
     970:	0000a649 	.word	0x0000a649
     974:	0000a65d 	.word	0x0000a65d
     978:	0000a678 	.word	0x0000a678
     97c:	0000a697 	.word	0x0000a697
     980:	0000a6bd 	.word	0x0000a6bd
     984:	0000a6d8 	.word	0x0000a6d8

00000988 <_MpuFault>:
{
     988:	b538      	push	{r3, r4, r5, lr}
     98a:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     98c:	4819      	ldr	r0, [pc, #100]	; (9f4 <_MpuFault+0x6c>)
{
     98e:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     990:	f000 fc58 	bl	1244 <printk>
	_FaultThreadShow(esf);
     994:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     998:	4c17      	ldr	r4, [pc, #92]	; (9f8 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     99a:	f7ff ff9f 	bl	8dc <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     99e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9a0:	06d9      	lsls	r1, r3, #27
     9a2:	d504      	bpl.n	9ae <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     9a4:	4815      	ldr	r0, [pc, #84]	; (9fc <_MpuFault+0x74>)
}
     9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     9aa:	f000 bc4b 	b.w	1244 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     9ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9b0:	071a      	lsls	r2, r3, #28
     9b2:	d501      	bpl.n	9b8 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     9b4:	4812      	ldr	r0, [pc, #72]	; (a00 <_MpuFault+0x78>)
     9b6:	e7f6      	b.n	9a6 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     9b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9ba:	079b      	lsls	r3, r3, #30
     9bc:	d50f      	bpl.n	9de <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     9be:	4811      	ldr	r0, [pc, #68]	; (a04 <_MpuFault+0x7c>)
     9c0:	f000 fc40 	bl	1244 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     9c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9c8:	0618      	lsls	r0, r3, #24
     9ca:	d507      	bpl.n	9dc <_MpuFault+0x54>
			PR_EXC("  Address: 0x%x\n", mmfar);
     9cc:	480e      	ldr	r0, [pc, #56]	; (a08 <_MpuFault+0x80>)
     9ce:	f000 fc39 	bl	1244 <printk>
			if (fromHardFault) {
     9d2:	b11d      	cbz	r5, 9dc <_MpuFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     9d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     9da:	62a3      	str	r3, [r4, #40]	; 0x28
}
     9dc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     9de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9e0:	07da      	lsls	r2, r3, #31
     9e2:	d501      	bpl.n	9e8 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     9e4:	4809      	ldr	r0, [pc, #36]	; (a0c <_MpuFault+0x84>)
     9e6:	e7de      	b.n	9a6 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     9e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9ea:	069b      	lsls	r3, r3, #26
     9ec:	d5f6      	bpl.n	9dc <_MpuFault+0x54>
		PR_EXC("  Floating-point lazy state preservation error\n");
     9ee:	4808      	ldr	r0, [pc, #32]	; (a10 <_MpuFault+0x88>)
     9f0:	e7d9      	b.n	9a6 <_MpuFault+0x1e>
     9f2:	bf00      	nop
     9f4:	0000a579 	.word	0x0000a579
     9f8:	e000ed00 	.word	0xe000ed00
     9fc:	0000a590 	.word	0x0000a590
     a00:	0000a5a2 	.word	0x0000a5a2
     a04:	0000a5b6 	.word	0x0000a5b6
     a08:	0000a5cf 	.word	0x0000a5cf
     a0c:	0000a5e0 	.word	0x0000a5e0
     a10:	0000a600 	.word	0x0000a600

00000a14 <_BusFault>:
{
     a14:	b538      	push	{r3, r4, r5, lr}
     a16:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     a18:	481d      	ldr	r0, [pc, #116]	; (a90 <_BusFault+0x7c>)
{
     a1a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     a1c:	f000 fc12 	bl	1244 <printk>
	_FaultThreadShow(esf);
     a20:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     a24:	4c1b      	ldr	r4, [pc, #108]	; (a94 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     a26:	f7ff ff59 	bl	8dc <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a2c:	04d8      	lsls	r0, r3, #19
     a2e:	d504      	bpl.n	a3a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     a30:	4819      	ldr	r0, [pc, #100]	; (a98 <_BusFault+0x84>)
}
     a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     a36:	f000 bc05 	b.w	1244 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a3c:	0519      	lsls	r1, r3, #20
     a3e:	d501      	bpl.n	a44 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     a40:	4816      	ldr	r0, [pc, #88]	; (a9c <_BusFault+0x88>)
     a42:	e7f6      	b.n	a32 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     a44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a46:	059a      	lsls	r2, r3, #22
     a48:	d514      	bpl.n	a74 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     a4a:	4815      	ldr	r0, [pc, #84]	; (aa0 <_BusFault+0x8c>)
     a4c:	f000 fbfa 	bl	1244 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     a50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a54:	041b      	lsls	r3, r3, #16
     a56:	d507      	bpl.n	a68 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     a58:	4812      	ldr	r0, [pc, #72]	; (aa4 <_BusFault+0x90>)
     a5a:	f000 fbf3 	bl	1244 <printk>
			if (fromHardFault) {
     a5e:	b11d      	cbz	r5, a68 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     a60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     a66:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     a68:	4b0a      	ldr	r3, [pc, #40]	; (a94 <_BusFault+0x80>)
     a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a6c:	0558      	lsls	r0, r3, #21
     a6e:	d50e      	bpl.n	a8e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     a70:	480d      	ldr	r0, [pc, #52]	; (aa8 <_BusFault+0x94>)
     a72:	e7de      	b.n	a32 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a76:	0559      	lsls	r1, r3, #21
     a78:	d4fa      	bmi.n	a70 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     a7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a7c:	05da      	lsls	r2, r3, #23
     a7e:	d501      	bpl.n	a84 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     a80:	480a      	ldr	r0, [pc, #40]	; (aac <_BusFault+0x98>)
     a82:	e7d6      	b.n	a32 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     a84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a86:	049b      	lsls	r3, r3, #18
     a88:	d501      	bpl.n	a8e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     a8a:	4809      	ldr	r0, [pc, #36]	; (ab0 <_BusFault+0x9c>)
     a8c:	e7d1      	b.n	a32 <_BusFault+0x1e>
}
     a8e:	bd38      	pop	{r3, r4, r5, pc}
     a90:	0000a3f6 	.word	0x0000a3f6
     a94:	e000ed00 	.word	0xe000ed00
     a98:	0000a590 	.word	0x0000a590
     a9c:	0000a5a2 	.word	0x0000a5a2
     aa0:	0000a40d 	.word	0x0000a40d
     aa4:	0000a5cf 	.word	0x0000a5cf
     aa8:	0000a427 	.word	0x0000a427
     aac:	0000a443 	.word	0x0000a443
     ab0:	0000a600 	.word	0x0000a600

00000ab4 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     ab4:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     ab6:	4d27      	ldr	r5, [pc, #156]	; (b54 <_Fault+0xa0>)
     ab8:	686b      	ldr	r3, [r5, #4]
     aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     abe:	1eda      	subs	r2, r3, #3
{
     ac0:	4604      	mov	r4, r0
	switch (fault) {
     ac2:	2a09      	cmp	r2, #9
     ac4:	d83a      	bhi.n	b3c <_Fault+0x88>
     ac6:	e8df f002 	tbb	[pc, r2]
     aca:	3305      	.short	0x3305
     acc:	39392f35 	.word	0x39392f35
     ad0:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     ad4:	4820      	ldr	r0, [pc, #128]	; (b58 <_Fault+0xa4>)
     ad6:	f000 fbb5 	bl	1244 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     ada:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     adc:	079a      	lsls	r2, r3, #30
     ade:	d503      	bpl.n	ae8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     ae0:	481e      	ldr	r0, [pc, #120]	; (b5c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     ae2:	f000 fbaf 	bl	1244 <printk>
     ae6:	e00c      	b.n	b02 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     ae8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     aea:	005b      	lsls	r3, r3, #1
     aec:	d509      	bpl.n	b02 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     aee:	481c      	ldr	r0, [pc, #112]	; (b60 <_Fault+0xac>)
     af0:	f000 fba8 	bl	1244 <printk>
		if (SCB_MMFSR) {
     af4:	4b1b      	ldr	r3, [pc, #108]	; (b64 <_Fault+0xb0>)
     af6:	781b      	ldrb	r3, [r3, #0]
     af8:	b14b      	cbz	r3, b0e <_Fault+0x5a>
			_MpuFault(esf, 1);
     afa:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     afc:	4620      	mov	r0, r4
     afe:	f7ff ff43 	bl	988 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     b02:	4621      	mov	r1, r4
     b04:	2000      	movs	r0, #0
}
     b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     b0a:	f000 b913 	b.w	d34 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     b0e:	4b16      	ldr	r3, [pc, #88]	; (b68 <_Fault+0xb4>)
     b10:	781b      	ldrb	r3, [r3, #0]
     b12:	b123      	cbz	r3, b1e <_Fault+0x6a>
			_BusFault(esf, 1);
     b14:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     b16:	4620      	mov	r0, r4
     b18:	f7ff ff7c 	bl	a14 <_BusFault>
     b1c:	e7f1      	b.n	b02 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     b1e:	4b13      	ldr	r3, [pc, #76]	; (b6c <_Fault+0xb8>)
     b20:	881b      	ldrh	r3, [r3, #0]
     b22:	b29b      	uxth	r3, r3
     b24:	2b00      	cmp	r3, #0
     b26:	d0ec      	beq.n	b02 <_Fault+0x4e>
		_UsageFault(esf);
     b28:	4620      	mov	r0, r4
     b2a:	f7ff fee5 	bl	8f8 <_UsageFault>
     b2e:	e7e8      	b.n	b02 <_Fault+0x4e>
		_MpuFault(esf, 0);
     b30:	2100      	movs	r1, #0
     b32:	e7e3      	b.n	afc <_Fault+0x48>
		_BusFault(esf, 0);
     b34:	2100      	movs	r1, #0
     b36:	e7ee      	b.n	b16 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     b38:	480d      	ldr	r0, [pc, #52]	; (b70 <_Fault+0xbc>)
     b3a:	e7d2      	b.n	ae2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     b3c:	480d      	ldr	r0, [pc, #52]	; (b74 <_Fault+0xc0>)
     b3e:	490e      	ldr	r1, [pc, #56]	; (b78 <_Fault+0xc4>)
     b40:	f1a3 0210 	sub.w	r2, r3, #16
     b44:	2b0f      	cmp	r3, #15
     b46:	bfd8      	it	le
     b48:	4601      	movle	r1, r0
     b4a:	480c      	ldr	r0, [pc, #48]	; (b7c <_Fault+0xc8>)
     b4c:	f000 fb7a 	bl	1244 <printk>
     b50:	e7d7      	b.n	b02 <_Fault+0x4e>
     b52:	bf00      	nop
     b54:	e000ed00 	.word	0xe000ed00
     b58:	0000a48a 	.word	0x0000a48a
     b5c:	0000a4a2 	.word	0x0000a4a2
     b60:	0000a4c4 	.word	0x0000a4c4
     b64:	e000ed28 	.word	0xe000ed28
     b68:	e000ed29 	.word	0xe000ed29
     b6c:	e000ed2a 	.word	0xe000ed2a
     b70:	0000a4e4 	.word	0x0000a4e4
     b74:	0000a45c 	.word	0x0000a45c
     b78:	0000a471 	.word	0x0000a471
     b7c:	0000a51b 	.word	0x0000a51b

00000b80 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     b80:	4a02      	ldr	r2, [pc, #8]	; (b8c <_FaultInit+0xc>)
     b82:	6953      	ldr	r3, [r2, #20]
     b84:	f043 0310 	orr.w	r3, r3, #16
     b88:	6153      	str	r3, [r2, #20]
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     b8a:	4770      	bx	lr
     b8c:	e000ed00 	.word	0xe000ed00

00000b90 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     b90:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     b92:	2b00      	cmp	r3, #0
     b94:	db08      	blt.n	ba8 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b96:	2201      	movs	r2, #1
     b98:	f000 001f 	and.w	r0, r0, #31
     b9c:	fa02 f000 	lsl.w	r0, r2, r0
     ba0:	095b      	lsrs	r3, r3, #5
     ba2:	4a02      	ldr	r2, [pc, #8]	; (bac <_arch_irq_enable+0x1c>)
     ba4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     ba8:	4770      	bx	lr
     baa:	bf00      	nop
     bac:	e000e100 	.word	0xe000e100

00000bb0 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     bb0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     bb2:	2b00      	cmp	r3, #0
     bb4:	db0d      	blt.n	bd2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bb6:	2201      	movs	r2, #1
     bb8:	095b      	lsrs	r3, r3, #5
     bba:	f000 001f 	and.w	r0, r0, #31
     bbe:	fa02 f000 	lsl.w	r0, r2, r0
     bc2:	3320      	adds	r3, #32
     bc4:	4a03      	ldr	r2, [pc, #12]	; (bd4 <_arch_irq_disable+0x24>)
     bc6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     bce:	f3bf 8f6f 	isb	sy
}
     bd2:	4770      	bx	lr
     bd4:	e000e100 	.word	0xe000e100

00000bd8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     bd8:	0942      	lsrs	r2, r0, #5
     bda:	4b05      	ldr	r3, [pc, #20]	; (bf0 <_arch_irq_is_enabled+0x18>)
     bdc:	f000 001f 	and.w	r0, r0, #31
     be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     be4:	2301      	movs	r3, #1
     be6:	fa03 f000 	lsl.w	r0, r3, r0
}
     bea:	4010      	ands	r0, r2
     bec:	4770      	bx	lr
     bee:	bf00      	nop
     bf0:	e000e100 	.word	0xe000e100

00000bf4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     bf4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     bf6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     bf8:	bfa8      	it	ge
     bfa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     bfe:	f101 0101 	add.w	r1, r1, #1
     c02:	ea4f 1141 	mov.w	r1, r1, lsl #5
     c06:	bfae      	itee	ge
     c08:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c0c:	f000 000f 	andlt.w	r0, r0, #15
     c10:	4b03      	ldrlt	r3, [pc, #12]	; (c20 <_irq_priority_set+0x2c>)
     c12:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c14:	bfac      	ite	ge
     c16:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c1a:	5419      	strblt	r1, [r3, r0]
}
     c1c:	4770      	bx	lr
     c1e:	bf00      	nop
     c20:	e000ed14 	.word	0xe000ed14

00000c24 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     c24:	f000 b842 	b.w	cac <__bus_fault>

00000c28 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     c28:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     c2a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <_arch_isr_direct_pm+0x18>)
     c2e:	6998      	ldr	r0, [r3, #24]
     c30:	b118      	cbz	r0, c3a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     c32:	2200      	movs	r2, #0
     c34:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     c36:	f008 fb29 	bl	928c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     c3a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
     c3c:	bd08      	pop	{r3, pc}
     c3e:	bf00      	nop
     c40:	20000d7c 	.word	0x20000d7c

00000c44 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c46:	460c      	mov	r4, r1
     c48:	4616      	mov	r6, r2
     c4a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     c4c:	2204      	movs	r2, #4
     c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c50:	9909      	ldr	r1, [sp, #36]	; 0x24
     c52:	4605      	mov	r5, r0
     c54:	f009 f992 	bl	9f7c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     c58:	f1a6 0120 	sub.w	r1, r6, #32
     c5c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     c5e:	4a0c      	ldr	r2, [pc, #48]	; (c90 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     c60:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
     c64:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     c66:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
     c6a:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
     c6e:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
     c72:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     c74:	9a06      	ldr	r2, [sp, #24]
     c76:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     c78:	9a07      	ldr	r2, [sp, #28]
     c7a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     c7c:	9a08      	ldr	r2, [sp, #32]
     c7e:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
     c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
     c84:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     c86:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     c88:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     c8a:	662b      	str	r3, [r5, #96]	; 0x60
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
	thread_monitor_init(thread);
#endif
}
     c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c8e:	bf00      	nop
     c90:	00009df5 	.word	0x00009df5

00000c94 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     c94:	4901      	ldr	r1, [pc, #4]	; (c9c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     c96:	2210      	movs	r2, #16
	str r2, [r1]
     c98:	600a      	str	r2, [r1, #0]
	bx lr
     c9a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     c9c:	e000ed10 	.word	0xe000ed10

00000ca0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     ca0:	4040      	eors	r0, r0
	msr BASEPRI, r0
     ca2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     ca6:	bf30      	wfi

	bx lr
     ca8:	4770      	bx	lr
     caa:	bf00      	nop

00000cac <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     cac:	4040      	eors	r0, r0
	msr BASEPRI, r0
     cae:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     cb2:	f8df c01c 	ldr.w	ip, [pc, #28]	; cd0 <__bus_fault+0x24>
	ldr ip, [ip]
     cb6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     cba:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     cbe:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     cc0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     cc4:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     cc8:	b500      	push	{lr}
	bl _Fault
     cca:	f7ff fef3 	bl	ab4 <_Fault>

	pop {pc}
     cce:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     cd0:	e000ed04 	.word	0xe000ed04

00000cd4 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     cd4:	2804      	cmp	r0, #4
{
     cd6:	b538      	push	{r3, r4, r5, lr}
     cd8:	4604      	mov	r4, r0
     cda:	460d      	mov	r5, r1
	switch (reason) {
     cdc:	d013      	beq.n	d06 <_NanoFatalErrorHandler+0x32>
     cde:	2805      	cmp	r0, #5
     ce0:	d013      	beq.n	d0a <_NanoFatalErrorHandler+0x36>
     ce2:	2803      	cmp	r0, #3
     ce4:	d113      	bne.n	d0e <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     ce6:	480c      	ldr	r0, [pc, #48]	; (d18 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     ce8:	f000 faac 	bl	1244 <printk>
     cec:	f008 fe48 	bl	9980 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     cf0:	69aa      	ldr	r2, [r5, #24]
     cf2:	4601      	mov	r1, r0
     cf4:	4809      	ldr	r0, [pc, #36]	; (d1c <_NanoFatalErrorHandler+0x48>)
     cf6:	f000 faa5 	bl	1244 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     cfa:	4629      	mov	r1, r5
     cfc:	4620      	mov	r0, r4
}
     cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     d02:	f000 b817 	b.w	d34 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     d06:	4806      	ldr	r0, [pc, #24]	; (d20 <_NanoFatalErrorHandler+0x4c>)
     d08:	e7ee      	b.n	ce8 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     d0a:	4806      	ldr	r0, [pc, #24]	; (d24 <_NanoFatalErrorHandler+0x50>)
     d0c:	e7ec      	b.n	ce8 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     d0e:	4601      	mov	r1, r0
     d10:	4805      	ldr	r0, [pc, #20]	; (d28 <_NanoFatalErrorHandler+0x54>)
     d12:	f000 fa97 	bl	1244 <printk>
		break;
     d16:	e7e9      	b.n	cec <_NanoFatalErrorHandler+0x18>
     d18:	0000a704 	.word	0x0000a704
     d1c:	0000a782 	.word	0x0000a782
     d20:	0000a72a 	.word	0x0000a72a
     d24:	0000a744 	.word	0x0000a744
     d28:	0000a75f 	.word	0x0000a75f

00000d2c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     d2c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     d2e:	6800      	ldr	r0, [r0, #0]
     d30:	f7ff bfd0 	b.w	cd4 <_NanoFatalErrorHandler>

00000d34 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     d34:	2805      	cmp	r0, #5
{
     d36:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     d38:	d00c      	beq.n	d54 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     d3a:	f009 f843 	bl	9dc4 <k_is_in_isr>
     d3e:	b160      	cbz	r0, d5a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     d40:	f009 f840 	bl	9dc4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     d44:	490c      	ldr	r1, [pc, #48]	; (d78 <_SysFatalErrorHandler+0x44>)
     d46:	4b0d      	ldr	r3, [pc, #52]	; (d7c <_SysFatalErrorHandler+0x48>)
     d48:	2800      	cmp	r0, #0
     d4a:	bf08      	it	eq
     d4c:	4619      	moveq	r1, r3
     d4e:	480c      	ldr	r0, [pc, #48]	; (d80 <_SysFatalErrorHandler+0x4c>)
     d50:	f000 fa78 	bl	1244 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     d54:	f7ff ffa4 	bl	ca0 <k_cpu_idle>
     d58:	e7fc      	b.n	d54 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     d5a:	f009 f843 	bl	9de4 <_is_thread_essential>
     d5e:	2800      	cmp	r0, #0
     d60:	d1ee      	bne.n	d40 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     d62:	4c08      	ldr	r4, [pc, #32]	; (d84 <_SysFatalErrorHandler+0x50>)
     d64:	4808      	ldr	r0, [pc, #32]	; (d88 <_SysFatalErrorHandler+0x54>)
     d66:	68a1      	ldr	r1, [r4, #8]
     d68:	f000 fa6c 	bl	1244 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     d6c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d72:	f000 b80b 	b.w	d8c <_impl_k_thread_abort>
     d76:	bf00      	nop
     d78:	0000a7be 	.word	0x0000a7be
     d7c:	0000a7c2 	.word	0x0000a7c2
     d80:	0000a7d3 	.word	0x0000a7d3
     d84:	20000d7c 	.word	0x20000d7c
     d88:	0000a7f3 	.word	0x0000a7f3

00000d8c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     d8c:	b538      	push	{r3, r4, r5, lr}
     d8e:	4605      	mov	r5, r0
	__asm__ volatile(
     d90:	f04f 0320 	mov.w	r3, #32
     d94:	f3ef 8411 	mrs	r4, BASEPRI
     d98:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     d9c:	f009 f87e 	bl	9e9c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     da0:	4b0b      	ldr	r3, [pc, #44]	; (dd0 <_impl_k_thread_abort+0x44>)
     da2:	689b      	ldr	r3, [r3, #8]
     da4:	42ab      	cmp	r3, r5
     da6:	d10d      	bne.n	dc4 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     da8:	4b0a      	ldr	r3, [pc, #40]	; (dd4 <_impl_k_thread_abort+0x48>)
     daa:	685a      	ldr	r2, [r3, #4]
     dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
     db0:	b922      	cbnz	r2, dbc <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     db2:	f008 fe0f 	bl	99d4 <_update_time_slice_before_swap>

	return __swap(key);
     db6:	4620      	mov	r0, r4
     db8:	f7ff fd38 	bl	82c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     dbc:	685a      	ldr	r2, [r3, #4]
     dbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     dc2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     dc4:	4620      	mov	r0, r4
}
     dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     dca:	f008 bd67 	b.w	989c <_reschedule_threads>
     dce:	bf00      	nop
     dd0:	20000d7c 	.word	0x20000d7c
     dd4:	e000ed00 	.word	0xe000ed00

00000dd8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     dd8:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     dda:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     ddc:	4a0b      	ldr	r2, [pc, #44]	; (e0c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     dde:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     de0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     de2:	bf1e      	ittt	ne
	movne	r1, #0
     de4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     de6:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     de8:	f008 fa50 	blne	928c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     dec:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     dee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     df2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     df6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     dfa:	4905      	ldr	r1, [pc, #20]	; (e10 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     dfc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     dfe:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     e00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     e02:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     e06:	f7ff bcef 	b.w	7e8 <_ExcExit>
     e0a:	0000      	.short	0x0000
	ldr r2, =_kernel
     e0c:	20000d7c 	.word	0x20000d7c
	ldr r1, =_sw_isr_table
     e10:	000000f8 	.word	0x000000f8

00000e14 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     e14:	2020      	movs	r0, #32
    msr BASEPRI, r0
     e16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     e1a:	4805      	ldr	r0, [pc, #20]	; (e30 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     e20:	1840      	adds	r0, r0, r1
    msr PSP, r0
     e22:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     e26:	2002      	movs	r0, #2
    msr CONTROL, r0
     e28:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     e2c:	f000 b806 	b.w	e3c <_PrepC>
    ldr r0, =_interrupt_stack
     e30:	20001d00 	.word	0x20001d00

00000e34 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     e34:	bf30      	wfi
    b _SysNmiOnReset
     e36:	f7ff bffd 	b.w	e34 <_SysNmiOnReset>
     e3a:	bf00      	nop

00000e3c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     e3c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <_PrepC+0x20>)
     e40:	4a07      	ldr	r2, [pc, #28]	; (e60 <_PrepC+0x24>)
     e42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     e46:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     e48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e4c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     e50:	f008 fa4c 	bl	92ec <_bss_zero>
	_data_copy();
     e54:	f008 fa54 	bl	9300 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     e58:	f008 fa7a 	bl	9350 <_Cstart>
     e5c:	00000000 	.word	0x00000000
     e60:	e000ed00 	.word	0xe000ed00

00000e64 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     e64:	b508      	push	{r3, lr}
	handler();
     e66:	f7ff ffe5 	bl	e34 <_SysNmiOnReset>
	_ExcExit();
}
     e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     e6e:	f7ff bcbb 	b.w	7e8 <_ExcExit>
	...

00000e74 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     e74:	4b15      	ldr	r3, [pc, #84]	; (ecc <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     e76:	4916      	ldr	r1, [pc, #88]	; (ed0 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     e78:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     e7a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     e7c:	680d      	ldr	r5, [r1, #0]
     e7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     e82:	4295      	cmp	r5, r2
     e84:	d80f      	bhi.n	ea6 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     e86:	2200      	movs	r2, #0
     e88:	6848      	ldr	r0, [r1, #4]
     e8a:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     e8c:	4295      	cmp	r5, r2
     e8e:	f100 000c 	add.w	r0, r0, #12
     e92:	d10a      	bne.n	eaa <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     e94:	2205      	movs	r2, #5
     e96:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     e98:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <arm_mpu_init+0x60>)
     e9a:	2201      	movs	r2, #1
     e9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ea2:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     ea6:	2000      	movs	r0, #0
     ea8:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     eaa:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     eae:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     eb2:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     eb4:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
     eb8:	f041 0110 	orr.w	r1, r1, #16
     ebc:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     ebe:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     ec2:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     ec4:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     ec6:	611c      	str	r4, [r3, #16]
     ec8:	e7e0      	b.n	e8c <arm_mpu_init+0x18>
     eca:	bf00      	nop
     ecc:	e000ed90 	.word	0xe000ed90
     ed0:	20002900 	.word	0x20002900
     ed4:	20000000 	.word	0x20000000

00000ed8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     ed8:	2000      	movs	r0, #0
     eda:	4770      	bx	lr

00000edc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     edc:	680b      	ldr	r3, [r1, #0]
     ede:	3301      	adds	r3, #1
     ee0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     ee2:	4b01      	ldr	r3, [pc, #4]	; (ee8 <char_out+0xc>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	4718      	bx	r3
     ee8:	20002948 	.word	0x20002948

00000eec <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ef0:	b085      	sub	sp, #20
     ef2:	469b      	mov	fp, r3
     ef4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     ef6:	f8df a090 	ldr.w	sl, [pc, #144]	; f88 <_printk_dec_ulong+0x9c>
     efa:	2c01      	cmp	r4, #1
     efc:	bfb8      	it	lt
     efe:	2401      	movlt	r4, #1
     f00:	2b01      	cmp	r3, #1
     f02:	bf0c      	ite	eq
     f04:	2330      	moveq	r3, #48	; 0x30
     f06:	2320      	movne	r3, #32
     f08:	4615      	mov	r5, r2
     f0a:	4680      	mov	r8, r0
     f0c:	4689      	mov	r9, r1
     f0e:	9401      	str	r4, [sp, #4]
     f10:	9302      	str	r3, [sp, #8]
     f12:	2601      	movs	r6, #1
     f14:	270a      	movs	r7, #10
     f16:	2200      	movs	r2, #0
     f18:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     f1c:	b90a      	cbnz	r2, f22 <_printk_dec_ulong+0x36>
     f1e:	45aa      	cmp	sl, r5
     f20:	d21f      	bcs.n	f62 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     f22:	fbb5 f0f4 	udiv	r0, r5, r4
     f26:	4649      	mov	r1, r9
     f28:	3030      	adds	r0, #48	; 0x30
     f2a:	47c0      	blx	r8
			digits++;
     f2c:	3601      	adds	r6, #1
			found_largest_digit = 1;
     f2e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     f30:	3f01      	subs	r7, #1
	while (pos >= 9) {
     f32:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     f34:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     f38:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     f3c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     f40:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     f44:	d1e8      	bne.n	f18 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     f46:	4649      	mov	r1, r9
     f48:	f105 0030 	add.w	r0, r5, #48	; 0x30
     f4c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     f4e:	f1bb 0f03 	cmp.w	fp, #3
     f52:	d103      	bne.n	f5c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     f54:	9b01      	ldr	r3, [sp, #4]
     f56:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     f58:	2c00      	cmp	r4, #0
     f5a:	dc0f      	bgt.n	f7c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     f5c:	b005      	add	sp, #20
     f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     f62:	9b01      	ldr	r3, [sp, #4]
     f64:	42bb      	cmp	r3, r7
     f66:	dbe3      	blt.n	f30 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     f68:	f1bb 0f02 	cmp.w	fp, #2
     f6c:	d8e0      	bhi.n	f30 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     f6e:	4649      	mov	r1, r9
     f70:	9802      	ldr	r0, [sp, #8]
     f72:	9203      	str	r2, [sp, #12]
			digits++;
     f74:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     f76:	47c0      	blx	r8
			digits++;
     f78:	9a03      	ldr	r2, [sp, #12]
     f7a:	e7d9      	b.n	f30 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     f7c:	4649      	mov	r1, r9
     f7e:	2020      	movs	r0, #32
     f80:	47c0      	blx	r8
     f82:	3c01      	subs	r4, #1
     f84:	e7e8      	b.n	f58 <_printk_dec_ulong+0x6c>
     f86:	bf00      	nop
     f88:	3b9ac9ff 	.word	0x3b9ac9ff

00000f8c <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
     f8c:	b530      	push	{r4, r5, lr}
     f8e:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
     f90:	680c      	ldr	r4, [r1, #0]
     f92:	1c55      	adds	r5, r2, #1
     f94:	b114      	cbz	r4, f9c <str_out+0x10>
     f96:	684b      	ldr	r3, [r1, #4]
     f98:	4293      	cmp	r3, r2
     f9a:	dc01      	bgt.n	fa0 <str_out+0x14>
		ctx->count++;
     f9c:	608d      	str	r5, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
     f9e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
     fa0:	3b01      	subs	r3, #1
     fa2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
     fa4:	bf08      	it	eq
     fa6:	2200      	moveq	r2, #0
     fa8:	608d      	str	r5, [r1, #8]
     faa:	bf0c      	ite	eq
     fac:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
     fae:	54a0      	strbne	r0, [r4, r2]
     fb0:	e7f5      	b.n	f9e <str_out+0x12>
	...

00000fb4 <__printk_hook_install>:
	_char_out = fn;
     fb4:	4b01      	ldr	r3, [pc, #4]	; (fbc <__printk_hook_install+0x8>)
     fb6:	6018      	str	r0, [r3, #0]
}
     fb8:	4770      	bx	lr
     fba:	bf00      	nop
     fbc:	20002948 	.word	0x20002948

00000fc0 <_vprintk>:
{
     fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fc4:	b089      	sub	sp, #36	; 0x24
     fc6:	461c      	mov	r4, r3
	int long_ctr = 0;
     fc8:	f04f 0a00 	mov.w	sl, #0
     fcc:	1e53      	subs	r3, r2, #1
{
     fce:	4606      	mov	r6, r0
     fd0:	460f      	mov	r7, r1
     fd2:	9304      	str	r3, [sp, #16]
	int min_width = -1;
     fd4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     fd8:	46d0      	mov	r8, sl
			might_format = 0;
     fda:	2500      	movs	r5, #0
				break;
     fdc:	e005      	b.n	fea <_vprintk+0x2a>
		if (!might_format) {
     fde:	b96d      	cbnz	r5, ffc <_vprintk+0x3c>
			if (*fmt != '%') {
     fe0:	2825      	cmp	r0, #37	; 0x25
     fe2:	f000 8112 	beq.w	120a <_vprintk+0x24a>
				out((int)*fmt, ctx);
     fe6:	4639      	mov	r1, r7
     fe8:	47b0      	blx	r6
	while (*fmt) {
     fea:	9b04      	ldr	r3, [sp, #16]
     fec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     ff0:	9304      	str	r3, [sp, #16]
     ff2:	2800      	cmp	r0, #0
     ff4:	d1f3      	bne.n	fde <_vprintk+0x1e>
}
     ff6:	b009      	add	sp, #36	; 0x24
     ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     ffc:	2864      	cmp	r0, #100	; 0x64
     ffe:	d061      	beq.n	10c4 <_vprintk+0x104>
    1000:	d819      	bhi.n	1036 <_vprintk+0x76>
    1002:	2839      	cmp	r0, #57	; 0x39
    1004:	d80a      	bhi.n	101c <_vprintk+0x5c>
    1006:	2831      	cmp	r0, #49	; 0x31
    1008:	d250      	bcs.n	10ac <_vprintk+0xec>
    100a:	282d      	cmp	r0, #45	; 0x2d
    100c:	d03c      	beq.n	1088 <_vprintk+0xc8>
    100e:	2830      	cmp	r0, #48	; 0x30
    1010:	d03d      	beq.n	108e <_vprintk+0xce>
    1012:	2825      	cmp	r0, #37	; 0x25
    1014:	d108      	bne.n	1028 <_vprintk+0x68>
				out((int)'%', ctx);
    1016:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    1018:	47b0      	blx	r6
    101a:	e7de      	b.n	fda <_vprintk+0x1a>
			switch (*fmt) {
    101c:	2858      	cmp	r0, #88	; 0x58
    101e:	f000 8088 	beq.w	1132 <_vprintk+0x172>
    1022:	2863      	cmp	r0, #99	; 0x63
    1024:	f000 80eb 	beq.w	11fe <_vprintk+0x23e>
				out((int)'%', ctx);
    1028:	4639      	mov	r1, r7
    102a:	2025      	movs	r0, #37	; 0x25
    102c:	47b0      	blx	r6
				out((int)*fmt, ctx);
    102e:	9b04      	ldr	r3, [sp, #16]
    1030:	4639      	mov	r1, r7
    1032:	7818      	ldrb	r0, [r3, #0]
    1034:	e7f0      	b.n	1018 <_vprintk+0x58>
			switch (*fmt) {
    1036:	2870      	cmp	r0, #112	; 0x70
    1038:	d071      	beq.n	111e <_vprintk+0x15e>
    103a:	d806      	bhi.n	104a <_vprintk+0x8a>
    103c:	2869      	cmp	r0, #105	; 0x69
    103e:	d041      	beq.n	10c4 <_vprintk+0x104>
    1040:	286c      	cmp	r0, #108	; 0x6c
    1042:	d03c      	beq.n	10be <_vprintk+0xfe>
    1044:	2868      	cmp	r0, #104	; 0x68
    1046:	d0d0      	beq.n	fea <_vprintk+0x2a>
    1048:	e7ee      	b.n	1028 <_vprintk+0x68>
    104a:	2875      	cmp	r0, #117	; 0x75
    104c:	d057      	beq.n	10fe <_vprintk+0x13e>
    104e:	d817      	bhi.n	1080 <_vprintk+0xc0>
    1050:	2873      	cmp	r0, #115	; 0x73
    1052:	d1e9      	bne.n	1028 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
    1054:	6823      	ldr	r3, [r4, #0]
    1056:	f104 0b04 	add.w	fp, r4, #4
    105a:	461c      	mov	r4, r3
				while (*s)
    105c:	4625      	mov	r5, r4
    105e:	f815 0b01 	ldrb.w	r0, [r5], #1
    1062:	2800      	cmp	r0, #0
    1064:	f040 80c0 	bne.w	11e8 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    1068:	f1b8 0f03 	cmp.w	r8, #3
    106c:	f040 80d6 	bne.w	121c <_vprintk+0x25c>
					int remaining = min_width - (s - start);
    1070:	1ae4      	subs	r4, r4, r3
    1072:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1076:	2c00      	cmp	r4, #0
    1078:	f300 80bc 	bgt.w	11f4 <_vprintk+0x234>
				char *s = va_arg(ap, char *);
    107c:	465c      	mov	r4, fp
    107e:	e7ac      	b.n	fda <_vprintk+0x1a>
			switch (*fmt) {
    1080:	2878      	cmp	r0, #120	; 0x78
    1082:	d056      	beq.n	1132 <_vprintk+0x172>
    1084:	287a      	cmp	r0, #122	; 0x7a
    1086:	e7de      	b.n	1046 <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
    1088:	f04f 0803 	mov.w	r8, #3
    108c:	e7ad      	b.n	fea <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    108e:	f1b9 0f00 	cmp.w	r9, #0
    1092:	da0e      	bge.n	10b2 <_vprintk+0xf2>
    1094:	f1b8 0f00 	cmp.w	r8, #0
    1098:	f000 80bd 	beq.w	1216 <_vprintk+0x256>
					min_width = *fmt - '0';
    109c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    10a0:	f1b8 0f00 	cmp.w	r8, #0
    10a4:	bf08      	it	eq
    10a6:	f04f 0802 	moveq.w	r8, #2
    10aa:	e79e      	b.n	fea <_vprintk+0x2a>
				if (min_width < 0) {
    10ac:	f1b9 0f00 	cmp.w	r9, #0
    10b0:	dbf4      	blt.n	109c <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
    10b2:	230a      	movs	r3, #10
    10b4:	fb03 0909 	mla	r9, r3, r9, r0
    10b8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    10bc:	e7f0      	b.n	10a0 <_vprintk+0xe0>
				long_ctr++;
    10be:	f10a 0a01 	add.w	sl, sl, #1
    10c2:	e792      	b.n	fea <_vprintk+0x2a>
				if (long_ctr < 2) {
    10c4:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    10c8:	bfc5      	ittet	gt
    10ca:	3407      	addgt	r4, #7
    10cc:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    10d0:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    10d2:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    10d4:	bfd4      	ite	le
    10d6:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    10d8:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    10dc:	2d00      	cmp	r5, #0
    10de:	da05      	bge.n	10ec <_vprintk+0x12c>
					out((int)'-', ctx);
    10e0:	4639      	mov	r1, r7
    10e2:	202d      	movs	r0, #45	; 0x2d
    10e4:	47b0      	blx	r6
					d = -d;
    10e6:	426d      	negs	r5, r5
					min_width--;
    10e8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    10ec:	f8cd 9000 	str.w	r9, [sp]
    10f0:	4643      	mov	r3, r8
    10f2:	462a      	mov	r2, r5
    10f4:	4639      	mov	r1, r7
    10f6:	4630      	mov	r0, r6
    10f8:	f7ff fef8 	bl	eec <_printk_dec_ulong>
    10fc:	e76d      	b.n	fda <_vprintk+0x1a>
				if (long_ctr < 2) {
    10fe:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    1102:	bfc5      	ittet	gt
    1104:	3407      	addgt	r4, #7
    1106:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    110a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    110c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    110e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    1112:	bfcc      	ite	gt
    1114:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    1118:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    111a:	4643      	mov	r3, r8
    111c:	e7ea      	b.n	10f4 <_vprintk+0x134>
				  out('0', ctx);
    111e:	4639      	mov	r1, r7
    1120:	2030      	movs	r0, #48	; 0x30
    1122:	47b0      	blx	r6
				  out('x', ctx);
    1124:	4639      	mov	r1, r7
    1126:	2078      	movs	r0, #120	; 0x78
    1128:	47b0      	blx	r6
				  min_width = 8;
    112a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    112e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1132:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    1136:	bfc7      	ittee	gt
    1138:	3407      	addgt	r4, #7
    113a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    113e:	6823      	ldrle	r3, [r4, #0]
    1140:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1142:	bfc2      	ittt	gt
    1144:	f103 0408 	addgt.w	r4, r3, #8
    1148:	681b      	ldrgt	r3, [r3, #0]
    114a:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    114c:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1150:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1154:	bfd8      	it	le
    1156:	3404      	addle	r4, #4
	int digits = 0;
    1158:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    115a:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    115c:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    115e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1162:	9b05      	ldr	r3, [sp, #20]
    1164:	ea4f 008b 	mov.w	r0, fp, lsl #2
    1168:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    116c:	f010 000f 	ands.w	r0, r0, #15
    1170:	d109      	bne.n	1186 <_vprintk+0x1c6>
    1172:	9b07      	ldr	r3, [sp, #28]
    1174:	b913      	cbnz	r3, 117c <_vprintk+0x1bc>
    1176:	f1bb 0f00 	cmp.w	fp, #0
    117a:	d124      	bne.n	11c6 <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
    117c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1180:	e007      	b.n	1192 <_vprintk+0x1d2>
	for (; size; size--) {
    1182:	9a06      	ldr	r2, [sp, #24]
    1184:	e7eb      	b.n	115e <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1186:	2809      	cmp	r0, #9
    1188:	bf8c      	ite	hi
    118a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    118e:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    1192:	4639      	mov	r1, r7
    1194:	4460      	add	r0, ip
    1196:	9206      	str	r2, [sp, #24]
    1198:	47b0      	blx	r6
			digits++;
    119a:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    119c:	9507      	str	r5, [sp, #28]
			digits++;
    119e:	3301      	adds	r3, #1
    11a0:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    11a2:	f1bb 0f00 	cmp.w	fp, #0
    11a6:	d1ec      	bne.n	1182 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    11a8:	f1b8 0f03 	cmp.w	r8, #3
    11ac:	f47f af15 	bne.w	fda <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    11b0:	9b03      	ldr	r3, [sp, #12]
    11b2:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    11b6:	2d00      	cmp	r5, #0
    11b8:	f77f af0f 	ble.w	fda <_vprintk+0x1a>
			out(' ', ctx);
    11bc:	4639      	mov	r1, r7
    11be:	2020      	movs	r0, #32
    11c0:	47b0      	blx	r6
    11c2:	3d01      	subs	r5, #1
    11c4:	e7f7      	b.n	11b6 <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
    11c6:	1e53      	subs	r3, r2, #1
    11c8:	4591      	cmp	r9, r2
    11ca:	9306      	str	r3, [sp, #24]
    11cc:	dbe9      	blt.n	11a2 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    11ce:	f1b8 0f01 	cmp.w	r8, #1
    11d2:	d103      	bne.n	11dc <_vprintk+0x21c>
				out('0', ctx);
    11d4:	4639      	mov	r1, r7
    11d6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    11d8:	47b0      	blx	r6
    11da:	e7e2      	b.n	11a2 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    11dc:	f1b8 0f02 	cmp.w	r8, #2
    11e0:	d1df      	bne.n	11a2 <_vprintk+0x1e2>
				out(' ', ctx);
    11e2:	4639      	mov	r1, r7
    11e4:	2020      	movs	r0, #32
    11e6:	e7f7      	b.n	11d8 <_vprintk+0x218>
					out((int)(*s++), ctx);
    11e8:	4639      	mov	r1, r7
    11ea:	9303      	str	r3, [sp, #12]
    11ec:	462c      	mov	r4, r5
    11ee:	47b0      	blx	r6
    11f0:	9b03      	ldr	r3, [sp, #12]
    11f2:	e733      	b.n	105c <_vprintk+0x9c>
						out(' ', ctx);
    11f4:	4639      	mov	r1, r7
    11f6:	2020      	movs	r0, #32
    11f8:	47b0      	blx	r6
    11fa:	3c01      	subs	r4, #1
    11fc:	e73b      	b.n	1076 <_vprintk+0xb6>
				out(c, ctx);
    11fe:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    1200:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    1202:	4639      	mov	r1, r7
    1204:	47b0      	blx	r6
				int c = va_arg(ap, int);
    1206:	462c      	mov	r4, r5
    1208:	e6e7      	b.n	fda <_vprintk+0x1a>
				long_ctr = 0;
    120a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    120c:	46a8      	mov	r8, r5
				min_width = -1;
    120e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    1212:	2501      	movs	r5, #1
    1214:	e6e9      	b.n	fea <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    1216:	f04f 0801 	mov.w	r8, #1
    121a:	e6e6      	b.n	fea <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    121c:	465c      	mov	r4, fp
			might_format = 0;
    121e:	4605      	mov	r5, r0
    1220:	e6e3      	b.n	fea <_vprintk+0x2a>
	...

00001224 <vprintk>:
{
    1224:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1226:	ac02      	add	r4, sp, #8
    1228:	2300      	movs	r3, #0
    122a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    122e:	4602      	mov	r2, r0
    1230:	460b      	mov	r3, r1
    1232:	4803      	ldr	r0, [pc, #12]	; (1240 <vprintk+0x1c>)
    1234:	4621      	mov	r1, r4
    1236:	f7ff fec3 	bl	fc0 <_vprintk>
}
    123a:	9801      	ldr	r0, [sp, #4]
    123c:	b002      	add	sp, #8
    123e:	bd10      	pop	{r4, pc}
    1240:	00000edd 	.word	0x00000edd

00001244 <printk>:
{
    1244:	b40f      	push	{r0, r1, r2, r3}
    1246:	b507      	push	{r0, r1, r2, lr}
    1248:	a904      	add	r1, sp, #16
    124a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    124e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1250:	f7ff ffe8 	bl	1224 <vprintk>
}
    1254:	b003      	add	sp, #12
    1256:	f85d eb04 	ldr.w	lr, [sp], #4
    125a:	b004      	add	sp, #16
    125c:	4770      	bx	lr
	...

00001260 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1260:	b40c      	push	{r2, r3}
    1262:	b530      	push	{r4, r5, lr}
    1264:	b085      	sub	sp, #20
    1266:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    1268:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    126c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    1270:	9300      	str	r3, [sp, #0]
{
    1272:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1274:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1276:	a901      	add	r1, sp, #4
    1278:	4806      	ldr	r0, [pc, #24]	; (1294 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    127a:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    127c:	f7ff fea0 	bl	fc0 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1280:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1284:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1286:	bfb8      	it	lt
    1288:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    128a:	b005      	add	sp, #20
    128c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1290:	b002      	add	sp, #8
    1292:	4770      	bx	lr
    1294:	00000f8d 	.word	0x00000f8d

00001298 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);

GEN_ABS_SYM_END
    1298:	4770      	bx	lr
	...

0000129c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    129c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    129e:	4c11      	ldr	r4, [pc, #68]	; (12e4 <sys_rand32_get+0x48>)
    12a0:	f3bf 8f5b 	dmb	ish
    12a4:	6820      	ldr	r0, [r4, #0]
    12a6:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    12aa:	b960      	cbnz	r0, 12c6 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    12ac:	480e      	ldr	r0, [pc, #56]	; (12e8 <sys_rand32_get+0x4c>)
    12ae:	f007 ffc7 	bl	9240 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    12b2:	f3bf 8f5b 	dmb	ish
    12b6:	e854 3f00 	ldrex	r3, [r4]
    12ba:	e844 0200 	strex	r2, r0, [r4]
    12be:	2a00      	cmp	r2, #0
    12c0:	d1f9      	bne.n	12b6 <sys_rand32_get+0x1a>
    12c2:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    12c6:	6843      	ldr	r3, [r0, #4]
    12c8:	2204      	movs	r2, #4
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	eb0d 0102 	add.w	r1, sp, r2
    12d0:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    12d2:	2800      	cmp	r0, #0
    12d4:	da02      	bge.n	12dc <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    12d6:	f000 fd0b 	bl	1cf0 <_timer_cycle_get_32>
    12da:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    12dc:	9801      	ldr	r0, [sp, #4]
    12de:	b002      	add	sp, #8
    12e0:	bd10      	pop	{r4, pc}
    12e2:	bf00      	nop
    12e4:	20000004 	.word	0x20000004
    12e8:	0000a818 	.word	0x0000a818

000012ec <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    12ec:	280a      	cmp	r0, #10
{
    12ee:	b538      	push	{r3, r4, r5, lr}
    12f0:	4604      	mov	r4, r0
    12f2:	4d07      	ldr	r5, [pc, #28]	; (1310 <console_out+0x24>)
	if ('\n' == c) {
    12f4:	d104      	bne.n	1300 <console_out+0x14>
    12f6:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    12f8:	6843      	ldr	r3, [r0, #4]
    12fa:	210d      	movs	r1, #13
    12fc:	685b      	ldr	r3, [r3, #4]
    12fe:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1300:	6828      	ldr	r0, [r5, #0]
    1302:	6843      	ldr	r3, [r0, #4]
    1304:	b2e1      	uxtb	r1, r4
    1306:	685b      	ldr	r3, [r3, #4]
    1308:	4798      	blx	r3

	return c;
}
    130a:	4620      	mov	r0, r4
    130c:	bd38      	pop	{r3, r4, r5, pc}
    130e:	bf00      	nop
    1310:	20000008 	.word	0x20000008

00001314 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <uart_console_hook_install+0x8>)
    1316:	f7ff be4d 	b.w	fb4 <__printk_hook_install>
    131a:	bf00      	nop
    131c:	000012ed 	.word	0x000012ed

00001320 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1320:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1322:	4804      	ldr	r0, [pc, #16]	; (1334 <uart_console_init+0x14>)
    1324:	f007 ff8c 	bl	9240 <device_get_binding>
    1328:	4b03      	ldr	r3, [pc, #12]	; (1338 <uart_console_init+0x18>)
    132a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    132c:	f7ff fff2 	bl	1314 <uart_console_hook_install>

	return 0;
}
    1330:	2000      	movs	r0, #0
    1332:	bd08      	pop	{r3, pc}
    1334:	0000a822 	.word	0x0000a822
    1338:	20000008 	.word	0x20000008

0000133c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    133c:	b510      	push	{r4, lr}
    133e:	f04f 0320 	mov.w	r3, #32
    1342:	f3ef 8211 	mrs	r2, BASEPRI
    1346:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    134a:	4c11      	ldr	r4, [pc, #68]	; (1390 <_m16src_stop+0x54>)
    134c:	7823      	ldrb	r3, [r4, #0]
    134e:	b923      	cbnz	r3, 135a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1350:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1354:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1358:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    135a:	3b01      	subs	r3, #1
    135c:	b2db      	uxtb	r3, r3
    135e:	7023      	strb	r3, [r4, #0]
    1360:	b123      	cbz	r3, 136c <_m16src_stop+0x30>
    1362:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    1366:	f06f 000f 	mvn.w	r0, #15
    136a:	e7f5      	b.n	1358 <_m16src_stop+0x1c>
	if (m16src_grd) {
    136c:	4b09      	ldr	r3, [pc, #36]	; (1394 <_m16src_stop+0x58>)
    136e:	7818      	ldrb	r0, [r3, #0]
    1370:	2101      	movs	r1, #1
    1372:	b128      	cbz	r0, 1380 <_m16src_stop+0x44>
		m16src_ref++;
    1374:	7021      	strb	r1, [r4, #0]
    1376:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    137a:	f06f 000a 	mvn.w	r0, #10
    137e:	e7eb      	b.n	1358 <_m16src_stop+0x1c>
	m16src_grd = 1;
    1380:	7019      	strb	r1, [r3, #0]
    1382:	f382 8811 	msr	BASEPRI, r2
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    138a:	6051      	str	r1, [r2, #4]
	m16src_grd = 0;
    138c:	7018      	strb	r0, [r3, #0]
	return 0;
    138e:	e7e3      	b.n	1358 <_m16src_stop+0x1c>
    1390:	2000000e 	.word	0x2000000e
    1394:	2000000d 	.word	0x2000000d

00001398 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1398:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    139a:	2200      	movs	r2, #0
    139c:	4610      	mov	r0, r2
    139e:	2101      	movs	r1, #1
    13a0:	f7ff fc28 	bl	bf4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    13a4:	2000      	movs	r0, #0
    13a6:	f7ff fbf3 	bl	b90 <_arch_irq_enable>

	return 0;
}
    13aa:	2000      	movs	r0, #0
    13ac:	bd08      	pop	{r3, pc}
	...

000013b0 <_m16src_start>:
{
    13b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    13b2:	f04f 0220 	mov.w	r2, #32
    13b6:	f3ef 8311 	mrs	r3, BASEPRI
    13ba:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    13be:	4a25      	ldr	r2, [pc, #148]	; (1454 <_m16src_start+0xa4>)
    13c0:	7810      	ldrb	r0, [r2, #0]
    13c2:	1c44      	adds	r4, r0, #1
    13c4:	7014      	strb	r4, [r2, #0]
    13c6:	b160      	cbz	r0, 13e2 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    13c8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    13cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    13d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    13d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    13d8:	bf14      	ite	ne
    13da:	2000      	movne	r0, #0
    13dc:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    13e0:	e007      	b.n	13f2 <_m16src_start+0x42>
	if (m16src_grd) {
    13e2:	4d1d      	ldr	r5, [pc, #116]	; (1458 <_m16src_start+0xa8>)
    13e4:	782f      	ldrb	r7, [r5, #0]
    13e6:	b12f      	cbz	r7, 13f4 <_m16src_start+0x44>
		m16src_ref--;
    13e8:	7010      	strb	r0, [r2, #0]
    13ea:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    13ee:	f06f 000a 	mvn.w	r0, #10
}
    13f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    13f4:	2601      	movs	r6, #1
    13f6:	702e      	strb	r6, [r5, #0]
    13f8:	f383 8811 	msr	BASEPRI, r3
    13fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1400:	b319      	cbz	r1, 144a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1402:	4638      	mov	r0, r7
    1404:	f7ff fbd4 	bl	bb0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1408:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    140c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1410:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1414:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1416:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    141a:	b192      	cbz	r2, 1442 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    141c:	2200      	movs	r2, #0
    141e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1422:	4a0e      	ldr	r2, [pc, #56]	; (145c <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1424:	f013 0f01 	tst.w	r3, #1
    1428:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    142c:	bf08      	it	eq
    142e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1432:	2000      	movs	r0, #0
    1434:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1438:	f7ff fbaa 	bl	b90 <_arch_irq_enable>
	m16src_grd = 0;
    143c:	2300      	movs	r3, #0
    143e:	702b      	strb	r3, [r5, #0]
    1440:	e7c4      	b.n	13cc <_m16src_start+0x1c>
			__WFE();
    1442:	bf20      	wfe
			__SEV();
    1444:	bf40      	sev
			__WFE();
    1446:	bf20      	wfe
    1448:	e7e5      	b.n	1416 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    144a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    144e:	6026      	str	r6, [r4, #0]
    1450:	e7f4      	b.n	143c <_m16src_start+0x8c>
    1452:	bf00      	nop
    1454:	2000000e 	.word	0x2000000e
    1458:	2000000d 	.word	0x2000000d
    145c:	e000e100 	.word	0xe000e100

00001460 <_power_clock_isr>:
{
    1460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1466:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1468:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    146c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1470:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1474:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1478:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    147c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1480:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1484:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1488:	f1bc 0f00 	cmp.w	ip, #0
    148c:	d003      	beq.n	1496 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    148e:	f04f 0c00 	mov.w	ip, #0
    1492:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    1496:	b127      	cbz	r7, 14a2 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    149c:	2700      	movs	r7, #0
    149e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    14a2:	b13a      	cbz	r2, 14b4 <_power_clock_isr+0x54>
    14a4:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    14a6:	bf41      	itttt	mi
    14a8:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    14ac:	2201      	movmi	r2, #1
    14ae:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    14b2:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    14b4:	b120      	cbz	r0, 14c0 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    14b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14ba:	2200      	movs	r2, #0
    14bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    14c0:	b149      	cbz	r1, 14d6 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    14c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    14c6:	2100      	movs	r1, #0
    14c8:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    14cc:	4628      	mov	r0, r5
    14ce:	f7ff ff35 	bl	133c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    14d2:	2301      	movs	r3, #1
    14d4:	6163      	str	r3, [r4, #20]
	if (ctto) {
    14d6:	b176      	cbz	r6, 14f6 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    14d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14dc:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    14de:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    14e0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    14e4:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    14e6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    14ea:	f7ff ff61 	bl	13b0 <_m16src_start>
		if (!err) {
    14ee:	b910      	cbnz	r0, 14f6 <_power_clock_isr+0x96>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14f0:	4b01      	ldr	r3, [pc, #4]	; (14f8 <_power_clock_isr+0x98>)
    14f2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    14f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14f8:	e000e100 	.word	0xe000e100

000014fc <_k32src_start>:
{
    14fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fe:	4606      	mov	r6, r0
    1500:	460c      	mov	r4, r1
	__asm__ volatile(
    1502:	f04f 0220 	mov.w	r2, #32
    1506:	f3ef 8311 	mrs	r3, BASEPRI
    150a:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    150e:	4a2c      	ldr	r2, [pc, #176]	; (15c0 <_k32src_start+0xc4>)
    1510:	7815      	ldrb	r5, [r2, #0]
    1512:	b165      	cbz	r5, 152e <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1514:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    151c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1520:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    1524:	bf0c      	ite	eq
    1526:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    152a:	2000      	movne	r0, #0
    152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    152e:	2701      	movs	r7, #1
    1530:	7017      	strb	r7, [r2, #0]
    1532:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    1536:	4628      	mov	r0, r5
    1538:	f7ff fb3a 	bl	bb0 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    153c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1540:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1542:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    1546:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    154a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    154e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1552:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1554:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1558:	b371      	cbz	r1, 15b8 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    155a:	0792      	lsls	r2, r2, #30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    155c:	4f19      	ldr	r7, [pc, #100]	; (15c4 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    155e:	bf58      	it	pl
    1560:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1562:	f04f 0100 	mov.w	r1, #0
    1566:	f04f 0501 	mov.w	r5, #1
    156a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    156e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1572:	bf58      	it	pl
    1574:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1578:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    157c:	f7ff fb08 	bl	b90 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1584:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1586:	2218      	movs	r2, #24
    1588:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    158c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1590:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1594:	f014 0103 	ands.w	r1, r4, #3
    1598:	d1be      	bne.n	1518 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    159a:	2010      	movs	r0, #16
    159c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    15a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    15a4:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    15a6:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    15aa:	f7ff ff01 	bl	13b0 <_m16src_start>
		if (!err) {
    15ae:	2800      	cmp	r0, #0
    15b0:	d1b2      	bne.n	1518 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15b2:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    15b6:	e7af      	b.n	1518 <_k32src_start+0x1c>
		__WFE();
    15b8:	bf20      	wfe
		__SEV();
    15ba:	bf40      	sev
		__WFE();
    15bc:	bf20      	wfe
    15be:	e7c9      	b.n	1554 <_k32src_start+0x58>
    15c0:	2000000c 	.word	0x2000000c
    15c4:	e000e100 	.word	0xe000e100

000015c8 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    15c8:	6803      	ldr	r3, [r0, #0]
    15ca:	689b      	ldr	r3, [r3, #8]
{
    15cc:	b510      	push	{r4, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    15ce:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    15d0:	6883      	ldr	r3, [r0, #8]
    15d2:	68da      	ldr	r2, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    15d4:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    15d6:	fa22 f300 	lsr.w	r3, r2, r0
    15da:	07db      	lsls	r3, r3, #31
    15dc:	d507      	bpl.n	15ee <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    15de:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    15e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    15e6:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    15ea:	428b      	cmp	r3, r1
    15ec:	d004      	beq.n	15f8 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    15ee:	3001      	adds	r0, #1
    15f0:	2808      	cmp	r0, #8
    15f2:	d1f0      	bne.n	15d6 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    15f4:	f06f 0012 	mvn.w	r0, #18
}
    15f8:	bd10      	pop	{r4, pc}

000015fa <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    15fa:	6800      	ldr	r0, [r0, #0]
    15fc:	6880      	ldr	r0, [r0, #8]
    15fe:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1600:	b941      	cbnz	r1, 1614 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1602:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1606:	fa21 f202 	lsr.w	r2, r1, r2
    160a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    160e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1610:	2000      	movs	r0, #0
    1612:	4770      	bx	lr
		*value = gpio->IN;
    1614:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1618:	e7f9      	b.n	160e <gpio_nrf5_read+0x14>

0000161a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    161a:	6800      	ldr	r0, [r0, #0]
    161c:	6880      	ldr	r0, [r0, #8]
    161e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1620:	b951      	cbnz	r1, 1638 <gpio_nrf5_write+0x1e>
    1622:	2101      	movs	r1, #1
    1624:	fa01 f202 	lsl.w	r2, r1, r2
		if (value) { /* 1 */
    1628:	b11b      	cbz	r3, 1632 <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    162a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    162e:	2000      	movs	r0, #0
    1630:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1632:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    1636:	e7fa      	b.n	162e <gpio_nrf5_write+0x14>
		gpio->OUT = value;
    1638:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    163c:	e7f7      	b.n	162e <gpio_nrf5_write+0x14>

0000163e <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    163e:	6883      	ldr	r3, [r0, #8]
{
    1640:	b510      	push	{r4, lr}
    1642:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1644:	b16a      	cbz	r2, 1662 <gpio_nrf5_manage_callback+0x24>
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;

	if (!list->tail) {
    1646:	685a      	ldr	r2, [r3, #4]
	node->next = list->head;
    1648:	6008      	str	r0, [r1, #0]
	list->head = node;
    164a:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    164c:	b902      	cbnz	r2, 1650 <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    164e:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1650:	2000      	movs	r0, #0
    1652:	bd10      	pop	{r4, pc}
		}
	} else {
		prev_node->next = node->next;

		/* Was node the tail? */
		if (list->tail == node) {
    1654:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    1656:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    1658:	bf08      	it	eq
    165a:	605a      	streq	r2, [r3, #4]
    165c:	e00d      	b.n	167a <gpio_nrf5_manage_callback+0x3c>
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    165e:	4602      	mov	r2, r0
    1660:	6800      	ldr	r0, [r0, #0]
    1662:	2800      	cmp	r0, #0
    1664:	d0f4      	beq.n	1650 <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    1666:	4288      	cmp	r0, r1
    1668:	d1f9      	bne.n	165e <gpio_nrf5_manage_callback+0x20>
    166a:	6808      	ldr	r0, [r1, #0]
    166c:	685c      	ldr	r4, [r3, #4]
	if (!prev_node) {
    166e:	2a00      	cmp	r2, #0
    1670:	d1f0      	bne.n	1654 <gpio_nrf5_manage_callback+0x16>
		if (list->tail == node) {
    1672:	42a1      	cmp	r1, r4
		list->head = node->next;
    1674:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    1676:	d100      	bne.n	167a <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
    1678:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    167a:	2300      	movs	r3, #0
    167c:	600b      	str	r3, [r1, #0]
    167e:	e7e7      	b.n	1650 <gpio_nrf5_manage_callback+0x12>

00001680 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1682:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1684:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1686:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1688:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    168a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    168c:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    168e:	b9a1      	cbnz	r1, 16ba <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    1690:	4621      	mov	r1, r4
    1692:	f7ff ff99 	bl	15c8 <gpiote_find_channel>
		if (i < 0) {
    1696:	2800      	cmp	r0, #0
    1698:	db0e      	blt.n	16b8 <gpio_nrf5_enable_callback+0x38>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    169a:	68ba      	ldr	r2, [r7, #8]
    169c:	2301      	movs	r3, #1
    169e:	fa03 f404 	lsl.w	r4, r3, r4
    16a2:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    16a4:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    16a8:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    16ac:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    16ae:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    16b2:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    16b6:	4628      	mov	r0, r5
}
    16b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    16ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
    16be:	e7fb      	b.n	16b8 <gpio_nrf5_enable_callback+0x38>

000016c0 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    16c4:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    16c6:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    16c8:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    16ca:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    16cc:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    16ce:	b989      	cbnz	r1, 16f4 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    16d0:	4621      	mov	r1, r4
    16d2:	f7ff ff79 	bl	15c8 <gpiote_find_channel>
		if (i < 0) {
    16d6:	2800      	cmp	r0, #0
    16d8:	db0b      	blt.n	16f2 <gpio_nrf5_disable_callback+0x32>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    16da:	68b2      	ldr	r2, [r6, #8]
    16dc:	2301      	movs	r3, #1
    16de:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    16e2:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    16e6:	ea22 0404 	bic.w	r4, r2, r4
    16ea:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    16ec:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    16f0:	4628      	mov	r0, r5
}
    16f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    16f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    16f8:	e7fb      	b.n	16f2 <gpio_nrf5_disable_callback+0x32>

000016fa <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    16fa:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    16fc:	2200      	movs	r2, #0
    16fe:	2101      	movs	r1, #1
    1700:	2006      	movs	r0, #6
    1702:	f7ff fa77 	bl	bf4 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1706:	2006      	movs	r0, #6
    1708:	f7ff fa42 	bl	b90 <_arch_irq_enable>

	return 0;
}
    170c:	2000      	movs	r0, #0
    170e:	bd08      	pop	{r3, pc}

00001710 <gpio_nrf5_port_isr>:
{
    1710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1712:	6803      	ldr	r3, [r0, #0]
{
    1714:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1716:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1718:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    171a:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    171c:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    171e:	461f      	mov	r7, r3
			gpiote->EVENTS_IN[i] = 0;
    1720:	461d      	mov	r5, r3
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1722:	f04f 0c01 	mov.w	ip, #1
    1726:	eb00 0283 	add.w	r2, r0, r3, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    172a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    172e:	b141      	cbz	r1, 1742 <gpio_nrf5_port_isr+0x32>
			gpiote->EVENTS_IN[i] = 0;
    1730:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1734:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    1738:	f3c1 2104 	ubfx	r1, r1, #8, #5
    173c:	fa0c f101 	lsl.w	r1, ip, r1
    1740:	430f      	orrs	r7, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1742:	3301      	adds	r3, #1
    1744:	2b08      	cmp	r3, #8
    1746:	d1ee      	bne.n	1726 <gpio_nrf5_port_isr+0x16>
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1748:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    174a:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    174c:	f7ff fa30 	bl	bb0 <_arch_irq_disable>
    1750:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1752:	b15c      	cbz	r4, 176c <gpio_nrf5_port_isr+0x5c>
	enabled_int = int_status & data->pin_callback_enables;
    1754:	403d      	ands	r5, r7
		if (cb->pin_mask & pins) {
    1756:	68a3      	ldr	r3, [r4, #8]
    1758:	421d      	tst	r5, r3
    175a:	d004      	beq.n	1766 <gpio_nrf5_port_isr+0x56>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    175c:	6863      	ldr	r3, [r4, #4]
    175e:	462a      	mov	r2, r5
    1760:	4621      	mov	r1, r4
    1762:	4630      	mov	r0, r6
    1764:	4798      	blx	r3
	return node->next;
    1766:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1768:	2c00      	cmp	r4, #0
    176a:	d1f4      	bne.n	1756 <gpio_nrf5_port_isr+0x46>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    176c:	2006      	movs	r0, #6
}
    176e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1772:	f7ff ba0d 	b.w	b90 <_arch_irq_enable>
	...

00001778 <gpio_nrf5_config>:
{
    1778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    177c:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    177e:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1780:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1782:	6892      	ldr	r2, [r2, #8]
{
    1784:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1786:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1788:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    178a:	b119      	cbz	r1, 1794 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    178c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1794:	f403 7140 	and.w	r1, r3, #768	; 0x300
    1798:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    179c:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    17a0:	f3c3 3281 	ubfx	r2, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    17a4:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    17a8:	d055      	beq.n	1856 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
    17aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    17ae:	bf0c      	ite	eq
    17b0:	2104      	moveq	r1, #4
    17b2:	2100      	movne	r1, #0
			sense = GPIO_SENSE_DISABLE;
    17b4:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
    17b8:	eb02 028e 	add.w	r2, r2, lr, lsl #2
    17bc:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 1880 <gpio_nrf5_config+0x108>
    17c0:	bf08      	it	eq
    17c2:	f04f 0c00 	moveq.w	ip, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    17c6:	f013 0f01 	tst.w	r3, #1
    17ca:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    17ce:	f504 7ee0 	add.w	lr, r4, #448	; 0x1c0
    17d2:	d04b      	beq.n	186c <gpio_nrf5_config+0xf4>
			if (pull == GPIO_PULL_UP) {
    17d4:	290c      	cmp	r1, #12
    17d6:	d140      	bne.n	185a <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
    17d8:	f04f 0c01 	mov.w	ip, #1
    17dc:	fa0c fc04 	lsl.w	ip, ip, r4
    17e0:	f8c0 c508 	str.w	ip, [r0, #1288]	; 0x508
					      GPIO_INPUT_DISCONNECT |
    17e4:	f042 0203 	orr.w	r2, r2, #3
    17e8:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    17ea:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	if (flags & GPIO_INT) {
    17ee:	f013 0002 	ands.w	r0, r3, #2
    17f2:	d0cd      	beq.n	1790 <gpio_nrf5_config+0x18>
		if (flags & GPIO_INT_EDGE) {
    17f4:	0699      	lsls	r1, r3, #26
    17f6:	d5c9      	bpl.n	178c <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    17f8:	065a      	lsls	r2, r3, #25
    17fa:	d43b      	bmi.n	1874 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_L2H;
    17fc:	f013 0f04 	tst.w	r3, #4
    1800:	bf0c      	ite	eq
    1802:	f44f 3800 	moveq.w	r8, #131072	; 0x20000
    1806:	f44f 3880 	movne.w	r8, #65536	; 0x10000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    180a:	68f8      	ldr	r0, [r7, #12]
    180c:	f7fe fd44 	bl	298 <__popcountsi2>
    1810:	2808      	cmp	r0, #8
    1812:	d032      	beq.n	187a <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin);
    1814:	4621      	mov	r1, r4
    1816:	4630      	mov	r0, r6
    1818:	f7ff fed6 	bl	15c8 <gpiote_find_channel>
		if (i < 0) {
    181c:	2800      	cmp	r0, #0
    181e:	68fb      	ldr	r3, [r7, #12]
    1820:	da08      	bge.n	1834 <gpio_nrf5_config+0xbc>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1822:	43da      	mvns	r2, r3
    1824:	fa92 f0a2 	rbit	r0, r2
    1828:	2a00      	cmp	r2, #0
    182a:	fab0 f080 	clz	r0, r0
    182e:	bf08      	it	eq
    1830:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    1834:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1836:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1838:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    183c:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    183e:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1842:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1846:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1848:	ea44 0408 	orr.w	r4, r4, r8
		data->gpiote_chan_mask |= BIT(i);
    184c:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    184e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1852:	2000      	movs	r0, #0
    1854:	e79c      	b.n	1790 <gpio_nrf5_config+0x18>
			pull = GPIO_PULL_UP;
    1856:	210c      	movs	r1, #12
    1858:	e7ac      	b.n	17b4 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    185a:	2904      	cmp	r1, #4
				gpio->OUTCLR = BIT(pin);
    185c:	bf02      	ittt	eq
    185e:	f04f 0c01 	moveq.w	ip, #1
    1862:	fa0c fc04 	lsleq.w	ip, ip, r4
    1866:	f8c0 c50c 	streq.w	ip, [r0, #1292]	; 0x50c
    186a:	e7bb      	b.n	17e4 <gpio_nrf5_config+0x6c>
					      drive_strength[ds_low][ds_high] |
    186c:	430a      	orrs	r2, r1
    186e:	ea42 020c 	orr.w	r2, r2, ip
    1872:	e7ba      	b.n	17ea <gpio_nrf5_config+0x72>
				config |= GPIOTE_CFG_POL_TOGG;
    1874:	f44f 3840 	mov.w	r8, #196608	; 0x30000
    1878:	e7c7      	b.n	180a <gpio_nrf5_config+0x92>
			return -EIO;
    187a:	f06f 0004 	mvn.w	r0, #4
    187e:	e787      	b.n	1790 <gpio_nrf5_config+0x18>
    1880:	0000a85c 	.word	0x0000a85c

00001884 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1884:	6803      	ldr	r3, [r0, #0]
    1886:	689b      	ldr	r3, [r3, #8]
    1888:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    188a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    188e:	b132      	cbz	r2, 189e <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1890:	2000      	movs	r0, #0
    1892:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1896:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    189a:	700b      	strb	r3, [r1, #0]

	return 0;
    189c:	4770      	bx	lr
		return -1;
    189e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    18a2:	4770      	bx	lr

000018a4 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18a4:	6803      	ldr	r3, [r0, #0]
    18a6:	689b      	ldr	r3, [r3, #8]
    18a8:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    18aa:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    18ae:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    18b2:	2a00      	cmp	r2, #0
    18b4:	d0fb      	beq.n	18ae <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    18b6:	2200      	movs	r2, #0
    18b8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    18bc:	4608      	mov	r0, r1
    18be:	4770      	bx	lr

000018c0 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18c0:	6803      	ldr	r3, [r0, #0]
    18c2:	689b      	ldr	r3, [r3, #8]
    18c4:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    18c6:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    18ca:	b118      	cbz	r0, 18d4 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    18cc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    18d0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    18d4:	f000 000f 	and.w	r0, r0, #15
    18d8:	4770      	bx	lr
	...

000018dc <uart_nrf5_init>:
{
    18dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    18de:	6803      	ldr	r3, [r0, #0]
    18e0:	689b      	ldr	r3, [r3, #8]
{
    18e2:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    18e4:	4818      	ldr	r0, [pc, #96]	; (1948 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    18e6:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    18e8:	f007 fcaa 	bl	9240 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    18ec:	6843      	ldr	r3, [r0, #4]
    18ee:	4606      	mov	r6, r0
    18f0:	681f      	ldr	r7, [r3, #0]
    18f2:	2206      	movs	r2, #6
    18f4:	f240 1301 	movw	r3, #257	; 0x101
    18f8:	2100      	movs	r1, #0
    18fa:	47b8      	blx	r7
    18fc:	6873      	ldr	r3, [r6, #4]
    18fe:	681f      	ldr	r7, [r3, #0]
    1900:	2300      	movs	r3, #0
    1902:	4619      	mov	r1, r3
    1904:	2208      	movs	r2, #8
    1906:	4630      	mov	r0, r6
    1908:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    190a:	2306      	movs	r3, #6
    190c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1910:	2308      	movs	r3, #8
    1912:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1916:	68ab      	ldr	r3, [r5, #8]
    1918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    191c:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    191e:	682b      	ldr	r3, [r5, #0]
    1920:	689b      	ldr	r3, [r3, #8]
    1922:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1924:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1928:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    192c:	2304      	movs	r3, #4
    192e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1932:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1934:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1936:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    193a:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    193e:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1940:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1942:	4b02      	ldr	r3, [pc, #8]	; (194c <uart_nrf5_init+0x70>)
    1944:	606b      	str	r3, [r5, #4]
}
    1946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1948:	0000a8c4 	.word	0x0000a8c4
    194c:	0000a8d4 	.word	0x0000a8d4

00001950 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1954:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1956:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1958:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    195a:	42a3      	cmp	r3, r4
	d = &rand[octets];
    195c:	440a      	add	r2, r1
	s = &rng->rand[first];
    195e:	4406      	add	r6, r0
	if (first <= last) {
    1960:	d81f      	bhi.n	19a2 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1962:	1ae4      	subs	r4, r4, r3
    1964:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1966:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1968:	bf3e      	ittt	cc
    196a:	1a64      	subcc	r4, r4, r1
    196c:	b2e7      	uxtbcc	r7, r4
    196e:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1970:	4423      	add	r3, r4
		octets -= avail;
    1972:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1976:	bf28      	it	cs
    1978:	2700      	movcs	r7, #0
		first += avail;
    197a:	b2db      	uxtb	r3, r3
		octets -= avail;
    197c:	b2c9      	uxtb	r1, r1
    197e:	4434      	add	r4, r6

		while (avail--) {
    1980:	42a6      	cmp	r6, r4
    1982:	d109      	bne.n	1998 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1984:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1986:	7843      	ldrb	r3, [r0, #1]
    1988:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    198a:	bf82      	ittt	hi
    198c:	4b20      	ldrhi	r3, [pc, #128]	; (1a10 <get+0xc0>)
    198e:	2201      	movhi	r2, #1
    1990:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1992:	4608      	mov	r0, r1
    1994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1998:	f816 5b01 	ldrb.w	r5, [r6], #1
    199c:	f802 5d01 	strb.w	r5, [r2, #-1]!
    19a0:	e7ee      	b.n	1980 <get+0x30>
		avail = rng->count - first;
    19a2:	7805      	ldrb	r5, [r0, #0]
    19a4:	1aed      	subs	r5, r5, r3
    19a6:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    19a8:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    19aa:	bf3f      	itttt	cc
    19ac:	1a67      	subcc	r7, r4, r1
    19ae:	19ed      	addcc	r5, r5, r7
    19b0:	b2ef      	uxtbcc	r7, r5
    19b2:	460d      	movcc	r5, r1
			first += avail;
    19b4:	bf38      	it	cc
    19b6:	185b      	addcc	r3, r3, r1
		octets -= avail;
    19b8:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    19bc:	bf32      	itee	cc
    19be:	b2db      	uxtbcc	r3, r3
    19c0:	4627      	movcs	r7, r4
			first = 0;
    19c2:	2300      	movcs	r3, #0
		octets -= avail;
    19c4:	b2c9      	uxtb	r1, r1
    19c6:	4694      	mov	ip, r2
    19c8:	eb06 0e05 	add.w	lr, r6, r5
		while (avail--) {
    19cc:	4576      	cmp	r6, lr
    19ce:	d119      	bne.n	1a04 <get+0xb4>
    19d0:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    19d2:	2900      	cmp	r1, #0
    19d4:	d0d6      	beq.n	1984 <get+0x34>
    19d6:	2c00      	cmp	r4, #0
    19d8:	d0d4      	beq.n	1984 <get+0x34>
			if (octets < last) {
    19da:	428c      	cmp	r4, r1
    19dc:	bf8a      	itet	hi
    19de:	460b      	movhi	r3, r1
    19e0:	4623      	movls	r3, r4
				remaining = last - octets;
    19e2:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    19e4:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    19e8:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    19ec:	bf8c      	ite	hi
    19ee:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    19f0:	2700      	movls	r7, #0
			octets -= last;
    19f2:	b2c9      	uxtb	r1, r1
    19f4:	18f4      	adds	r4, r6, r3
			while (last--) {
    19f6:	42a6      	cmp	r6, r4
    19f8:	d0c4      	beq.n	1984 <get+0x34>
				*(--d) = *s++;
    19fa:	f816 5b01 	ldrb.w	r5, [r6], #1
    19fe:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1a02:	e7f8      	b.n	19f6 <get+0xa6>
			*(--d) = *s++;
    1a04:	f816 8b01 	ldrb.w	r8, [r6], #1
    1a08:	f80c 8d01 	strb.w	r8, [ip, #-1]!
    1a0c:	e7de      	b.n	19cc <get+0x7c>
    1a0e:	bf00      	nop
    1a10:	4000d000 	.word	0x4000d000

00001a14 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1a14:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1a16:	b1d0      	cbz	r0, 1a4e <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1a18:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1a1a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1a1c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1a1e:	1c53      	adds	r3, r2, #1
    1a20:	b2db      	uxtb	r3, r3
		last = 0;
    1a22:	429d      	cmp	r5, r3
    1a24:	bf08      	it	eq
    1a26:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1a28:	429c      	cmp	r4, r3
    1a2a:	d010      	beq.n	1a4e <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1a2c:	b161      	cbz	r1, 1a48 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1a2e:	490a      	ldr	r1, [pc, #40]	; (1a58 <isr+0x44>)
    1a30:	4402      	add	r2, r0
    1a32:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1a36:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1a38:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1a3a:	3301      	adds	r3, #1
    1a3c:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1a3e:	429d      	cmp	r5, r3
    1a40:	bf08      	it	eq
    1a42:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1a44:	429c      	cmp	r4, r3
    1a46:	d005      	beq.n	1a54 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1a48:	f06f 000f 	mvn.w	r0, #15
}
    1a4c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1a4e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1a52:	e7fb      	b.n	1a4c <isr+0x38>
		return 0;
    1a54:	2000      	movs	r0, #0
    1a56:	e7f9      	b.n	1a4c <isr+0x38>
    1a58:	4000d000 	.word	0x4000d000

00001a5c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1a5c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1a5e:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1a60:	2201      	movs	r2, #1
    1a62:	4611      	mov	r1, r2
    1a64:	4620      	mov	r0, r4
    1a66:	f007 ffd5 	bl	9a14 <_impl_k_sem_init>
    1a6a:	f104 0018 	add.w	r0, r4, #24
    1a6e:	2201      	movs	r2, #1
    1a70:	2100      	movs	r1, #0
    1a72:	f007 ffcf 	bl	9a14 <_impl_k_sem_init>
	rng->threshold = threshold;
    1a76:	2304      	movs	r3, #4
    1a78:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1a7c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1a7e:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1a80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1a84:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1a86:	4b11      	ldr	r3, [pc, #68]	; (1acc <entropy_nrf5_init+0x70>)
	rng->count = len;
    1a88:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1a8c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1a8e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1a92:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1a96:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1a9a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1a9e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1aa2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1aa6:	f042 0201 	orr.w	r2, r2, #1
    1aaa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1aae:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1ab0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1ab4:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1ab6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1aba:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1abc:	462a      	mov	r2, r5
    1abe:	f7ff f899 	bl	bf4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1ac2:	4630      	mov	r0, r6
    1ac4:	f7ff f864 	bl	b90 <_arch_irq_enable>

	return 0;
}
    1ac8:	4628      	mov	r0, r5
    1aca:	bd70      	pop	{r4, r5, r6, pc}
    1acc:	4000d000 	.word	0x4000d000

00001ad0 <isr_rand>:
{
    1ad0:	b570      	push	{r4, r5, r6, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1ad2:	4c13      	ldr	r4, [pc, #76]	; (1b20 <isr_rand+0x50>)
    1ad4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    1ad8:	b15b      	cbz	r3, 1af2 <isr_rand+0x22>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1ada:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1adc:	2101      	movs	r1, #1
    1ade:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1ae2:	f7ff ff97 	bl	1a14 <isr>
		if (ret != -EBUSY) {
    1ae6:	f110 0f10 	cmn.w	r0, #16
    1aea:	d103      	bne.n	1af4 <isr_rand+0x24>
		NRF_RNG->EVENTS_VALRDY = 0;
    1aec:	2300      	movs	r3, #0
    1aee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
}
    1af2:	bd70      	pop	{r4, r5, r6, pc}
			ret = isr((struct rand *)dev_data->thr,
    1af4:	3037      	adds	r0, #55	; 0x37
    1af6:	bf14      	ite	ne
    1af8:	2100      	movne	r1, #0
    1afa:	2101      	moveq	r1, #1
    1afc:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1b00:	f7ff ff88 	bl	1a14 <isr>
    1b04:	4606      	mov	r6, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1b06:	f105 0018 	add.w	r0, r5, #24
    1b0a:	f007 ff8d 	bl	9a28 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1b0e:	2300      	movs	r3, #0
		if (ret != -EBUSY) {
    1b10:	3610      	adds	r6, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1b12:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1b16:	bf1c      	itt	ne
    1b18:	2301      	movne	r3, #1
    1b1a:	6063      	strne	r3, [r4, #4]
}
    1b1c:	e7e9      	b.n	1af2 <isr_rand+0x22>
    1b1e:	bf00      	nop
    1b20:	4000d000 	.word	0x4000d000

00001b24 <entropy_nrf5_get_entropy>:
{
    1b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1b28:	6885      	ldr	r5, [r0, #8]
{
    1b2a:	460f      	mov	r7, r1
    1b2c:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1b2e:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1b32:	b914      	cbnz	r4, 1b3a <entropy_nrf5_get_entropy+0x16>
}
    1b34:	4620      	mov	r0, r4
    1b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b3a:	2cff      	cmp	r4, #255	; 0xff
    1b3c:	4623      	mov	r3, r4
    1b3e:	bf28      	it	cs
    1b40:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1b42:	1ae4      	subs	r4, r4, r3
    1b44:	b2de      	uxtb	r6, r3
    1b46:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1b48:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1b50:	4628      	mov	r0, r5
    1b52:	f007 ffcd 	bl	9af0 <_impl_k_sem_take>
    1b56:	4631      	mov	r1, r6
    1b58:	463a      	mov	r2, r7
    1b5a:	4648      	mov	r0, r9
    1b5c:	f7ff fef8 	bl	1950 <get>
    1b60:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1b62:	4628      	mov	r0, r5
    1b64:	f007 ff60 	bl	9a28 <_impl_k_sem_give>
			if (len8) {
    1b68:	2e00      	cmp	r6, #0
    1b6a:	d0e2      	beq.n	1b32 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1b70:	4640      	mov	r0, r8
    1b72:	f007 ffbd 	bl	9af0 <_impl_k_sem_take>
    1b76:	e7e9      	b.n	1b4c <entropy_nrf5_get_entropy+0x28>

00001b78 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1b78:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1b7a:	4802      	ldr	r0, [pc, #8]	; (1b84 <entropy_get_entropy_isr+0xc>)
    1b7c:	460a      	mov	r2, r1
    1b7e:	4619      	mov	r1, r3
    1b80:	f7ff bee6 	b.w	1950 <get>
    1b84:	2000005c 	.word	0x2000005c

00001b88 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1b88:	4b08      	ldr	r3, [pc, #32]	; (1bac <rtc_compare_set+0x24>)
    1b8a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1b8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1b92:	1ac0      	subs	r0, r0, r3
    1b94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b98:	4b05      	ldr	r3, [pc, #20]	; (1bb0 <rtc_compare_set+0x28>)
    1b9a:	3802      	subs	r0, #2
    1b9c:	4298      	cmp	r0, r3
    1b9e:	bf82      	ittt	hi
    1ba0:	4b04      	ldrhi	r3, [pc, #16]	; (1bb4 <rtc_compare_set+0x2c>)
    1ba2:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1ba6:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    1baa:	4770      	bx	lr
    1bac:	40011000 	.word	0x40011000
    1bb0:	007ffffd 	.word	0x007ffffd
    1bb4:	e000e100 	.word	0xe000e100

00001bb8 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1bb8:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1bba:	4b12      	ldr	r3, [pc, #72]	; (1c04 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1bbc:	4c12      	ldr	r4, [pc, #72]	; (1c08 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1bbe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1bc2:	6822      	ldr	r2, [r4, #0]
    1bc4:	1a80      	subs	r0, r0, r2
    1bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1bca:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1bce:	d911      	bls.n	1bf4 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1bd0:	490e      	ldr	r1, [pc, #56]	; (1c0c <rtc_announce_set_next+0x54>)
    1bd2:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1bd4:	f240 1347 	movw	r3, #327	; 0x147
    1bd8:	fbb0 f0f3 	udiv	r0, r0, r3
    1bdc:	4288      	cmp	r0, r1
    1bde:	bf28      	it	cs
    1be0:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1be2:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1be6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1bea:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1bec:	4b08      	ldr	r3, [pc, #32]	; (1c10 <rtc_announce_set_next+0x58>)
    1bee:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1bf0:	f007 ffa6 	bl	9b40 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1bf4:	6820      	ldr	r0, [r4, #0]
}
    1bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1bfa:	f200 1047 	addw	r0, r0, #327	; 0x147
    1bfe:	f7ff bfc3 	b.w	1b88 <rtc_compare_set>
    1c02:	bf00      	nop
    1c04:	40011000 	.word	0x40011000
    1c08:	20000074 	.word	0x20000074
    1c0c:	20000070 	.word	0x20000070
    1c10:	20002b7c 	.word	0x20002b7c

00001c14 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1c14:	4b02      	ldr	r3, [pc, #8]	; (1c20 <rtc1_nrf5_isr+0xc>)
    1c16:	2200      	movs	r2, #0
    1c18:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1c1c:	f7ff bfcc 	b.w	1bb8 <rtc_announce_set_next>
    1c20:	40011000 	.word	0x40011000

00001c24 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1c24:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1c28:	4298      	cmp	r0, r3
    1c2a:	bf28      	it	cs
    1c2c:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <_timer_idle_enter+0x20>)
    1c30:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <_timer_idle_enter+0x24>)
    1c34:	681b      	ldr	r3, [r3, #0]
    1c36:	f240 1247 	movw	r2, #327	; 0x147
    1c3a:	fb02 3000 	mla	r0, r2, r0, r3
    1c3e:	f7ff bfa3 	b.w	1b88 <rtc_compare_set>
    1c42:	bf00      	nop
    1c44:	20000070 	.word	0x20000070
    1c48:	20000074 	.word	0x20000074

00001c4c <_timer_idle_exit>:
{
    1c4c:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1c4e:	4b07      	ldr	r3, [pc, #28]	; (1c6c <_timer_idle_exit+0x20>)
    1c50:	2200      	movs	r2, #0
    1c52:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c56:	4b06      	ldr	r3, [pc, #24]	; (1c70 <_timer_idle_exit+0x24>)
    1c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1c5c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1c60:	f7ff ffaa 	bl	1bb8 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1c64:	4b03      	ldr	r3, [pc, #12]	; (1c74 <_timer_idle_exit+0x28>)
    1c66:	2201      	movs	r2, #1
    1c68:	601a      	str	r2, [r3, #0]
}
    1c6a:	bd08      	pop	{r3, pc}
    1c6c:	40011000 	.word	0x40011000
    1c70:	e000e100 	.word	0xe000e100
    1c74:	20000070 	.word	0x20000070

00001c78 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1c78:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1c7a:	4818      	ldr	r0, [pc, #96]	; (1cdc <_sys_clock_driver_init+0x64>)
    1c7c:	f007 fae0 	bl	9240 <device_get_binding>
	if (!clock) {
    1c80:	b348      	cbz	r0, 1cd6 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1c82:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1c84:	4d16      	ldr	r5, [pc, #88]	; (1ce0 <_sys_clock_driver_init+0x68>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	2101      	movs	r1, #1
    1c8a:	4798      	blx	r3
	rtc_past = 0;
    1c8c:	4b15      	ldr	r3, [pc, #84]	; (1ce4 <_sys_clock_driver_init+0x6c>)
    1c8e:	2400      	movs	r4, #0
    1c90:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1c92:	4b15      	ldr	r3, [pc, #84]	; (1ce8 <_sys_clock_driver_init+0x70>)
    1c94:	2601      	movs	r6, #1
    1c96:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1c98:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1c9c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1ca0:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1ca8:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1cac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1cb0:	4b0e      	ldr	r3, [pc, #56]	; (1cec <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1cb2:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1cba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1cbe:	4631      	mov	r1, r6
    1cc0:	4622      	mov	r2, r4
    1cc2:	2011      	movs	r0, #17
    1cc4:	f7fe ff96 	bl	bf4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1cc8:	2011      	movs	r0, #17
    1cca:	f7fe ff61 	bl	b90 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1cce:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1cd0:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1cd2:	602e      	str	r6, [r5, #0]
}
    1cd4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cda:	e7fb      	b.n	1cd4 <_sys_clock_driver_init+0x5c>
    1cdc:	0000a844 	.word	0x0000a844
    1ce0:	40011000 	.word	0x40011000
    1ce4:	20000074 	.word	0x20000074
    1ce8:	20000070 	.word	0x20000070
    1cec:	e000e100 	.word	0xe000e100

00001cf0 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1cf0:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1cf2:	4a0b      	ldr	r2, [pc, #44]	; (1d20 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1cf4:	480b      	ldr	r0, [pc, #44]	; (1d24 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1cf6:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1cfa:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1cfe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1d02:	4299      	cmp	r1, r3
    1d04:	d10a      	bne.n	1d1c <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1d06:	4a08      	ldr	r2, [pc, #32]	; (1d28 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1d08:	f240 1347 	movw	r3, #327	; 0x147
    1d0c:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1d10:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1d12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1d16:	fb00 3004 	mla	r0, r0, r4, r3
    1d1a:	bd30      	pop	{r4, r5, pc}
    1d1c:	4619      	mov	r1, r3
    1d1e:	e7ec      	b.n	1cfa <_timer_cycle_get_32+0xa>
    1d20:	40011000 	.word	0x40011000
    1d24:	20000f88 	.word	0x20000f88
    1d28:	20002b80 	.word	0x20002b80

00001d2c <atomic_or>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d2c:	f3bf 8f5b 	dmb	ish
    1d30:	e850 3f00 	ldrex	r3, [r0]
    1d34:	ea43 0201 	orr.w	r2, r3, r1
    1d38:	e840 2c00 	strex	ip, r2, [r0]
    1d3c:	f1bc 0f00 	cmp.w	ip, #0
    1d40:	d1f6      	bne.n	1d30 <atomic_or+0x4>
    1d42:	f3bf 8f5b 	dmb	ish
}
    1d46:	4618      	mov	r0, r3
    1d48:	4770      	bx	lr

00001d4a <atomic_and>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d4a:	f3bf 8f5b 	dmb	ish
    1d4e:	e850 3f00 	ldrex	r3, [r0]
    1d52:	ea03 0201 	and.w	r2, r3, r1
    1d56:	e840 2c00 	strex	ip, r2, [r0]
    1d5a:	f1bc 0f00 	cmp.w	ip, #0
    1d5e:	d1f6      	bne.n	1d4e <atomic_and+0x4>
    1d60:	f3bf 8f5b 	dmb	ish
}
    1d64:	4618      	mov	r0, r3
    1d66:	4770      	bx	lr

00001d68 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1d68:	b570      	push	{r4, r5, r6, lr}
    1d6a:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d6c:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1d6e:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d70:	f007 f950 	bl	9014 <net_buf_pool_get>
    1d74:	4b0e      	ldr	r3, [pc, #56]	; (1db0 <hci_cmd_done.isra.9+0x48>)
    1d76:	4283      	cmp	r3, r0
    1d78:	d119      	bne.n	1dae <hci_cmd_done.isra.9+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1d7a:	4628      	mov	r0, r5
    1d7c:	f007 f950 	bl	9020 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1d80:	4628      	mov	r0, r5
    1d82:	f007 f94d 	bl	9020 <net_buf_id>
    1d86:	4c0b      	ldr	r4, [pc, #44]	; (1db4 <hci_cmd_done.isra.9+0x4c>)
    1d88:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1d8c:	6843      	ldr	r3, [r0, #4]
    1d8e:	b173      	cbz	r3, 1dae <hci_cmd_done.isra.9+0x46>
		cmd(buf)->status = status;
    1d90:	4628      	mov	r0, r5
    1d92:	f007 f945 	bl	9020 <net_buf_id>
    1d96:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1d9a:	4628      	mov	r0, r5
    1d9c:	f007 f940 	bl	9020 <net_buf_id>
    1da0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1da8:	6840      	ldr	r0, [r0, #4]
    1daa:	f007 be3d 	b.w	9a28 <_impl_k_sem_give>
    1dae:	bd70      	pop	{r4, r5, r6, pc}
    1db0:	20002c3c 	.word	0x20002c3c
    1db4:	20000078 	.word	0x20000078

00001db8 <atomic_test_bit.constprop.24>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1db8:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <atomic_test_bit.constprop.24+0x18>)
    1dba:	f3bf 8f5b 	dmb	ish
    1dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1dc0:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1dc4:	fa43 f000 	asr.w	r0, r3, r0
}
    1dc8:	f000 0001 	and.w	r0, r0, #1
    1dcc:	4770      	bx	lr
    1dce:	bf00      	nop
    1dd0:	20002950 	.word	0x20002950

00001dd4 <bt_hci_cmd_create>:
{
    1dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dd8:	4680      	mov	r8, r0
    1dda:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ddc:	4813      	ldr	r0, [pc, #76]	; (1e2c <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1dde:	4d14      	ldr	r5, [pc, #80]	; (1e30 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1de4:	f007 f9aa 	bl	913c <net_buf_alloc_fixed>
    1de8:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1dea:	f100 0608 	add.w	r6, r0, #8
    1dee:	2100      	movs	r1, #0
    1df0:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1df2:	2700      	movs	r7, #0
    1df4:	f007 f9a8 	bl	9148 <net_buf_simple_reserve>
    1df8:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1dfa:	4620      	mov	r0, r4
    1dfc:	f007 f910 	bl	9020 <net_buf_id>
    1e00:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1e04:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1e08:	4620      	mov	r0, r4
    1e0a:	f007 f909 	bl	9020 <net_buf_id>
    1e0e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e12:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1e14:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e16:	4630      	mov	r0, r6
    1e18:	f007 f9da 	bl	91d0 <net_buf_simple_add>
	hdr->param_len = param_len;
    1e1c:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1e20:	f8a0 8000 	strh.w	r8, [r0]
}
    1e24:	4620      	mov	r0, r4
    1e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e2a:	bf00      	nop
    1e2c:	20002c3c 	.word	0x20002c3c
    1e30:	20000078 	.word	0x20000078

00001e34 <bt_hci_cmd_send_sync>:
{
    1e34:	b570      	push	{r4, r5, r6, lr}
    1e36:	4615      	mov	r5, r2
    1e38:	b086      	sub	sp, #24
	if (!buf) {
    1e3a:	460c      	mov	r4, r1
    1e3c:	b919      	cbnz	r1, 1e46 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1e3e:	f7ff ffc9 	bl	1dd4 <bt_hci_cmd_create>
		if (!buf) {
    1e42:	4604      	mov	r4, r0
    1e44:	b368      	cbz	r0, 1ea2 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1e46:	2201      	movs	r2, #1
    1e48:	2100      	movs	r1, #0
    1e4a:	4668      	mov	r0, sp
    1e4c:	f007 fde2 	bl	9a14 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1e50:	4620      	mov	r0, r4
    1e52:	f007 f8e5 	bl	9020 <net_buf_id>
    1e56:	4e14      	ldr	r6, [pc, #80]	; (1ea8 <bt_hci_cmd_send_sync+0x74>)
    1e58:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1e5c:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1e60:	4620      	mov	r0, r4
    1e62:	f007 f9b1 	bl	91c8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1e66:	4621      	mov	r1, r4
    1e68:	4810      	ldr	r0, [pc, #64]	; (1eac <bt_hci_cmd_send_sync+0x78>)
    1e6a:	f007 f971 	bl	9150 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1e6e:	f242 7110 	movw	r1, #10000	; 0x2710
    1e72:	4668      	mov	r0, sp
    1e74:	f007 fe3c 	bl	9af0 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1e78:	4620      	mov	r0, r4
    1e7a:	f007 f8d1 	bl	9020 <net_buf_id>
    1e7e:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1e82:	b130      	cbz	r0, 1e92 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1e84:	4620      	mov	r0, r4
    1e86:	f007 f971 	bl	916c <net_buf_unref>
		err = -EIO;
    1e8a:	f06f 0004 	mvn.w	r0, #4
}
    1e8e:	b006      	add	sp, #24
    1e90:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1e92:	b10d      	cbz	r5, 1e98 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1e94:	602c      	str	r4, [r5, #0]
    1e96:	e7fa      	b.n	1e8e <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1e98:	4620      	mov	r0, r4
    1e9a:	f007 f967 	bl	916c <net_buf_unref>
		err = 0;
    1e9e:	4628      	mov	r0, r5
    1ea0:	e7f5      	b.n	1e8e <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1ea2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1ea6:	e7f2      	b.n	1e8e <bt_hci_cmd_send_sync+0x5a>
    1ea8:	20000078 	.word	0x20000078
    1eac:	20002a04 	.word	0x20002a04

00001eb0 <set_random_address>:
{
    1eb0:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1eb2:	4d15      	ldr	r5, [pc, #84]	; (1f08 <set_random_address+0x58>)
    1eb4:	2206      	movs	r2, #6
    1eb6:	f105 0108 	add.w	r1, r5, #8
    1eba:	4606      	mov	r6, r0
    1ebc:	f7fe fb7f 	bl	5be <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1ec0:	4604      	mov	r4, r0
    1ec2:	b1d8      	cbz	r0, 1efc <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1ec4:	2106      	movs	r1, #6
    1ec6:	f242 0005 	movw	r0, #8197	; 0x2005
    1eca:	f7ff ff83 	bl	1dd4 <bt_hci_cmd_create>
	if (!buf) {
    1ece:	4604      	mov	r4, r0
    1ed0:	b1b0      	cbz	r0, 1f00 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    1ed2:	2206      	movs	r2, #6
    1ed4:	4631      	mov	r1, r6
    1ed6:	3008      	adds	r0, #8
    1ed8:	f007 f980 	bl	91dc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1edc:	4621      	mov	r1, r4
    1ede:	2200      	movs	r2, #0
    1ee0:	f242 0005 	movw	r0, #8197	; 0x2005
    1ee4:	f7ff ffa6 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    1ee8:	4604      	mov	r4, r0
    1eea:	b938      	cbnz	r0, 1efc <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1eec:	2206      	movs	r2, #6
    1eee:	4631      	mov	r1, r6
    1ef0:	f105 0008 	add.w	r0, r5, #8
    1ef4:	f7fe fb73 	bl	5de <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1ef8:	2301      	movs	r3, #1
    1efa:	71eb      	strb	r3, [r5, #7]
}
    1efc:	4620      	mov	r0, r4
    1efe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    1f00:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1f04:	e7fa      	b.n	1efc <set_random_address+0x4c>
    1f06:	bf00      	nop
    1f08:	20002950 	.word	0x20002950

00001f0c <set_le_scan_enable>:
{
    1f0c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1f0e:	2102      	movs	r1, #2
{
    1f10:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1f12:	f242 000c 	movw	r0, #8204	; 0x200c
    1f16:	f7ff ff5d 	bl	1dd4 <bt_hci_cmd_create>
	if (!buf) {
    1f1a:	4604      	mov	r4, r0
    1f1c:	b320      	cbz	r0, 1f68 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    1f1e:	2102      	movs	r1, #2
    1f20:	3008      	adds	r0, #8
    1f22:	f007 f955 	bl	91d0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1f26:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    1f28:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1f2a:	d114      	bne.n	1f56 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1f2c:	200a      	movs	r0, #10
    1f2e:	f7ff ff43 	bl	1db8 <atomic_test_bit.constprop.24>
    1f32:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    1f34:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1f36:	4621      	mov	r1, r4
    1f38:	2200      	movs	r2, #0
    1f3a:	f242 000c 	movw	r0, #8204	; 0x200c
    1f3e:	f7ff ff79 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    1f42:	4604      	mov	r4, r0
    1f44:	b928      	cbnz	r0, 1f52 <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1f46:	2d01      	cmp	r5, #1
    1f48:	d108      	bne.n	1f5c <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f4a:	2180      	movs	r1, #128	; 0x80
    1f4c:	4808      	ldr	r0, [pc, #32]	; (1f70 <set_le_scan_enable+0x64>)
    1f4e:	f7ff feed 	bl	1d2c <atomic_or>
}
    1f52:	4620      	mov	r0, r4
    1f54:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1f56:	2300      	movs	r3, #0
    1f58:	7043      	strb	r3, [r0, #1]
    1f5a:	e7eb      	b.n	1f34 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f5c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    1f60:	4803      	ldr	r0, [pc, #12]	; (1f70 <set_le_scan_enable+0x64>)
    1f62:	f7ff fef2 	bl	1d4a <atomic_and>
    1f66:	e7f4      	b.n	1f52 <set_le_scan_enable+0x46>
		return -ENOBUFS;
    1f68:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1f6c:	e7f1      	b.n	1f52 <set_le_scan_enable+0x46>
    1f6e:	bf00      	nop
    1f70:	200029c0 	.word	0x200029c0

00001f74 <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    1f74:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    1f76:	2008      	movs	r0, #8
    1f78:	f7ff ff1e 	bl	1db8 <atomic_test_bit.constprop.24>
    1f7c:	4602      	mov	r2, r0
    1f7e:	b940      	cbnz	r0, 1f92 <bt_le_scan_update+0x1e>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1f80:	2007      	movs	r0, #7
    1f82:	f7ff ff19 	bl	1db8 <atomic_test_bit.constprop.24>
    1f86:	b120      	cbz	r0, 1f92 <bt_le_scan_update+0x1e>
		int err;

		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    1f88:	4610      	mov	r0, r2

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    1f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    1f8e:	f7ff bfbd 	b.w	1f0c <set_le_scan_enable>
}
    1f92:	2000      	movs	r0, #0
    1f94:	bd08      	pop	{r3, pc}

00001f96 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1f96:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1f98:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    1f9a:	2106      	movs	r1, #6
{
    1f9c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    1f9e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    1fa2:	f001 fb37 	bl	3614 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    1fa6:	b918      	cbnz	r0, 1fb0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    1fa8:	79a3      	ldrb	r3, [r4, #6]
    1faa:	f063 033f 	orn	r3, r3, #63	; 0x3f
    1fae:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    1fb0:	bd10      	pop	{r4, pc}
	...

00001fb4 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb6:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1fb8:	aa04      	add	r2, sp, #16
    1fba:	2100      	movs	r1, #0
    1fbc:	f640 4003 	movw	r0, #3075	; 0xc03
    1fc0:	f7ff ff38 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    1fc4:	4604      	mov	r4, r0
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d175      	bne.n	20b6 <hci_init+0x102>
	u8_t status = buf->data[0];
    1fca:	9b04      	ldr	r3, [sp, #16]
    1fcc:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1fce:	781b      	ldrb	r3, [r3, #0]
    1fd0:	b96b      	cbnz	r3, 1fee <hci_init+0x3a>
	scan_dev_found_cb = NULL;
    1fd2:	4ab5      	ldr	r2, [pc, #724]	; (22a8 <hci_init+0x2f4>)
    1fd4:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1fd6:	4bb5      	ldr	r3, [pc, #724]	; (22ac <hci_init+0x2f8>)
    1fd8:	f3bf 8f5b 	dmb	ish
    1fdc:	2201      	movs	r2, #1
    1fde:	e853 1f00 	ldrex	r1, [r3]
    1fe2:	e843 2000 	strex	r0, r2, [r3]
    1fe6:	2800      	cmp	r0, #0
    1fe8:	d1f9      	bne.n	1fde <hci_init+0x2a>
    1fea:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    1fee:	9804      	ldr	r0, [sp, #16]
    1ff0:	f007 f8bc 	bl	916c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1ff4:	aa04      	add	r2, sp, #16
    1ff6:	2100      	movs	r1, #0
    1ff8:	f241 0003 	movw	r0, #4099	; 0x1003
    1ffc:	f7ff ff1a 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    2000:	4604      	mov	r4, r0
    2002:	2800      	cmp	r0, #0
    2004:	d157      	bne.n	20b6 <hci_init+0x102>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2006:	9b04      	ldr	r3, [sp, #16]
    2008:	4da9      	ldr	r5, [pc, #676]	; (22b0 <hci_init+0x2fc>)
    200a:	6899      	ldr	r1, [r3, #8]
    200c:	2208      	movs	r2, #8
    200e:	3101      	adds	r1, #1
    2010:	f105 0016 	add.w	r0, r5, #22
    2014:	f7fe fae3 	bl	5de <memcpy>
	net_buf_unref(rsp);
    2018:	9804      	ldr	r0, [sp, #16]
    201a:	f007 f8a7 	bl	916c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    201e:	4621      	mov	r1, r4
    2020:	aa04      	add	r2, sp, #16
    2022:	f241 0001 	movw	r0, #4097	; 0x1001
    2026:	f7ff ff05 	bl	1e34 <bt_hci_cmd_send_sync>
    202a:	462e      	mov	r6, r5
	if (err) {
    202c:	4604      	mov	r4, r0
    202e:	2800      	cmp	r0, #0
    2030:	d141      	bne.n	20b6 <hci_init+0x102>
	read_local_ver_complete(rsp);
    2032:	9804      	ldr	r0, [sp, #16]
    2034:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2036:	785a      	ldrb	r2, [r3, #1]
    2038:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    203a:	78d9      	ldrb	r1, [r3, #3]
    203c:	789a      	ldrb	r2, [r3, #2]
    203e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2042:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2044:	791a      	ldrb	r2, [r3, #4]
    2046:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2048:	7a19      	ldrb	r1, [r3, #8]
    204a:	79da      	ldrb	r2, [r3, #7]
    204c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2050:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2052:	795a      	ldrb	r2, [r3, #5]
    2054:	799b      	ldrb	r3, [r3, #6]
    2056:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    205a:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    205c:	f007 f886 	bl	916c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2060:	4621      	mov	r1, r4
    2062:	aa04      	add	r2, sp, #16
    2064:	f241 0009 	movw	r0, #4105	; 0x1009
    2068:	f7ff fee4 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    206c:	4604      	mov	r4, r0
    206e:	bb10      	cbnz	r0, 20b6 <hci_init+0x102>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2070:	9b04      	ldr	r3, [sp, #16]
    2072:	6899      	ldr	r1, [r3, #8]
    2074:	2206      	movs	r2, #6
    2076:	3101      	adds	r1, #1
    2078:	1c68      	adds	r0, r5, #1
    207a:	f7fe fab0 	bl	5de <memcpy>
	net_buf_unref(rsp);
    207e:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2080:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    2082:	f007 f873 	bl	916c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2086:	4621      	mov	r1, r4
    2088:	aa04      	add	r2, sp, #16
    208a:	f241 0002 	movw	r0, #4098	; 0x1002
    208e:	f7ff fed1 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    2092:	4604      	mov	r4, r0
    2094:	b978      	cbnz	r0, 20b6 <hci_init+0x102>
	memcpy(bt_dev.supported_commands, rp->commands,
    2096:	9b04      	ldr	r3, [sp, #16]
    2098:	6899      	ldr	r1, [r3, #8]
    209a:	2240      	movs	r2, #64	; 0x40
    209c:	3101      	adds	r1, #1
    209e:	f105 001e 	add.w	r0, r5, #30
    20a2:	f7fe fa9c 	bl	5de <memcpy>
	net_buf_unref(rsp);
    20a6:	9804      	ldr	r0, [sp, #16]
    20a8:	f007 f860 	bl	916c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    20ac:	7eab      	ldrb	r3, [r5, #26]
    20ae:	0658      	lsls	r0, r3, #25
    20b0:	d404      	bmi.n	20bc <hci_init+0x108>
		return -ENODEV;
    20b2:	f06f 0412 	mvn.w	r4, #18
	}

	show_dev_info();

	return 0;
}
    20b6:	4620      	mov	r0, r4
    20b8:	b007      	add	sp, #28
    20ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    20bc:	4621      	mov	r1, r4
    20be:	aa04      	add	r2, sp, #16
    20c0:	f242 0003 	movw	r0, #8195	; 0x2003
    20c4:	f7ff feb6 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    20c8:	4604      	mov	r4, r0
    20ca:	2800      	cmp	r0, #0
    20cc:	d1f3      	bne.n	20b6 <hci_init+0x102>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    20ce:	9b04      	ldr	r3, [sp, #16]
    20d0:	6899      	ldr	r1, [r3, #8]
    20d2:	2208      	movs	r2, #8
    20d4:	3101      	adds	r1, #1
    20d6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    20da:	f7fe fa80 	bl	5de <memcpy>
	net_buf_unref(rsp);
    20de:	9804      	ldr	r0, [sp, #16]
    20e0:	f007 f844 	bl	916c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    20e4:	7eab      	ldrb	r3, [r5, #26]
    20e6:	0699      	lsls	r1, r3, #26
    20e8:	f140 809c 	bpl.w	2224 <hci_init+0x270>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    20ec:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    20f0:	071a      	lsls	r2, r3, #28
    20f2:	f100 80b3 	bmi.w	225c <hci_init+0x2a8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    20f6:	2108      	movs	r1, #8
    20f8:	f242 0001 	movw	r0, #8193	; 0x2001
    20fc:	f7ff fe6a 	bl	1dd4 <bt_hci_cmd_create>
	if (!buf) {
    2100:	4604      	mov	r4, r0
    2102:	2800      	cmp	r0, #0
    2104:	f000 8095 	beq.w	2232 <hci_init+0x27e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2108:	2108      	movs	r1, #8
    210a:	4408      	add	r0, r1
    210c:	f007 f860 	bl	91d0 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2110:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    2114:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2118:	2b06      	cmp	r3, #6
    211a:	bf14      	ite	ne
    211c:	2302      	movne	r3, #2
    211e:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2122:	2200      	movs	r2, #0
    2124:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2126:	0a1b      	lsrs	r3, r3, #8
    2128:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    212a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    212c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    212e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2130:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2132:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2134:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2136:	4621      	mov	r1, r4
    2138:	f242 0001 	movw	r0, #8193	; 0x2001
    213c:	f7ff fe7a 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    2140:	4604      	mov	r4, r0
    2142:	2800      	cmp	r0, #0
    2144:	d1b7      	bne.n	20b6 <hci_init+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2146:	2108      	movs	r1, #8
    2148:	f640 4001 	movw	r0, #3073	; 0xc01
    214c:	f7ff fe42 	bl	1dd4 <bt_hci_cmd_create>
	if (!buf) {
    2150:	4605      	mov	r5, r0
    2152:	2800      	cmp	r0, #0
    2154:	d06d      	beq.n	2232 <hci_init+0x27e>
	ev = net_buf_add(buf, sizeof(*ev));
    2156:	2108      	movs	r1, #8
    2158:	4408      	add	r0, r1
    215a:	f007 f839 	bl	91d0 <net_buf_simple_add>
    215e:	2380      	movs	r3, #128	; 0x80
    2160:	7043      	strb	r3, [r0, #1]
    2162:	2702      	movs	r7, #2
    2164:	2320      	movs	r3, #32
	dst[0] = val;
    2166:	7004      	strb	r4, [r0, #0]
    2168:	7084      	strb	r4, [r0, #2]
    216a:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    216c:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    216e:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2170:	70c7      	strb	r7, [r0, #3]
    2172:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2174:	4622      	mov	r2, r4
    2176:	4629      	mov	r1, r5
    2178:	f640 4001 	movw	r0, #3073	; 0xc01
    217c:	f7ff fe5a 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    2180:	4604      	mov	r4, r0
    2182:	2800      	cmp	r0, #0
    2184:	d197      	bne.n	20b6 <hci_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2186:	4601      	mov	r1, r0
    2188:	aa04      	add	r2, sp, #16
    218a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    218e:	f7ff fe51 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    2192:	bb20      	cbnz	r0, 21de <hci_init+0x22a>
	net_buf_unref(rsp);
    2194:	9804      	ldr	r0, [sp, #16]
    2196:	f006 ffe9 	bl	916c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    219a:	aa04      	add	r2, sp, #16
    219c:	4621      	mov	r1, r4
    219e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    21a2:	f7ff fe47 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    21a6:	b9d0      	cbnz	r0, 21de <hci_init+0x22a>
	rp.cmds = (void *)rsp->data;
    21a8:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    21aa:	4842      	ldr	r0, [pc, #264]	; (22b4 <hci_init+0x300>)
    21ac:	6899      	ldr	r1, [r3, #8]
    21ae:	463a      	mov	r2, r7
    21b0:	3101      	adds	r1, #1
    21b2:	f7fe fa14 	bl	5de <memcpy>
	net_buf_unref(rsp);
    21b6:	9804      	ldr	r0, [sp, #16]
    21b8:	f006 ffd8 	bl	916c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    21bc:	aa04      	add	r2, sp, #16
    21be:	4621      	mov	r1, r4
    21c0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    21c4:	f7ff fe36 	bl	1e34 <bt_hci_cmd_send_sync>
	if (err) {
    21c8:	b948      	cbnz	r0, 21de <hci_init+0x22a>
	rp.feat = (void *)rsp->data;
    21ca:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    21cc:	483a      	ldr	r0, [pc, #232]	; (22b8 <hci_init+0x304>)
    21ce:	6899      	ldr	r1, [r3, #8]
    21d0:	2201      	movs	r2, #1
    21d2:	4411      	add	r1, r2
    21d4:	f7fe fa03 	bl	5de <memcpy>
	net_buf_unref(rsp);
    21d8:	9804      	ldr	r0, [sp, #16]
    21da:	f006 ffc7 	bl	916c <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    21de:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    21e0:	2207      	movs	r2, #7
    21e2:	a902      	add	r1, sp, #8
    21e4:	4832      	ldr	r0, [pc, #200]	; (22b0 <hci_init+0x2fc>)
    21e6:	9302      	str	r3, [sp, #8]
    21e8:	f8cd 300b 	str.w	r3, [sp, #11]
    21ec:	f7fe f9e7 	bl	5be <memcmp>
    21f0:	2800      	cmp	r0, #0
    21f2:	d147      	bne.n	2284 <hci_init+0x2d0>
	if (bt_storage) {
    21f4:	4d31      	ldr	r5, [pc, #196]	; (22bc <hci_init+0x308>)
    21f6:	682b      	ldr	r3, [r5, #0]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d163      	bne.n	22c4 <hci_init+0x310>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    21fc:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2200:	07db      	lsls	r3, r3, #31
    2202:	d47b      	bmi.n	22fc <hci_init+0x348>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2204:	482a      	ldr	r0, [pc, #168]	; (22b0 <hci_init+0x2fc>)
    2206:	f7ff fec6 	bl	1f96 <bt_addr_le_create_static>
	if (err) {
    220a:	4604      	mov	r4, r0
    220c:	2800      	cmp	r0, #0
    220e:	f47f af52 	bne.w	20b6 <hci_init+0x102>
	if (bt_storage) {
    2212:	682b      	ldr	r3, [r5, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	d05d      	beq.n	22d4 <hci_init+0x320>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2218:	685d      	ldr	r5, [r3, #4]
    221a:	4a25      	ldr	r2, [pc, #148]	; (22b0 <hci_init+0x2fc>)
    221c:	2307      	movs	r3, #7
    221e:	4601      	mov	r1, r0
    2220:	47a8      	blx	r5
    2222:	e057      	b.n	22d4 <hci_init+0x320>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2224:	2102      	movs	r1, #2
    2226:	f640 406d 	movw	r0, #3181	; 0xc6d
    222a:	f7ff fdd3 	bl	1dd4 <bt_hci_cmd_create>
		if (!buf) {
    222e:	4605      	mov	r5, r0
    2230:	b910      	cbnz	r0, 2238 <hci_init+0x284>
		return -ENOBUFS;
    2232:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2236:	e73e      	b.n	20b6 <hci_init+0x102>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2238:	2102      	movs	r1, #2
    223a:	3008      	adds	r0, #8
    223c:	f006 ffc8 	bl	91d0 <net_buf_simple_add>
		cp_le->le = 0x01;
    2240:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2242:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2244:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2246:	4622      	mov	r2, r4
    2248:	4629      	mov	r1, r5
    224a:	f640 406d 	movw	r0, #3181	; 0xc6d
    224e:	f7ff fdf1 	bl	1e34 <bt_hci_cmd_send_sync>
		if (err) {
    2252:	4604      	mov	r4, r0
    2254:	2800      	cmp	r0, #0
    2256:	f43f af49 	beq.w	20ec <hci_init+0x138>
    225a:	e72c      	b.n	20b6 <hci_init+0x102>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    225c:	aa04      	add	r2, sp, #16
    225e:	2100      	movs	r1, #0
    2260:	f242 001c 	movw	r0, #8220	; 0x201c
    2264:	f7ff fde6 	bl	1e34 <bt_hci_cmd_send_sync>
		if (err) {
    2268:	4604      	mov	r4, r0
    226a:	2800      	cmp	r0, #0
    226c:	f47f af23 	bne.w	20b6 <hci_init+0x102>
		le_read_supp_states_complete(rsp);
    2270:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2272:	6883      	ldr	r3, [r0, #8]
    2274:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2278:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    227a:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    227e:	f006 ff75 	bl	916c <net_buf_unref>
    2282:	e738      	b.n	20f6 <hci_init+0x142>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2284:	4b0e      	ldr	r3, [pc, #56]	; (22c0 <hci_init+0x30c>)
    2286:	6818      	ldr	r0, [r3, #0]
    2288:	889a      	ldrh	r2, [r3, #4]
    228a:	9004      	str	r0, [sp, #16]
    228c:	799b      	ldrb	r3, [r3, #6]
    228e:	f8ad 2014 	strh.w	r2, [sp, #20]
    2292:	a904      	add	r1, sp, #16
    2294:	2207      	movs	r2, #7
    2296:	4806      	ldr	r0, [pc, #24]	; (22b0 <hci_init+0x2fc>)
    2298:	f88d 3016 	strb.w	r3, [sp, #22]
    229c:	f7fe f98f 	bl	5be <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    22a0:	2800      	cmp	r0, #0
    22a2:	d0a7      	beq.n	21f4 <hci_init+0x240>
    22a4:	e707      	b.n	20b6 <hci_init+0x102>
    22a6:	bf00      	nop
    22a8:	200000d4 	.word	0x200000d4
    22ac:	200029c0 	.word	0x200029c0
    22b0:	20002950 	.word	0x20002950
    22b4:	200029af 	.word	0x200029af
    22b8:	200029ae 	.word	0x200029ae
    22bc:	20000ea8 	.word	0x20000ea8
    22c0:	0000a394 	.word	0x0000a394
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    22c4:	2100      	movs	r1, #0
    22c6:	681c      	ldr	r4, [r3, #0]
    22c8:	4a1b      	ldr	r2, [pc, #108]	; (2338 <hci_init+0x384>)
    22ca:	2307      	movs	r3, #7
    22cc:	4608      	mov	r0, r1
    22ce:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    22d0:	2807      	cmp	r0, #7
    22d2:	d193      	bne.n	21fc <hci_init+0x248>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    22d4:	7833      	ldrb	r3, [r6, #0]
    22d6:	2b01      	cmp	r3, #1
    22d8:	d12b      	bne.n	2332 <hci_init+0x37e>
    22da:	79b3      	ldrb	r3, [r6, #6]
    22dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    22e0:	2bc0      	cmp	r3, #192	; 0xc0
    22e2:	d126      	bne.n	2332 <hci_init+0x37e>
	err = set_random_address(&bt_dev.id_addr.a);
    22e4:	4815      	ldr	r0, [pc, #84]	; (233c <hci_init+0x388>)
    22e6:	f7ff fde3 	bl	1eb0 <set_random_address>
	if (err) {
    22ea:	4604      	mov	r4, r0
    22ec:	2800      	cmp	r0, #0
    22ee:	f47f aee2 	bne.w	20b6 <hci_init+0x102>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22f2:	2104      	movs	r1, #4
    22f4:	4812      	ldr	r0, [pc, #72]	; (2340 <hci_init+0x38c>)
    22f6:	f7ff fd19 	bl	1d2c <atomic_or>
    22fa:	e6dc      	b.n	20b6 <hci_init+0x102>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    22fc:	aa01      	add	r2, sp, #4
    22fe:	2100      	movs	r1, #0
    2300:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2304:	f7ff fd96 	bl	1e34 <bt_hci_cmd_send_sync>
		if (err) {
    2308:	2800      	cmp	r0, #0
    230a:	f47f af7b 	bne.w	2204 <hci_init+0x250>
		rp = (void *)rsp->data;
    230e:	9801      	ldr	r0, [sp, #4]
    2310:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    2312:	784b      	ldrb	r3, [r1, #1]
    2314:	b153      	cbz	r3, 232c <hci_init+0x378>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2316:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2318:	2206      	movs	r2, #6
    231a:	3102      	adds	r1, #2
    231c:	4807      	ldr	r0, [pc, #28]	; (233c <hci_init+0x388>)
    231e:	7033      	strb	r3, [r6, #0]
    2320:	f7fe f95d 	bl	5de <memcpy>
			net_buf_unref(rsp);
    2324:	9801      	ldr	r0, [sp, #4]
    2326:	f006 ff21 	bl	916c <net_buf_unref>
    232a:	e7d3      	b.n	22d4 <hci_init+0x320>
		net_buf_unref(rsp);
    232c:	f006 ff1e 	bl	916c <net_buf_unref>
    2330:	e768      	b.n	2204 <hci_init+0x250>
		return -EINVAL;
    2332:	f06f 0415 	mvn.w	r4, #21
    2336:	e6be      	b.n	20b6 <hci_init+0x102>
    2338:	20002950 	.word	0x20002950
    233c:	20002951 	.word	0x20002951
    2340:	200029c0 	.word	0x200029c0

00002344 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    2344:	b510      	push	{r4, lr}
	err = hci_init();
    2346:	f7ff fe35 	bl	1fb4 <hci_init>
	if (err) {
    234a:	4604      	mov	r4, r0
    234c:	b930      	cbnz	r0, 235c <init_work+0x18>
    234e:	2102      	movs	r1, #2
    2350:	4806      	ldr	r0, [pc, #24]	; (236c <init_work+0x28>)
    2352:	f7ff fceb 	bl	1d2c <atomic_or>
	bt_le_scan_update(false);
    2356:	4620      	mov	r0, r4
    2358:	f7ff fe0c 	bl	1f74 <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    235c:	4b04      	ldr	r3, [pc, #16]	; (2370 <init_work+0x2c>)
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	b11b      	cbz	r3, 236a <init_work+0x26>
		ready_cb(err);
    2362:	4620      	mov	r0, r4
	}
}
    2364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2368:	4718      	bx	r3
}
    236a:	bd10      	pop	{r4, pc}
    236c:	200029c0 	.word	0x200029c0
    2370:	200000d0 	.word	0x200000d0

00002374 <bt_recv>:
{
    2374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2378:	7d06      	ldrb	r6, [r0, #20]
    237a:	2e01      	cmp	r6, #1
{
    237c:	b085      	sub	sp, #20
    237e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2380:	f040 8098 	bne.w	24b4 <bt_recv+0x140>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2384:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2386:	783b      	ldrb	r3, [r7, #0]
    2388:	3b0e      	subs	r3, #14
    238a:	2b01      	cmp	r3, #1
    238c:	d805      	bhi.n	239a <bt_recv+0x26>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    238e:	4040      	eors	r0, r0
    2390:	f380 8811 	msr	BASEPRI, r0
    2394:	f04f 0004 	mov.w	r0, #4
    2398:	df02      	svc	2
	net_buf_pull(buf, sizeof(*hdr));
    239a:	f100 0308 	add.w	r3, r0, #8
    239e:	4618      	mov	r0, r3
    23a0:	2102      	movs	r1, #2
    23a2:	9301      	str	r3, [sp, #4]
    23a4:	f006 ff23 	bl	91ee <net_buf_simple_pull>
	switch (hdr->evt) {
    23a8:	783b      	ldrb	r3, [r7, #0]
    23aa:	2b3e      	cmp	r3, #62	; 0x3e
    23ac:	d161      	bne.n	2472 <bt_recv+0xfe>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    23ae:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    23b0:	9801      	ldr	r0, [sp, #4]
    23b2:	4631      	mov	r1, r6
    23b4:	f006 ff1b 	bl	91ee <net_buf_simple_pull>
	switch (evt->subevent) {
    23b8:	783f      	ldrb	r7, [r7, #0]
    23ba:	2f08      	cmp	r7, #8
    23bc:	d044      	beq.n	2448 <bt_recv+0xd4>
    23be:	2f09      	cmp	r7, #9
    23c0:	d067      	beq.n	2492 <bt_recv+0x11e>
    23c2:	2f02      	cmp	r7, #2
    23c4:	d155      	bne.n	2472 <bt_recv+0xfe>
	u8_t num_reports = net_buf_pull_u8(buf);
    23c6:	9801      	ldr	r0, [sp, #4]
		if (scan_dev_found_cb) {
    23c8:	4f3d      	ldr	r7, [pc, #244]	; (24c0 <bt_recv+0x14c>)
	u8_t num_reports = net_buf_pull_u8(buf);
    23ca:	f006 ff18 	bl	91fe <net_buf_simple_pull_u8>
    23ce:	4680      	mov	r8, r0
	while (num_reports--) {
    23d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    23d4:	fa5f f888 	uxtb.w	r8, r8
    23d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    23dc:	d049      	beq.n	2472 <bt_recv+0xfe>
		info = (void *)buf->data;
    23de:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    23e0:	9801      	ldr	r0, [sp, #4]
    23e2:	2109      	movs	r1, #9
    23e4:	f006 ff03 	bl	91ee <net_buf_simple_pull>
		rssi = info->data[info->length];
    23e8:	7a33      	ldrb	r3, [r6, #8]
    23ea:	4433      	add	r3, r6
    23ec:	1c71      	adds	r1, r6, #1
    23ee:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    23f2:	7873      	ldrb	r3, [r6, #1]
    23f4:	3b02      	subs	r3, #2
    23f6:	2b01      	cmp	r3, #1
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    23f8:	f04f 0207 	mov.w	r2, #7
    23fc:	a802      	add	r0, sp, #8
    23fe:	d856      	bhi.n	24ae <bt_recv+0x13a>
    2400:	f7fe f8ed 	bl	5de <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2404:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2408:	3b02      	subs	r3, #2
    240a:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    240e:	683b      	ldr	r3, [r7, #0]
    2410:	b1a3      	cbz	r3, 243c <bt_recv+0xc8>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2412:	9801      	ldr	r0, [sp, #4]
    2414:	f006 fefb 	bl	920e <net_buf_simple_headroom>
			buf->len = info->length;
    2418:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    241a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    241e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    2420:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	7832      	ldrb	r2, [r6, #0]
    2426:	683d      	ldr	r5, [r7, #0]
    2428:	fa4f f18b 	sxtb.w	r1, fp
    242c:	a802      	add	r0, sp, #8
    242e:	47a8      	blx	r5
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2430:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    2432:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    2436:	fa13 f389 	uxtah	r3, r3, r9
    243a:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    243c:	7a31      	ldrb	r1, [r6, #8]
    243e:	9801      	ldr	r0, [sp, #4]
    2440:	3101      	adds	r1, #1
    2442:	f006 fed4 	bl	91ee <net_buf_simple_pull>
    2446:	e7c3      	b.n	23d0 <bt_recv+0x5c>
    2448:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    244a:	481e      	ldr	r0, [pc, #120]	; (24c4 <bt_recv+0x150>)
    244c:	f06f 0110 	mvn.w	r1, #16
    2450:	f7ff fc7b 	bl	1d4a <atomic_and>
	if (!evt->status) {
    2454:	7833      	ldrb	r3, [r6, #0]
    2456:	b943      	cbnz	r3, 246a <bt_recv+0xf6>
		memcpy(pub_key, evt->key, 64);
    2458:	1c71      	adds	r1, r6, #1
    245a:	2240      	movs	r2, #64	; 0x40
    245c:	481a      	ldr	r0, [pc, #104]	; (24c8 <bt_recv+0x154>)
    245e:	f7fe f8be 	bl	5de <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2462:	4639      	mov	r1, r7
    2464:	4817      	ldr	r0, [pc, #92]	; (24c4 <bt_recv+0x150>)
    2466:	f7ff fc61 	bl	1d2c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    246a:	4b18      	ldr	r3, [pc, #96]	; (24cc <bt_recv+0x158>)
    246c:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    246e:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2470:	b935      	cbnz	r5, 2480 <bt_recv+0x10c>
	net_buf_unref(buf);
    2472:	4620      	mov	r0, r4
    2474:	f006 fe7a 	bl	916c <net_buf_unref>
		return 0;
    2478:	2000      	movs	r0, #0
}
    247a:	b005      	add	sp, #20
    247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    2480:	7832      	ldrb	r2, [r6, #0]
    2482:	682b      	ldr	r3, [r5, #0]
    2484:	2a00      	cmp	r2, #0
    2486:	bf0c      	ite	eq
    2488:	4638      	moveq	r0, r7
    248a:	2000      	movne	r0, #0
    248c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    248e:	686d      	ldr	r5, [r5, #4]
    2490:	e7ee      	b.n	2470 <bt_recv+0xfc>
	if (dh_key_cb) {
    2492:	4d0f      	ldr	r5, [pc, #60]	; (24d0 <bt_recv+0x15c>)
    2494:	682a      	ldr	r2, [r5, #0]
    2496:	2a00      	cmp	r2, #0
    2498:	d0eb      	beq.n	2472 <bt_recv+0xfe>
    249a:	68a0      	ldr	r0, [r4, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    249c:	7803      	ldrb	r3, [r0, #0]
    249e:	b923      	cbnz	r3, 24aa <bt_recv+0x136>
    24a0:	3001      	adds	r0, #1
    24a2:	4790      	blx	r2
		dh_key_cb = NULL;
    24a4:	2300      	movs	r3, #0
    24a6:	602b      	str	r3, [r5, #0]
    24a8:	e7e3      	b.n	2472 <bt_recv+0xfe>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    24aa:	2000      	movs	r0, #0
    24ac:	e7f9      	b.n	24a2 <bt_recv+0x12e>
    24ae:	f7fe f896 	bl	5de <memcpy>
    24b2:	e7ac      	b.n	240e <bt_recv+0x9a>
		net_buf_unref(buf);
    24b4:	f006 fe5a 	bl	916c <net_buf_unref>
		return -EINVAL;
    24b8:	f06f 0015 	mvn.w	r0, #21
    24bc:	e7dd      	b.n	247a <bt_recv+0x106>
    24be:	bf00      	nop
    24c0:	200000d4 	.word	0x200000d4
    24c4:	200029c0 	.word	0x200029c0
    24c8:	2000008c 	.word	0x2000008c
    24cc:	200000cc 	.word	0x200000cc
    24d0:	20000088 	.word	0x20000088

000024d4 <bt_recv_prio>:
{
    24d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    24d6:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    24d8:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    24da:	2b01      	cmp	r3, #1
{
    24dc:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    24de:	d005      	beq.n	24ec <bt_recv_prio+0x18>
		BT_ASSERT(0);
    24e0:	4040      	eors	r0, r0
    24e2:	f380 8811 	msr	BASEPRI, r0
    24e6:	f04f 0004 	mov.w	r0, #4
    24ea:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    24ec:	8983      	ldrh	r3, [r0, #12]
    24ee:	2b01      	cmp	r3, #1
    24f0:	d9f6      	bls.n	24e0 <bt_recv_prio+0xc>
    24f2:	7833      	ldrb	r3, [r6, #0]
    24f4:	3b0e      	subs	r3, #14
    24f6:	2b01      	cmp	r3, #1
    24f8:	d8f2      	bhi.n	24e0 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    24fa:	f100 0508 	add.w	r5, r0, #8
    24fe:	2102      	movs	r1, #2
    2500:	4628      	mov	r0, r5
    2502:	f006 fe74 	bl	91ee <net_buf_simple_pull>
	switch (hdr->evt) {
    2506:	7833      	ldrb	r3, [r6, #0]
    2508:	2b0e      	cmp	r3, #14
    250a:	d005      	beq.n	2518 <bt_recv_prio+0x44>
    250c:	2b0f      	cmp	r3, #15
    250e:	d017      	beq.n	2540 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    2510:	4620      	mov	r0, r4
    2512:	f006 fe2b 	bl	916c <net_buf_unref>
    2516:	e7e3      	b.n	24e0 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    2518:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    251a:	2103      	movs	r1, #3
    251c:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    251e:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2520:	f006 fe65 	bl	91ee <net_buf_simple_pull>
	status = buf->data[0];
    2524:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    2526:	4621      	mov	r1, r4
    2528:	7818      	ldrb	r0, [r3, #0]
    252a:	f7ff fc1d 	bl	1d68 <hci_cmd_done.isra.9>
	if (ncmd) {
    252e:	b116      	cbz	r6, 2536 <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2530:	480a      	ldr	r0, [pc, #40]	; (255c <bt_recv_prio+0x88>)
    2532:	f007 fa79 	bl	9a28 <_impl_k_sem_give>
	net_buf_unref(buf);
    2536:	4620      	mov	r0, r4
    2538:	f006 fe18 	bl	916c <net_buf_unref>
}
    253c:	2000      	movs	r0, #0
    253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2540:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2542:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    2544:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    2546:	4628      	mov	r0, r5
    2548:	f006 fe51 	bl	91ee <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    254c:	4621      	mov	r1, r4
    254e:	7830      	ldrb	r0, [r6, #0]
    2550:	f7ff fc0a 	bl	1d68 <hci_cmd_done.isra.9>
	if (ncmd) {
    2554:	2f00      	cmp	r7, #0
    2556:	d0ee      	beq.n	2536 <bt_recv_prio+0x62>
    2558:	e7ea      	b.n	2530 <bt_recv_prio+0x5c>
    255a:	bf00      	nop
    255c:	200029d8 	.word	0x200029d8

00002560 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2560:	4a08      	ldr	r2, [pc, #32]	; (2584 <bt_hci_driver_register+0x24>)
    2562:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2566:	b93b      	cbnz	r3, 2578 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2568:	6881      	ldr	r1, [r0, #8]
    256a:	b141      	cbz	r1, 257e <bt_hci_driver_register+0x1e>
    256c:	68c1      	ldr	r1, [r0, #12]
    256e:	b131      	cbz	r1, 257e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2570:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    2574:	4618      	mov	r0, r3
    2576:	4770      	bx	lr
		return -EALREADY;
    2578:	f06f 0044 	mvn.w	r0, #68	; 0x44
    257c:	4770      	bx	lr
		return -EINVAL;
    257e:	f06f 0015 	mvn.w	r0, #21
}
    2582:	4770      	bx	lr
    2584:	20002950 	.word	0x20002950

00002588 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2588:	b538      	push	{r3, r4, r5, lr}
    258a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    258c:	4805      	ldr	r0, [pc, #20]	; (25a4 <bt_buf_get_rx+0x1c>)
    258e:	f006 fdd5 	bl	913c <net_buf_alloc_fixed>
#endif

	if (buf) {
    2592:	4604      	mov	r4, r0
    2594:	b120      	cbz	r0, 25a0 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2596:	2100      	movs	r1, #0
    2598:	3008      	adds	r0, #8
    259a:	f006 fdd5 	bl	9148 <net_buf_simple_reserve>
    259e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    25a0:	4620      	mov	r0, r4
    25a2:	bd38      	pop	{r3, r4, r5, pc}
    25a4:	20002c5c 	.word	0x20002c5c

000025a8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    25a8:	b510      	push	{r4, lr}
    25aa:	4601      	mov	r1, r0
	__asm__ volatile(
    25ac:	f04f 0320 	mov.w	r3, #32
    25b0:	f3ef 8011 	mrs	r0, BASEPRI
    25b4:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    25b8:	4a0b      	ldr	r2, [pc, #44]	; (25e8 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    25ba:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    25bc:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    25c0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    25c4:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    25c8:	b924      	cbnz	r4, 25d4 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    25ca:	2001      	movs	r0, #1
}
    25cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    25d0:	f7ff bfda 	b.w	2588 <bt_buf_get_rx>
    25d4:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    25d6:	f104 0008 	add.w	r0, r4, #8
    25da:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    25dc:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    25de:	4619      	mov	r1, r3
    25e0:	f006 fdb2 	bl	9148 <net_buf_simple_reserve>
}
    25e4:	4620      	mov	r0, r4
    25e6:	bd10      	pop	{r4, pc}
    25e8:	20002950 	.word	0x20002950

000025ec <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    25ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    25ee:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    25f0:	1dc3      	adds	r3, r0, #7
    25f2:	f023 0303 	bic.w	r3, r3, #3
{
    25f6:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    25f8:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    25fa:	3a01      	subs	r2, #1
    25fc:	b294      	uxth	r4, r2
{
    25fe:	4605      	mov	r5, r0
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2600:	2204      	movs	r2, #4
    2602:	2100      	movs	r1, #0
    2604:	fb06 0004 	mla	r0, r6, r4, r0
    2608:	f7fe f816 	bl	638 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    260c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2610:	3c01      	subs	r4, #1
    2612:	b2a4      	uxth	r4, r4
    2614:	42bc      	cmp	r4, r7
    2616:	d101      	bne.n	261c <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    2618:	b003      	add	sp, #12
    261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    261c:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    2620:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2622:	2204      	movs	r2, #4
    2624:	1b80      	subs	r0, r0, r6
    2626:	eb0d 0102 	add.w	r1, sp, r2
    262a:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
    262c:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    262e:	f7fd ffd6 	bl	5de <memcpy>
    2632:	e7ed      	b.n	2610 <mem_init+0x24>

00002634 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2634:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    2636:	6804      	ldr	r4, [r0, #0]
{
    2638:	4606      	mov	r6, r0
	if (*mem_head) {
    263a:	b18c      	cbz	r4, 2660 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    263c:	1de3      	adds	r3, r4, #7
    263e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2642:	2204      	movs	r2, #4
    2644:	4621      	mov	r1, r4
    2646:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    264a:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    264c:	f7fd ffc7 	bl	5de <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2650:	9b01      	ldr	r3, [sp, #4]
    2652:	b123      	cbz	r3, 265e <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2654:	1dda      	adds	r2, r3, #7
    2656:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    265a:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    265c:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
    265e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2660:	4620      	mov	r0, r4
    2662:	b002      	add	sp, #8
    2664:	bd70      	pop	{r4, r5, r6, pc}

00002666 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    2666:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2668:	680c      	ldr	r4, [r1, #0]
{
    266a:	4606      	mov	r6, r0
    266c:	460d      	mov	r5, r1
	if (*mem_head) {
    266e:	b11c      	cbz	r4, 2678 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2670:	1de3      	adds	r3, r4, #7
    2672:	f023 0303 	bic.w	r3, r3, #3
    2676:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2678:	2204      	movs	r2, #4
    267a:	4629      	mov	r1, r5
    267c:	4630      	mov	r0, r6
    267e:	f7fd ffae 	bl	5de <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2682:	1df2      	adds	r2, r6, #7
    2684:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2688:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    268a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    268c:	602e      	str	r6, [r5, #0]
}
    268e:	bd70      	pop	{r4, r5, r6, pc}

00002690 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2690:	fb02 0001 	mla	r0, r2, r1, r0
    2694:	4770      	bx	lr

00002696 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    2696:	1a40      	subs	r0, r0, r1
    2698:	b280      	uxth	r0, r0
}
    269a:	fbb0 f0f2 	udiv	r0, r0, r2
    269e:	4770      	bx	lr

000026a0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    26a0:	b510      	push	{r4, lr}
	src += len;
    26a2:	4411      	add	r1, r2
    26a4:	3801      	subs	r0, #1
	while (len--) {
    26a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26aa:	3a01      	subs	r2, #1
    26ac:	b292      	uxth	r2, r2
    26ae:	429a      	cmp	r2, r3
    26b0:	d100      	bne.n	26b4 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    26b2:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    26b4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    26b8:	f800 4f01 	strb.w	r4, [r0, #1]!
    26bc:	e7f5      	b.n	26aa <mem_rcopy+0xa>

000026be <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    26be:	6010      	str	r0, [r2, #0]
    26c0:	6008      	str	r0, [r1, #0]

	return link;
}
    26c2:	4770      	bx	lr

000026c4 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    26c4:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    26c6:	6814      	ldr	r4, [r2, #0]
    26c8:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    26ca:	6814      	ldr	r4, [r2, #0]
    26cc:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    26ce:	6010      	str	r0, [r2, #0]

	return link;
}
    26d0:	bd10      	pop	{r4, pc}

000026d2 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    26d2:	4288      	cmp	r0, r1
    26d4:	d003      	beq.n	26de <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    26d6:	b11a      	cbz	r2, 26e0 <memq_peek+0xe>
		*mem = head->mem;
    26d8:	6843      	ldr	r3, [r0, #4]
    26da:	6013      	str	r3, [r2, #0]
    26dc:	4770      	bx	lr
		return NULL;
    26de:	2000      	movs	r0, #0
	}

	return head;
}
    26e0:	4770      	bx	lr

000026e2 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    26e2:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    26e4:	4283      	cmp	r3, r0
    26e6:	d007      	beq.n	26f8 <memq_dequeue+0x16>
	if (mem) {
    26e8:	b10a      	cbz	r2, 26ee <memq_dequeue+0xc>
		*mem = head->mem;
    26ea:	6858      	ldr	r0, [r3, #4]
    26ec:	6010      	str	r0, [r2, #0]
	if (!link) {
    26ee:	b10b      	cbz	r3, 26f4 <memq_dequeue+0x12>
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    26f0:	681a      	ldr	r2, [r3, #0]
    26f2:	600a      	str	r2, [r1, #0]

	return link;
}
    26f4:	4618      	mov	r0, r3
    26f6:	4770      	bx	lr
		return NULL;
    26f8:	2300      	movs	r3, #0
    26fa:	e7fb      	b.n	26f4 <memq_dequeue+0x12>

000026fc <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    26fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    2700:	4f11      	ldr	r7, [pc, #68]	; (2748 <mayfly_init+0x4c>)
    2702:	f8df 9048 	ldr.w	r9, [pc, #72]	; 274c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    2706:	2604      	movs	r6, #4
	while (callee_id--) {
    2708:	3e01      	subs	r6, #1
    270a:	b2f6      	uxtb	r6, r6
    270c:	2eff      	cmp	r6, #255	; 0xff
    270e:	d019      	beq.n	2744 <mayfly_init+0x48>
    2710:	b233      	sxth	r3, r6
    2712:	ea4f 0883 	mov.w	r8, r3, lsl #2
    2716:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    271a:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    271c:	2404      	movs	r4, #4
    271e:	f04f 0a0c 	mov.w	sl, #12
    2722:	e00a      	b.n	273a <mayfly_init+0x3e>
    2724:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    2728:	1d0a      	adds	r2, r1, #4
    272a:	eb04 0008 	add.w	r0, r4, r8
    272e:	443a      	add	r2, r7
    2730:	4439      	add	r1, r7
    2732:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    2736:	f7ff ffc2 	bl	26be <memq_init>
		while (caller_id--) {
    273a:	3c01      	subs	r4, #1
    273c:	b2e4      	uxtb	r4, r4
    273e:	2cff      	cmp	r4, #255	; 0xff
    2740:	d1f0      	bne.n	2724 <mayfly_init+0x28>
    2742:	e7e1      	b.n	2708 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    2744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2748:	20000158 	.word	0x20000158
    274c:	200000d8 	.word	0x200000d8

00002750 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2750:	b4f0      	push	{r4, r5, r6, r7}
    2752:	4b12      	ldr	r3, [pc, #72]	; (279c <mayfly_enable+0x4c>)
    2754:	4605      	mov	r5, r0
    2756:	460f      	mov	r7, r1
    2758:	260c      	movs	r6, #12
    275a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    275c:	b172      	cbz	r2, 277c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    275e:	4361      	muls	r1, r4
    2760:	fb06 1400 	mla	r4, r6, r0, r1
    2764:	4423      	add	r3, r4
    2766:	7a59      	ldrb	r1, [r3, #9]
    2768:	7a18      	ldrb	r0, [r3, #8]
    276a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    276c:	bf04      	itt	eq
    276e:	3101      	addeq	r1, #1
    2770:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    2772:	4628      	mov	r0, r5
    2774:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    2776:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    2778:	f006 bbb8 	b.w	8eec <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    277c:	434c      	muls	r4, r1
    277e:	fb06 4400 	mla	r4, r6, r0, r4
    2782:	4423      	add	r3, r4
    2784:	7a9c      	ldrb	r4, [r3, #10]
    2786:	7ada      	ldrb	r2, [r3, #11]
    2788:	42a2      	cmp	r2, r4
    278a:	d104      	bne.n	2796 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    278c:	3201      	adds	r2, #1
    278e:	729a      	strb	r2, [r3, #10]
}
    2790:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    2792:	f006 bbd9 	b.w	8f48 <mayfly_pend>
}
    2796:	bcf0      	pop	{r4, r5, r6, r7}
    2798:	4770      	bx	lr
    279a:	bf00      	nop
    279c:	20000158 	.word	0x20000158

000027a0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    27a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27a2:	4605      	mov	r5, r0
    27a4:	460e      	mov	r6, r1
    27a6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    27a8:	b18a      	cbz	r2, 27ce <mayfly_enqueue+0x2e>
    27aa:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    27ac:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    27ae:	7820      	ldrb	r0, [r4, #0]
    27b0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    27b2:	f010 0703 	ands.w	r7, r0, #3
    27b6:	d029      	beq.n	280c <mayfly_enqueue+0x6c>
		if (chain) {
    27b8:	b303      	cbz	r3, 27fc <mayfly_enqueue+0x5c>
			if (state != 1) {
    27ba:	2f01      	cmp	r7, #1
    27bc:	d039      	beq.n	2832 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    27be:	3201      	adds	r2, #1
    27c0:	b2d2      	uxtb	r2, r2
    27c2:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    27c4:	4631      	mov	r1, r6
    27c6:	4628      	mov	r0, r5
    27c8:	f006 fbbe 	bl	8f48 <mayfly_pend>
    27cc:	e01c      	b.n	2808 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    27ce:	f006 fba9 	bl	8f24 <mayfly_prio_is_equal>
    27d2:	2800      	cmp	r0, #0
    27d4:	d0e9      	beq.n	27aa <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    27d6:	4631      	mov	r1, r6
    27d8:	4628      	mov	r0, r5
    27da:	f006 fb95 	bl	8f08 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    27de:	2800      	cmp	r0, #0
    27e0:	d0e3      	beq.n	27aa <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    27e2:	2330      	movs	r3, #48	; 0x30
    27e4:	220c      	movs	r2, #12
    27e6:	4373      	muls	r3, r6
    27e8:	fb02 3305 	mla	r3, r2, r5, r3
    27ec:	4a12      	ldr	r2, [pc, #72]	; (2838 <mayfly_enqueue+0x98>)
    27ee:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    27f0:	7a93      	ldrb	r3, [r2, #10]
    27f2:	7ad2      	ldrb	r2, [r2, #11]
    27f4:	1a9b      	subs	r3, r3, r2
    27f6:	bf18      	it	ne
    27f8:	2301      	movne	r3, #1
    27fa:	e7d7      	b.n	27ac <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    27fc:	3202      	adds	r2, #2
    27fe:	b2d2      	uxtb	r2, r2
    2800:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    2802:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    2806:	4798      	blx	r3
		return 0;
    2808:	2000      	movs	r0, #0

	return 0;
}
    280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    280c:	2b00      	cmp	r3, #0
    280e:	d0f8      	beq.n	2802 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    2810:	3201      	adds	r2, #1
    2812:	b2d2      	uxtb	r2, r2
    2814:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    2816:	2304      	movs	r3, #4
    2818:	2230      	movs	r2, #48	; 0x30
    281a:	fb12 3206 	smlabb	r2, r2, r6, r3
    281e:	230c      	movs	r3, #12
    2820:	fb13 2305 	smlabb	r3, r3, r5, r2
    2824:	4a04      	ldr	r2, [pc, #16]	; (2838 <mayfly_enqueue+0x98>)
    2826:	6860      	ldr	r0, [r4, #4]
    2828:	441a      	add	r2, r3
    282a:	4621      	mov	r1, r4
    282c:	f7ff ff4a 	bl	26c4 <memq_enqueue>
    2830:	e7c8      	b.n	27c4 <mayfly_enqueue+0x24>
			return 1;
    2832:	4638      	mov	r0, r7
    2834:	e7e9      	b.n	280a <mayfly_enqueue+0x6a>
    2836:	bf00      	nop
    2838:	20000158 	.word	0x20000158

0000283c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2840:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2844:	b089      	sub	sp, #36	; 0x24
    2846:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    2848:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    284c:	4e43      	ldr	r6, [pc, #268]	; (295c <mayfly_run+0x120>)
    284e:	9304      	str	r3, [sp, #16]
{
    2850:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    2852:	2404      	movs	r4, #4
	u8_t disable = 0;
    2854:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    2858:	3c01      	subs	r4, #1
    285a:	b2e4      	uxtb	r4, r4
    285c:	2cff      	cmp	r4, #255	; 0xff
    285e:	d10b      	bne.n	2878 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2860:	9b01      	ldr	r3, [sp, #4]
    2862:	2b00      	cmp	r3, #0
    2864:	d072      	beq.n	294c <mayfly_run+0x110>
    2866:	f1b8 0f00 	cmp.w	r8, #0
    286a:	d16f      	bne.n	294c <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    286c:	4642      	mov	r2, r8
    286e:	4629      	mov	r1, r5
    2870:	4628      	mov	r0, r5
    2872:	f006 fb3b 	bl	8eec <mayfly_enable_cb>
    2876:	e069      	b.n	294c <mayfly_run+0x110>
		struct mayfly *m = 0;
    2878:	f10d 0b20 	add.w	fp, sp, #32
    287c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    287e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    2880:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    2884:	f04f 0930 	mov.w	r9, #48	; 0x30
    2888:	fb07 f304 	mul.w	r3, r7, r4
    288c:	fb09 3005 	mla	r0, r9, r5, r3
    2890:	1831      	adds	r1, r6, r0
    2892:	465a      	mov	r2, fp
    2894:	6849      	ldr	r1, [r1, #4]
    2896:	5830      	ldr	r0, [r6, r0]
    2898:	9302      	str	r3, [sp, #8]
    289a:	f7ff ff1a 	bl	26d2 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    289e:	9b04      	ldr	r3, [sp, #16]
    28a0:	fb17 3704 	smlabb	r7, r7, r4, r3
    28a4:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    28a6:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    28a8:	9303      	str	r3, [sp, #12]
		while (link) {
    28aa:	f1ba 0f00 	cmp.w	sl, #0
    28ae:	d032      	beq.n	2916 <mayfly_run+0xda>
			req = m->_req;
    28b0:	9b07      	ldr	r3, [sp, #28]
    28b2:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    28b4:	785a      	ldrb	r2, [r3, #1]
    28b6:	1abf      	subs	r7, r7, r2
    28b8:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    28bc:	2f01      	cmp	r7, #1
    28be:	d104      	bne.n	28ca <mayfly_run+0x8e>
				m->_ack--;
    28c0:	3a01      	subs	r2, #1
    28c2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    28c4:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    28c8:	4790      	blx	r2
			req = m->_req;
    28ca:	9a07      	ldr	r2, [sp, #28]
    28cc:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    28ce:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    28d0:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    28d2:	1a9a      	subs	r2, r3, r2
    28d4:	f002 0203 	and.w	r2, r2, #3
    28d8:	2a01      	cmp	r2, #1
    28da:	9305      	str	r3, [sp, #20]
    28dc:	d00d      	beq.n	28fa <mayfly_run+0xbe>
				memq_dequeue(mft[callee_id][caller_id].tail,
    28de:	9b02      	ldr	r3, [sp, #8]
    28e0:	9903      	ldr	r1, [sp, #12]
    28e2:	fb09 3005 	mla	r0, r9, r5, r3
    28e6:	4430      	add	r0, r6
    28e8:	2200      	movs	r2, #0
    28ea:	6840      	ldr	r0, [r0, #4]
    28ec:	f7ff fef9 	bl	26e2 <memq_dequeue>
				m->_link = link;
    28f0:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    28f2:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    28f4:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    28f8:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    28fa:	9b02      	ldr	r3, [sp, #8]
    28fc:	fb09 3305 	mla	r3, r9, r5, r3
    2900:	18f1      	adds	r1, r6, r3
    2902:	465a      	mov	r2, fp
    2904:	6849      	ldr	r1, [r1, #4]
    2906:	58f0      	ldr	r0, [r6, r3]
    2908:	f7ff fee3 	bl	26d2 <memq_peek>
			if (state == 1) {
    290c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    290e:	4682      	mov	sl, r0
			if (state == 1) {
    2910:	d1cb      	bne.n	28aa <mayfly_run+0x6e>
				if (caller_id || link) {
    2912:	b9bc      	cbnz	r4, 2944 <mayfly_run+0x108>
    2914:	b9b0      	cbnz	r0, 2944 <mayfly_run+0x108>
		if (mft[callee_id][caller_id].disable_req !=
    2916:	2230      	movs	r2, #48	; 0x30
    2918:	230c      	movs	r3, #12
    291a:	436a      	muls	r2, r5
    291c:	fb03 2204 	mla	r2, r3, r4, r2
    2920:	4432      	add	r2, r6
    2922:	7a91      	ldrb	r1, [r2, #10]
    2924:	7ad0      	ldrb	r0, [r2, #11]
    2926:	4288      	cmp	r0, r1
    2928:	d113      	bne.n	2952 <mayfly_run+0x116>
		if (mft[callee_id][caller_id].enable_req !=
    292a:	2230      	movs	r2, #48	; 0x30
    292c:	436a      	muls	r2, r5
    292e:	fb03 2304 	mla	r3, r3, r4, r2
    2932:	4433      	add	r3, r6
    2934:	7a1a      	ldrb	r2, [r3, #8]
    2936:	7a59      	ldrb	r1, [r3, #9]
    2938:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    293a:	bf1c      	itt	ne
    293c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    293e:	f04f 0801 	movne.w	r8, #1
    2942:	e789      	b.n	2858 <mayfly_run+0x1c>
					mayfly_pend(callee_id, callee_id);
    2944:	4629      	mov	r1, r5
    2946:	4628      	mov	r0, r5
    2948:	f006 fafe 	bl	8f48 <mayfly_pend>
	}
}
    294c:	b009      	add	sp, #36	; 0x24
    294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    2952:	72d1      	strb	r1, [r2, #11]
			disable = 1;
    2954:	2201      	movs	r2, #1
    2956:	9201      	str	r2, [sp, #4]
    2958:	e7e7      	b.n	292a <mayfly_run+0xee>
    295a:	bf00      	nop
    295c:	20000158 	.word	0x20000158

00002960 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2960:	b510      	push	{r4, lr}
    2962:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    2964:	2000      	movs	r0, #0

	while (octets_len--) {
    2966:	3901      	subs	r1, #1
    2968:	b2c9      	uxtb	r1, r1
    296a:	29ff      	cmp	r1, #255	; 0xff
    296c:	d100      	bne.n	2970 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    296e:	bd10      	pop	{r4, pc}
		bite = *octets;
    2970:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2974:	2b00      	cmp	r3, #0
    2976:	d0f6      	beq.n	2966 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2978:	1e5c      	subs	r4, r3, #1
			one_count++;
    297a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    297c:	4023      	ands	r3, r4
			one_count++;
    297e:	b2c0      	uxtb	r0, r0
    2980:	e7f8      	b.n	2974 <util_ones_count_get+0x14>

00002982 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    2982:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2984:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
    2986:	6804      	ldr	r4, [r0, #0]
{
    2988:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
    298a:	4613      	mov	r3, r2
	current = previous;
	total = 0;
    298c:	2000      	movs	r0, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    298e:	2aff      	cmp	r2, #255	; 0xff
    2990:	d101      	bne.n	2996 <ticker_dequeue+0x14>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2992:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    2994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2996:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    299a:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
    299e:	428a      	cmp	r2, r1
    29a0:	f8d7 c008 	ldr.w	ip, [r7, #8]
    29a4:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
    29a8:	4460      	add	r0, ip
    29aa:	d002      	beq.n	29b2 <ticker_dequeue+0x30>
    29ac:	4613      	mov	r3, r2
    29ae:	462a      	mov	r2, r5
    29b0:	e7ed      	b.n	298e <ticker_dequeue+0xc>
	if (previous == current) {
    29b2:	4293      	cmp	r3, r2
    29b4:	d100      	bne.n	29b8 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
    29b6:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
    29b8:	b21b      	sxth	r3, r3
    29ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29be:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
    29c2:	783b      	ldrb	r3, [r7, #0]
    29c4:	2bff      	cmp	r3, #255	; 0xff
    29c6:	d0e5      	beq.n	2994 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
    29c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29cc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    29d0:	68a3      	ldr	r3, [r4, #8]
    29d2:	4463      	add	r3, ip
    29d4:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
    29d6:	e7dd      	b.n	2994 <ticker_dequeue+0x12>

000029d8 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    29d8:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    29da:	1a55      	subs	r5, r2, r1
    29dc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    29e0:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    29e2:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    29e4:	d109      	bne.n	29fa <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    29e6:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    29ea:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    29ec:	42a2      	cmp	r2, r4
    29ee:	d90e      	bls.n	2a0e <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    29f0:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    29f2:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    29f4:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    29f6:	6144      	str	r4, [r0, #20]
}
    29f8:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    29fa:	1a8a      	subs	r2, r1, r2
    29fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2a00:	4293      	cmp	r3, r2
    2a02:	d901      	bls.n	2a08 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    2a04:	1a9a      	subs	r2, r3, r2
    2a06:	e7f1      	b.n	29ec <ticks_to_expire_prep+0x14>
    2a08:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2a0a:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    2a0c:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    2a0e:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    2a10:	2200      	movs	r2, #0
    2a12:	e7ef      	b.n	29f4 <ticks_to_expire_prep+0x1c>

00002a14 <ticker_job_op_cb>:
{
    2a14:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2a16:	2200      	movs	r2, #0
    2a18:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2a1c:	6259      	str	r1, [r3, #36]	; 0x24
{
    2a1e:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2a20:	b10a      	cbz	r2, 2a26 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2a24:	4710      	bx	r2
}
    2a26:	4770      	bx	lr

00002a28 <ticker_worker>:
{
    2a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2a2c:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    2a2e:	2301      	movs	r3, #1
{
    2a30:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    2a32:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2a34:	b91d      	cbnz	r5, 2a3e <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    2a36:	7f43      	ldrb	r3, [r0, #29]
    2a38:	2bff      	cmp	r3, #255	; 0xff
    2a3a:	d102      	bne.n	2a42 <ticker_worker+0x1a>
		instance->worker_trigger = 0;
    2a3c:	77c5      	strb	r5, [r0, #31]
}
    2a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2a42:	f005 fdfb 	bl	863c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a46:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2a48:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2a4a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a4e:	1bc7      	subs	r7, r0, r7
    2a50:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    2a54:	2eff      	cmp	r6, #255	; 0xff
    2a56:	d006      	beq.n	2a66 <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
    2a58:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2a5c:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2a60:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2a62:	429f      	cmp	r7, r3
    2a64:	d218      	bcs.n	2a98 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2a66:	7aa2      	ldrb	r2, [r4, #10]
    2a68:	7ae3      	ldrb	r3, [r4, #11]
    2a6a:	4293      	cmp	r3, r2
    2a6c:	d105      	bne.n	2a7a <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
    2a6e:	3301      	adds	r3, #1
    2a70:	b2db      	uxtb	r3, r3
			last = 0;
    2a72:	2b02      	cmp	r3, #2
    2a74:	bf08      	it	eq
    2a76:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2a78:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2a7a:	7ae3      	ldrb	r3, [r4, #11]
    2a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a80:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2a82:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a84:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    2a86:	2300      	movs	r3, #0
    2a88:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a8a:	46ac      	mov	ip, r5
    2a8c:	4623      	mov	r3, r4
    2a8e:	2104      	movs	r1, #4
    2a90:	2003      	movs	r0, #3
}
    2a92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2a96:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    2a98:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    2a9a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2a9c:	788a      	ldrb	r2, [r1, #2]
    2a9e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2aa0:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2aa4:	1a9b      	subs	r3, r3, r2
    2aa6:	b2db      	uxtb	r3, r3
    2aa8:	2b01      	cmp	r3, #1
    2aaa:	d1d3      	bne.n	2a54 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    2aac:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    2ab0:	3a01      	subs	r2, #1
    2ab2:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2ab4:	f1b9 0f00 	cmp.w	r9, #0
    2ab8:	d0cc      	beq.n	2a54 <ticker_worker+0x2c>
					   ticks_expired -
    2aba:	6948      	ldr	r0, [r1, #20]
    2abc:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    2abe:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2ac0:	1a28      	subs	r0, r5, r0
    2ac2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    2ac4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ac8:	690b      	ldr	r3, [r1, #16]
    2aca:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2acc:	47c8      	blx	r9
    2ace:	e7c1      	b.n	2a54 <ticker_worker+0x2c>

00002ad0 <ticker_job>:
{
    2ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2ad4:	7fc2      	ldrb	r2, [r0, #31]
{
    2ad6:	b093      	sub	sp, #76	; 0x4c
    2ad8:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    2ada:	2a00      	cmp	r2, #0
    2adc:	f040 83a8 	bne.w	3230 <ticker_job+0x760>
	ticks_previous = instance->ticks_current;
    2ae0:	6943      	ldr	r3, [r0, #20]
    2ae2:	9304      	str	r3, [sp, #16]
	instance->job_guard = 1;
    2ae4:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2ae6:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    2ae8:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2aea:	7ac0      	ldrb	r0, [r0, #11]
    2aec:	4298      	cmp	r0, r3
    2aee:	f000 808c 	beq.w	2c0a <ticker_job+0x13a>
		first = instance->ticks_elapsed_first + 1;
    2af2:	440b      	add	r3, r1
    2af4:	b2db      	uxtb	r3, r3
			first = 0;
    2af6:	2b02      	cmp	r3, #2
    2af8:	bf08      	it	eq
    2afa:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2afc:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    2b00:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    2b04:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    2b06:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    2b0a:	9b04      	ldr	r3, [sp, #16]
    2b0c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    2b0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b12:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    2b16:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2b1a:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    2b1c:	f8db 3000 	ldr.w	r3, [fp]
    2b20:	9305      	str	r3, [sp, #20]
	users = &instance->user[0];
    2b22:	f8db 3004 	ldr.w	r3, [fp, #4]
    2b26:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
    2b28:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2b2c:	9302      	str	r3, [sp, #8]
	pending = 0;
    2b2e:	2300      	movs	r3, #0
    2b30:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    2b32:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    2b36:	9b02      	ldr	r3, [sp, #8]
    2b38:	3b01      	subs	r3, #1
    2b3a:	b2db      	uxtb	r3, r3
    2b3c:	2bff      	cmp	r3, #255	; 0xff
    2b3e:	9302      	str	r3, [sp, #8]
    2b40:	d166      	bne.n	2c10 <ticker_job+0x140>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2b42:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    2b46:	9a03      	ldr	r2, [sp, #12]
    2b48:	1a9b      	subs	r3, r3, r2
    2b4a:	bf18      	it	ne
    2b4c:	2301      	movne	r3, #1
    2b4e:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    2b50:	9b01      	ldr	r3, [sp, #4]
    2b52:	b1cb      	cbz	r3, 2b88 <ticker_job+0xb8>
    2b54:	f8db 9000 	ldr.w	r9, [fp]
	ticks_expired = 0;
    2b58:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    2b5a:	f89b 501d 	ldrb.w	r5, [fp, #29]
    2b5e:	2dff      	cmp	r5, #255	; 0xff
    2b60:	d00b      	beq.n	2b7a <ticker_job+0xaa>
		ticker = &node[id_expired];
    2b62:	b22e      	sxth	r6, r5
    2b64:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2b68:	eb09 04c6 	add.w	r4, r9, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2b6c:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2b6e:	4543      	cmp	r3, r8
    2b70:	f240 8132 	bls.w	2dd8 <ticker_job+0x308>
			ticker->ticks_to_expire -= ticks_elapsed;
    2b74:	eba3 0308 	sub.w	r3, r3, r8
    2b78:	60a3      	str	r3, [r4, #8]
			flag_compare_update = 1;
    2b7a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    2b7e:	9903      	ldr	r1, [sp, #12]
    2b80:	42a9      	cmp	r1, r5
    2b82:	bf18      	it	ne
    2b84:	4613      	movne	r3, r2
    2b86:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    2b88:	f8db 3000 	ldr.w	r3, [fp]
    2b8c:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    2b8e:	f8db 3004 	ldr.w	r3, [fp, #4]
    2b92:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
    2b94:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2b98:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2b9a:	9b01      	ldr	r3, [sp, #4]
    2b9c:	3b01      	subs	r3, #1
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2bff      	cmp	r3, #255	; 0xff
    2ba2:	9301      	str	r3, [sp, #4]
    2ba4:	f040 8168 	bne.w	2e78 <ticker_job+0x3a8>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2ba8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2bac:	9a03      	ldr	r2, [sp, #12]
    2bae:	4293      	cmp	r3, r2
	if (!pending) {
    2bb0:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    2bb2:	f040 8332 	bne.w	321a <ticker_job+0x74a>
	if (!pending) {
    2bb6:	b94b      	cbnz	r3, 2bcc <ticker_job+0xfc>
	users = &instance->user[0];
    2bb8:	f8db 3004 	ldr.w	r3, [fp, #4]
	count_user = instance->count_user;
    2bbc:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    2bc0:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2bc2:	3c01      	subs	r4, #1
    2bc4:	b2e4      	uxtb	r4, r4
    2bc6:	2cff      	cmp	r4, #255	; 0xff
    2bc8:	f040 829c 	bne.w	3104 <ticker_job+0x634>
	instance->job_guard = 0;
    2bcc:	2300      	movs	r3, #0
    2bce:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    2bd2:	9b02      	ldr	r3, [sp, #8]
    2bd4:	b14b      	cbz	r3, 2bea <ticker_job+0x11a>
	if (instance->ticker_id_head == TICKER_NULL) {
    2bd6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2bda:	2bff      	cmp	r3, #255	; 0xff
    2bdc:	f040 82e1 	bne.w	31a2 <ticker_job+0x6d2>
		if (cntr_stop() == 0) {
    2be0:	f005 fd14 	bl	860c <cntr_stop>
    2be4:	b908      	cbnz	r0, 2bea <ticker_job+0x11a>
			instance->ticks_slot_previous = 0;
    2be6:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    2bea:	f89b 301f 	ldrb.w	r3, [fp, #31]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	f000 831e 	beq.w	3230 <ticker_job+0x760>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2bf4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2bf8:	465b      	mov	r3, fp
    2bfa:	2201      	movs	r2, #1
    2bfc:	2103      	movs	r1, #3
    2bfe:	2004      	movs	r0, #4
    2c00:	46a4      	mov	ip, r4
}
    2c02:	b013      	add	sp, #76	; 0x4c
    2c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2c08:	4760      	bx	ip
		flag_elapsed = 0;
    2c0a:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    2c0c:	4690      	mov	r8, r2
    2c0e:	e782      	b.n	2b16 <ticker_job+0x46>
		user = &users[count_user];
    2c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c12:	9a02      	ldr	r2, [sp, #8]
    2c14:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    2c1c:	78f9      	ldrb	r1, [r7, #3]
    2c1e:	78be      	ldrb	r6, [r7, #2]
    2c20:	428e      	cmp	r6, r1
    2c22:	d088      	beq.n	2b36 <ticker_job+0x66>
			user_op = &user_ops[user->middle];
    2c24:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    2c26:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    2c28:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    2c2c:	0112      	lsls	r2, r2, #4
    2c2e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    2c30:	1c73      	adds	r3, r6, #1
    2c32:	b2db      	uxtb	r3, r3
				middle = 0;
    2c34:	4298      	cmp	r0, r3
    2c36:	bf08      	it	eq
    2c38:	2300      	moveq	r3, #0
			user->middle = middle;
    2c3a:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2c3c:	9b06      	ldr	r3, [sp, #24]
    2c3e:	5c9a      	ldrb	r2, [r3, r2]
    2c40:	2a03      	cmp	r2, #3
    2c42:	d9ec      	bls.n	2c1e <ticker_job+0x14e>
			ticker = &node[user_op->id];
    2c44:	7869      	ldrb	r1, [r5, #1]
    2c46:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    2c4a:	930a      	str	r3, [sp, #40]	; 0x28
    2c4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c4e:	9b05      	ldr	r3, [sp, #20]
    2c50:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2c54:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
    2c56:	7863      	ldrb	r3, [r4, #1]
    2c58:	78a0      	ldrb	r0, [r4, #2]
    2c5a:	eba3 0300 	sub.w	r3, r3, r0
    2c5e:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2c60:	d80a      	bhi.n	2c78 <ticker_job+0x1a8>
    2c62:	b14b      	cbz	r3, 2c78 <ticker_job+0x1a8>
			    (state == 0) ||
    2c64:	2a04      	cmp	r2, #4
    2c66:	d10c      	bne.n	2c82 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2c68:	686a      	ldr	r2, [r5, #4]
    2c6a:	b952      	cbnz	r2, 2c82 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2c6c:	68aa      	ldr	r2, [r5, #8]
    2c6e:	b942      	cbnz	r2, 2c82 <ticker_job+0x1b2>
			     (user_op->params.update.lazy == 0) &&
    2c70:	68ea      	ldr	r2, [r5, #12]
    2c72:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    2c76:	d104      	bne.n	2c82 <ticker_job+0x1b2>
				ticker_job_op_cb(user_op,
    2c78:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2c7a:	4628      	mov	r0, r5
    2c7c:	f7ff feca 	bl	2a14 <ticker_job_op_cb>
    2c80:	e7cc      	b.n	2c1c <ticker_job+0x14c>
			if (state == 1) {
    2c82:	2b01      	cmp	r3, #1
    2c84:	f040 809d 	bne.w	2dc2 <ticker_job+0x2f2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2c88:	4658      	mov	r0, fp
    2c8a:	f7ff fe7a 	bl	2982 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2c8e:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2c90:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2c92:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2c94:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2c96:	f040 8086 	bne.w	2da6 <ticker_job+0x2d6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2c9a:	f8db 3014 	ldr.w	r3, [fp, #20]
    2c9e:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2ca0:	f005 fccc 	bl	863c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ca4:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2ca6:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ca8:	1ac3      	subs	r3, r0, r3
    2caa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2cae:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    2cb0:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2cb2:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2cb4:	bf9e      	ittt	ls
    2cb6:	6962      	ldrls	r2, [r4, #20]
    2cb8:	1b92      	subls	r2, r2, r6
    2cba:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    2cbc:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2cbe:	bf96      	itet	ls
    2cc0:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    2cc2:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    2cc4:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    2cc6:	2a00      	cmp	r2, #0
    2cc8:	d049      	beq.n	2d5e <ticker_job+0x28e>
	    (user_op->params.update.lazy != 0)) {
    2cca:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    2ccc:	2900      	cmp	r1, #0
    2cce:	d046      	beq.n	2d5e <ticker_job+0x28e>
		user_op->params.update.lazy--;
    2cd0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    2cd4:	fa1f fc8c 	uxth.w	ip, ip
    2cd8:	f8a5 c00c 	strh.w	ip, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2cdc:	429a      	cmp	r2, r3
    2cde:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    2ce2:	d201      	bcs.n	2ce8 <ticker_job+0x218>
    2ce4:	45f4      	cmp	ip, lr
    2ce6:	d302      	bcc.n	2cee <ticker_job+0x21e>
		ticker->remainder_current -= 30517578UL;
    2ce8:	f8df 9274 	ldr.w	r9, [pc, #628]	; 2f60 <ticker_job+0x490>
    2cec:	e031      	b.n	2d52 <ticker_job+0x282>
	if ((ticker->remainder_current >= BIT(31)) ||
    2cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2cf0:	4e99      	ldr	r6, [pc, #612]	; (2f58 <ticker_job+0x488>)
    2cf2:	489a      	ldr	r0, [pc, #616]	; (2f5c <ticker_job+0x48c>)
    2cf4:	198e      	adds	r6, r1, r6
    2cf6:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    2cf8:	bf81      	itttt	hi
    2cfa:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    2cfe:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    2d02:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    2d06:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2d08:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
    2d0c:	bf8c      	ite	hi
    2d0e:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    2d12:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    2d16:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    2d18:	4491      	add	r9, r2
			ticker->lazy_current--;
    2d1a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    2d1e:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2d20:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    2d24:	f8a4 e01e 	strh.w	lr, [r4, #30]
    2d28:	e7d8      	b.n	2cdc <ticker_job+0x20c>
	ticker->remainder_current += ticker->remainder_periodic;
    2d2a:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
    2d2e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2d30:	4989      	ldr	r1, [pc, #548]	; (2f58 <ticker_job+0x488>)
    2d32:	488a      	ldr	r0, [pc, #552]	; (2f5c <ticker_job+0x48c>)
    2d34:	1871      	adds	r1, r6, r1
    2d36:	4281      	cmp	r1, r0
	return 0;
    2d38:	bf8e      	itee	hi
    2d3a:	2100      	movhi	r1, #0
		return 1;
    2d3c:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    2d3e:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    2d40:	4411      	add	r1, r2
			ticker->lazy_current++;
    2d42:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
    2d46:	bf8c      	ite	hi
    2d48:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2d4a:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    2d4c:	440b      	add	r3, r1
			ticker->lazy_current++;
    2d4e:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2d52:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    2d56:	45f4      	cmp	ip, lr
    2d58:	d8e7      	bhi.n	2d2a <ticker_job+0x25a>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2d5a:	f8a4 c01c 	strh.w	ip, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    2d5e:	88aa      	ldrh	r2, [r5, #4]
	ticker->ticks_to_expire = ticks_to_expire +
    2d60:	4413      	add	r3, r2
    2d62:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    2d64:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    2d66:	6963      	ldr	r3, [r4, #20]
    2d68:	4413      	add	r3, r2
    2d6a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2d6c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    2d70:	4620      	mov	r0, r4
    2d72:	f7ff fe31 	bl	29d8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2d76:	69a2      	ldr	r2, [r4, #24]
    2d78:	892b      	ldrh	r3, [r5, #8]
    2d7a:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2d7c:	896a      	ldrh	r2, [r5, #10]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2d7e:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2d80:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2d82:	bf8c      	ite	hi
    2d84:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    2d86:	2300      	movls	r3, #0
    2d88:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2d8a:	7bab      	ldrb	r3, [r5, #14]
    2d8c:	b103      	cbz	r3, 2d90 <ticker_job+0x2c0>
		ticker->force = user_op->params.update.force;
    2d8e:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2d90:	9b05      	ldr	r3, [sp, #20]
    2d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d94:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    2d98:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    2d9a:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    2d9e:	3301      	adds	r3, #1
    2da0:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2da2:	2100      	movs	r1, #0
    2da4:	e769      	b.n	2c7a <ticker_job+0x1aa>
		ticker->req = ticker->ack;
    2da6:	78a3      	ldrb	r3, [r4, #2]
    2da8:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2daa:	786b      	ldrb	r3, [r5, #1]
    2dac:	f89b 201c 	ldrb.w	r2, [fp, #28]
    2db0:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2db2:	bf01      	itttt	eq
    2db4:	23ff      	moveq	r3, #255	; 0xff
    2db6:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2dba:	2300      	moveq	r3, #0
    2dbc:	f8cb 3018 	streq.w	r3, [fp, #24]
    2dc0:	e7ef      	b.n	2da2 <ticker_job+0x2d2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2dc2:	2104      	movs	r1, #4
    2dc4:	465b      	mov	r3, fp
    2dc6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2dca:	2201      	movs	r2, #1
    2dcc:	4608      	mov	r0, r1
    2dce:	47a0      	blx	r4
				pending = 1;
    2dd0:	2301      	movs	r3, #1
				user->middle = prev;
    2dd2:	70be      	strb	r6, [r7, #2]
				pending = 1;
    2dd4:	9307      	str	r3, [sp, #28]
    2dd6:	e6ae      	b.n	2b36 <ticker_job+0x66>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    2dd8:	f8db 2018 	ldr.w	r2, [fp, #24]
    2ddc:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    2dde:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
    2de2:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2de4:	bf29      	itett	cs
    2de6:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    2de8:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2dea:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2dee:	2300      	movcs	r3, #0
    2df0:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    2df4:	69a3      	ldr	r3, [r4, #24]
    2df6:	b11b      	cbz	r3, 2e00 <ticker_job+0x330>
			instance->ticker_id_slot_previous = id_expired;
    2df8:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    2dfc:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    2e00:	2200      	movs	r2, #0
    2e02:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    2e04:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
    2e08:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    2e0c:	f8d4 c004 	ldr.w	ip, [r4, #4]
    2e10:	f1bc 0f00 	cmp.w	ip, #0
    2e14:	d02c      	beq.n	2e70 <ticker_job+0x3a0>
    2e16:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    2e18:	f8df e140 	ldr.w	lr, [pc, #320]	; 2f5c <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
    2e1c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
    2e20:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2e22:	494d      	ldr	r1, [pc, #308]	; (2f58 <ticker_job+0x488>)
    2e24:	1859      	adds	r1, r3, r1
    2e26:	4571      	cmp	r1, lr
		ticker->remainder_current -= 30517578UL;
    2e28:	bf9f      	itttt	ls
    2e2a:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    2e2e:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    2e32:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    2e36:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    2e38:	bf92      	itee	ls
    2e3a:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    2e3c:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    2e3e:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e40:	4463      	add	r3, ip
			while (count--) {
    2e42:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    2e46:	441a      	add	r2, r3
			while (count--) {
    2e48:	d2e8      	bcs.n	2e1c <ticker_job+0x34c>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2e4a:	9b04      	ldr	r3, [sp, #16]
			ticker->ticks_to_expire = ticks_to_expire;
    2e4c:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2e4e:	f8db 1014 	ldr.w	r1, [fp, #20]
    2e52:	19da      	adds	r2, r3, r7
    2e54:	4620      	mov	r0, r4
    2e56:	f7ff fdbf 	bl	29d8 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    2e5a:	8ba3      	ldrh	r3, [r4, #28]
    2e5c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    2e5e:	2300      	movs	r3, #0
    2e60:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    2e62:	f809 a036 	strb.w	sl, [r9, r6, lsl #3]
			ticker->req++;
    2e66:	7863      	ldrb	r3, [r4, #1]
    2e68:	3301      	adds	r3, #1
    2e6a:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
    2e6c:	46aa      	mov	sl, r5
    2e6e:	e674      	b.n	2b5a <ticker_job+0x8a>
    2e70:	78a3      	ldrb	r3, [r4, #2]
    2e72:	7063      	strb	r3, [r4, #1]
    2e74:	4655      	mov	r5, sl
    2e76:	e7f9      	b.n	2e6c <ticker_job+0x39c>
		user = &users[count_user];
    2e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2e7a:	9a01      	ldr	r2, [sp, #4]
    2e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e80:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    2e82:	685b      	ldr	r3, [r3, #4]
    2e84:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    2e86:	9b04      	ldr	r3, [sp, #16]
    2e88:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    2e8c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2e90:	d040      	beq.n	2f14 <ticker_job+0x444>
				ticker = &node[id_insert];
    2e92:	fa0f f38a 	sxth.w	r3, sl
    2e96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e9a:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    2e9c:	46d0      	mov	r8, sl
    2e9e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    2ea2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    2ea6:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    2ea8:	f8db 3000 	ldr.w	r3, [fp]
    2eac:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    2eae:	23ff      	movs	r3, #255	; 0xff
    2eb0:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2eb2:	8ba2      	ldrh	r2, [r4, #28]
    2eb4:	8be3      	ldrh	r3, [r4, #30]
    2eb6:	4293      	cmp	r3, r2
    2eb8:	f240 8080 	bls.w	2fbc <ticker_job+0x4ec>
		skip = ticker->lazy_current -
    2ebc:	1a9b      	subs	r3, r3, r2
    2ebe:	b29b      	uxth	r3, r3
		skip = 0;
    2ec0:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    2ec2:	fa0f f388 	sxth.w	r3, r8
    2ec6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2eca:	00db      	lsls	r3, r3, #3
    2ecc:	9311      	str	r3, [sp, #68]	; 0x44
    2ece:	e0c8      	b.n	3062 <ticker_job+0x592>
				user_op = &user_ops[user_ops_first];
    2ed0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    2ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2ed6:	011b      	lsls	r3, r3, #4
    2ed8:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    2eda:	f109 0201 	add.w	r2, r9, #1
    2ede:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    2ee2:	9a04      	ldr	r2, [sp, #16]
    2ee4:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    2ee6:	454a      	cmp	r2, r9
    2ee8:	bf08      	it	eq
    2eea:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    2eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2ef0:	5cd3      	ldrb	r3, [r2, r3]
    2ef2:	2b03      	cmp	r3, #3
    2ef4:	d10e      	bne.n	2f14 <ticker_job+0x444>
				id_insert = user_op->id;
    2ef6:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    2efa:	9b08      	ldr	r3, [sp, #32]
    2efc:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    2f00:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    2f04:	7862      	ldrb	r2, [r4, #1]
    2f06:	78a3      	ldrb	r3, [r4, #2]
    2f08:	429a      	cmp	r2, r3
    2f0a:	d008      	beq.n	2f1e <ticker_job+0x44e>
					ticker_job_op_cb(user_op,
    2f0c:	2101      	movs	r1, #1
    2f0e:	4628      	mov	r0, r5
    2f10:	f7ff fd80 	bl	2a14 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    2f14:	9b04      	ldr	r3, [sp, #16]
    2f16:	789b      	ldrb	r3, [r3, #2]
    2f18:	454b      	cmp	r3, r9
    2f1a:	d1d9      	bne.n	2ed0 <ticker_job+0x400>
    2f1c:	e63d      	b.n	2b9a <ticker_job+0xca>
	ticker->ticks_periodic = start->ticks_periodic;
    2f1e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    2f20:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    2f24:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    2f26:	692b      	ldr	r3, [r5, #16]
    2f28:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    2f2a:	8aab      	ldrh	r3, [r5, #20]
    2f2c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    2f2e:	69ab      	ldr	r3, [r5, #24]
    2f30:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    2f32:	69eb      	ldr	r3, [r5, #28]
    2f34:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    2f36:	6a2b      	ldr	r3, [r5, #32]
    2f38:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    2f3a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    2f3c:	68ab      	ldr	r3, [r5, #8]
    2f3e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    2f40:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    2f42:	686a      	ldr	r2, [r5, #4]
    2f44:	4620      	mov	r0, r4
    2f46:	f7ff fd47 	bl	29d8 <ticks_to_expire_prep>
	ticker->force = 1;
    2f4a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    2f4c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    2f4e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    2f50:	70e3      	strb	r3, [r4, #3]
    2f52:	f04f 0aff 	mov.w	sl, #255	; 0xff
    2f56:	e7a7      	b.n	2ea8 <ticker_job+0x3d8>
    2f58:	ff172b5a 	.word	0xff172b5a
    2f5c:	7f172b59 	.word	0x7f172b59
    2f60:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    2f64:	6860      	ldr	r0, [r4, #4]
    2f66:	2800      	cmp	r0, #0
    2f68:	f000 80c7 	beq.w	30fa <ticker_job+0x62a>
	ticker->remainder_current += ticker->remainder_periodic;
    2f6c:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2f70:	4bb1      	ldr	r3, [pc, #708]	; (3238 <ticker_job+0x768>)
	ticker->remainder_current += ticker->remainder_periodic;
    2f72:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2f74:	49b1      	ldr	r1, [pc, #708]	; (323c <ticker_job+0x76c>)
    2f76:	18d3      	adds	r3, r2, r3
    2f78:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    2f7a:	bf9c      	itt	ls
    2f7c:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    2f80:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2f84:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    2f86:	bf8b      	itete	hi
    2f88:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2f8a:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    2f8e:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    2f90:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2f92:	4403      	add	r3, r0
		return 1;
    2f94:	bf98      	it	ls
    2f96:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2f98:	4413      	add	r3, r2
			ticker->lazy_current++;
    2f9a:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2f9c:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    2f9e:	3201      	adds	r2, #1
    2fa0:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    2fa2:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    2fa4:	4293      	cmp	r3, r2
    2fa6:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    2faa:	bf89      	itett	hi
    2fac:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    2fae:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    2fb0:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    2fb2:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    2fb4:	bf9c      	itt	ls
    2fb6:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    2fb8:	60a1      	strls	r1, [r4, #8]
    2fba:	e052      	b.n	3062 <ticker_job+0x592>
		skip = 0;
    2fbc:	2300      	movs	r3, #0
    2fbe:	e77f      	b.n	2ec0 <ticker_job+0x3f0>
		if (ticker_current->ticks_slot != 0) {
    2fc0:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    2fc2:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    2fc4:	b946      	cbnz	r6, 2fd8 <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
    2fc6:	9f05      	ldr	r7, [sp, #20]
    2fc8:	42b8      	cmp	r0, r7
    2fca:	d200      	bcs.n	2fce <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
    2fcc:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    2fce:	9309      	str	r3, [sp, #36]	; 0x24
    2fd0:	9605      	str	r6, [sp, #20]
    2fd2:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
    2fd6:	e053      	b.n	3080 <ticker_job+0x5b0>
		if (ticker_current->ticks_slot != 0) {
    2fd8:	9306      	str	r3, [sp, #24]
    2fda:	e7f8      	b.n	2fce <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
    2fdc:	b230      	sxth	r0, r6
    2fde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2fe2:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    2fe6:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    2fe8:	68bf      	ldr	r7, [r7, #8]
    2fea:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    2fec:	4577      	cmp	r7, lr
    2fee:	d209      	bcs.n	3004 <ticker_job+0x534>
		if (ticker->ticks_slot) {
    2ff0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    2ff2:	69bf      	ldr	r7, [r7, #24]
    2ff4:	2f00      	cmp	r7, #0
    2ff6:	d154      	bne.n	30a2 <ticker_job+0x5d2>
		ticks_slot -= ticks_to_expire;
    2ff8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    2ffa:	ebae 0e06 	sub.w	lr, lr, r6
		ticker_id_head = ticker->next;
    2ffe:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    3002:	e04c      	b.n	309e <ticker_job+0x5ce>
			return TICKER_NULL;
    3004:	26ff      	movs	r6, #255	; 0xff
    3006:	e04c      	b.n	30a2 <ticker_job+0x5d2>
	while (id_insert !=
    3008:	9b06      	ldr	r3, [sp, #24]
    300a:	4598      	cmp	r8, r3
    300c:	d06a      	beq.n	30e4 <ticker_job+0x614>
		if (id_collide != TICKER_NULL) {
    300e:	9b06      	ldr	r3, [sp, #24]
    3010:	2bff      	cmp	r3, #255	; 0xff
    3012:	d0a7      	beq.n	2f64 <ticker_job+0x494>
    3014:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    3016:	b233      	sxth	r3, r6
    3018:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    301c:	9305      	str	r3, [sp, #20]
    301e:	9a05      	ldr	r2, [sp, #20]
    3020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3022:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    3026:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    3028:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    302a:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    302c:	bf88      	it	hi
    302e:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    3030:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3032:	bf8c      	ite	hi
    3034:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    3036:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    3038:	2a00      	cmp	r2, #0
    303a:	d093      	beq.n	2f64 <ticker_job+0x494>
    303c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    303e:	4293      	cmp	r3, r2
    3040:	d890      	bhi.n	2f64 <ticker_job+0x494>
			    skip_collide <= skip &&
    3042:	78fa      	ldrb	r2, [r7, #3]
    3044:	78e3      	ldrb	r3, [r4, #3]
    3046:	429a      	cmp	r2, r3
    3048:	d28c      	bcs.n	2f64 <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
    304a:	4631      	mov	r1, r6
    304c:	4658      	mov	r0, fp
    304e:	f7ff fc98 	bl	2982 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3052:	78bb      	ldrb	r3, [r7, #2]
    3054:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3056:	9a05      	ldr	r2, [sp, #20]
    3058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    305a:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    305c:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    3060:	46b2      	mov	sl, r6
	ticker_new = &node[id];
    3062:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    3064:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    3068:	f8db 0018 	ldr.w	r0, [fp, #24]
    306c:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    306e:	eb02 0c03 	add.w	ip, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    3072:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    3074:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3078:	f8dc 1008 	ldr.w	r1, [ip, #8]
	previous = current;
    307c:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    307e:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    3080:	2bff      	cmp	r3, #255	; 0xff
    3082:	d006      	beq.n	3092 <ticker_job+0x5c2>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3084:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3088:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
    308c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    308e:	4281      	cmp	r1, r0
    3090:	d896      	bhi.n	2fc0 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
    3092:	f8dc 0018 	ldr.w	r0, [ip, #24]
    3096:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    3098:	eb01 0e00 	add.w	lr, r1, r0
    309c:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    309e:	2eff      	cmp	r6, #255	; 0xff
    30a0:	d19c      	bne.n	2fdc <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
    30a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    30a4:	b128      	cbz	r0, 30b2 <ticker_job+0x5e2>
    30a6:	9805      	ldr	r0, [sp, #20]
    30a8:	4281      	cmp	r1, r0
    30aa:	d3ad      	bcc.n	3008 <ticker_job+0x538>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    30ac:	2eff      	cmp	r6, #255	; 0xff
    30ae:	f040 80bb 	bne.w	3228 <ticker_job+0x758>
		if (previous == current) {
    30b2:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    30b4:	f8cc 1008 	str.w	r1, [ip, #8]
		if (previous == current) {
    30b8:	4283      	cmp	r3, r0
			node[previous].next = id;
    30ba:	bf18      	it	ne
    30bc:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    30c0:	f88c 3000 	strb.w	r3, [ip]
			node[previous].next = id;
    30c4:	bf16      	itet	ne
    30c6:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    30ca:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    30ce:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    30d2:	2bff      	cmp	r3, #255	; 0xff
    30d4:	d006      	beq.n	30e4 <ticker_job+0x614>
			node[current].ticks_to_expire -= ticks_to_expire;
    30d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    30de:	689a      	ldr	r2, [r3, #8]
    30e0:	1a51      	subs	r1, r2, r1
    30e2:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    30e4:	78a3      	ldrb	r3, [r4, #2]
    30e6:	3301      	adds	r3, #1
    30e8:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    30ea:	2100      	movs	r1, #0
			if (user_op) {
    30ec:	2d00      	cmp	r5, #0
    30ee:	f43f aecd 	beq.w	2e8c <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
    30f2:	4628      	mov	r0, r5
    30f4:	f7ff fc8e 	bl	2a14 <ticker_job_op_cb>
    30f8:	e6c8      	b.n	2e8c <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
    30fa:	2101      	movs	r1, #1
    30fc:	e7f6      	b.n	30ec <ticker_job+0x61c>
		flag_compare_update = 1;
    30fe:	2301      	movs	r3, #1
    3100:	9302      	str	r3, [sp, #8]
    3102:	e559      	b.n	2bb8 <ticker_job+0xe8>
		user = &users[count_user];
    3104:	9b01      	ldr	r3, [sp, #4]
    3106:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    310a:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    310c:	786b      	ldrb	r3, [r5, #1]
    310e:	78ea      	ldrb	r2, [r5, #3]
    3110:	429a      	cmp	r2, r3
    3112:	f43f ad56 	beq.w	2bc2 <ticker_job+0xf2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3116:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    311a:	011a      	lsls	r2, r3, #4
    311c:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
    311e:	5cb2      	ldrb	r2, [r6, r2]
    3120:	2a01      	cmp	r2, #1
    3122:	d024      	beq.n	316e <ticker_job+0x69e>
    3124:	2a02      	cmp	r2, #2
    3126:	d129      	bne.n	317c <ticker_job+0x6ac>
		ticker_by_next_slot_get(instance,
    3128:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    312c:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    3130:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
    3134:	f8db c000 	ldr.w	ip, [fp]
    3138:	f8db 1014 	ldr.w	r1, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    313c:	2aff      	cmp	r2, #255	; 0xff
    313e:	d002      	beq.n	3146 <ticker_job+0x676>
    3140:	6807      	ldr	r7, [r0, #0]
    3142:	42b9      	cmp	r1, r7
    3144:	d023      	beq.n	318e <ticker_job+0x6be>
		_ticker_id_head = instance->ticker_id_head;
    3146:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    314a:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0;
    314c:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    314e:	2aff      	cmp	r2, #255	; 0xff
    3150:	d009      	beq.n	3166 <ticker_job+0x696>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3152:	eb02 0882 	add.w	r8, r2, r2, lsl #2
    3156:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
    315a:	f8da 0008 	ldr.w	r0, [sl, #8]
    315e:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    3160:	f8da 0018 	ldr.w	r0, [sl, #24]
    3164:	b1d0      	cbz	r0, 319c <ticker_job+0x6cc>
	*ticker_id_head = _ticker_id_head;
    3166:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    316a:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    316e:	2200      	movs	r2, #0
    3170:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    3172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    3174:	b112      	cbz	r2, 317c <ticker_job+0x6ac>
		fp_op_func(uop->status, uop->op_context);
    3176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3178:	2000      	movs	r0, #0
    317a:	4790      	blx	r2
			first = user->first + 1;
    317c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    317e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3180:	3301      	adds	r3, #1
    3182:	b2db      	uxtb	r3, r3
				first = 0;
    3184:	429a      	cmp	r2, r3
    3186:	bf08      	it	eq
    3188:	2300      	moveq	r3, #0
			user->first = first;
    318a:	706b      	strb	r3, [r5, #1]
    318c:	e7be      	b.n	310c <ticker_job+0x63c>
		ticker = &node[_ticker_id_head];
    318e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    3192:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    3196:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
    319a:	e7d8      	b.n	314e <ticker_job+0x67e>
		_ticker_id_head = ticker->next;
    319c:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
    31a0:	e7d5      	b.n	314e <ticker_job+0x67e>
	if (ticker_id_old_head == TICKER_NULL) {
    31a2:	9b03      	ldr	r3, [sp, #12]
    31a4:	2bff      	cmp	r3, #255	; 0xff
    31a6:	d107      	bne.n	31b8 <ticker_job+0x6e8>
		ticks_current = cntr_cnt_get();
    31a8:	f005 fa48 	bl	863c <cntr_cnt_get>
    31ac:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    31ae:	f005 fa1f 	bl	85f0 <cntr_start>
    31b2:	b908      	cbnz	r0, 31b8 <ticker_job+0x6e8>
			instance->ticks_current = ticks_current;
    31b4:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    31b8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    31bc:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    31c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    31c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    31c8:	260a      	movs	r6, #10
    31ca:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    31cc:	f005 fa36 	bl	863c <cntr_cnt_get>
		cc = instance->ticks_current;
    31d0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    31d4:	1b03      	subs	r3, r0, r4
    31d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    31da:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    31dc:	42ab      	cmp	r3, r5
    31de:	bf2c      	ite	cs
    31e0:	18e4      	addcs	r4, r4, r3
    31e2:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    31e4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    31e8:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    31ea:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    31ee:	4620      	mov	r0, r4
    31f0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    31f2:	f005 fa23 	bl	863c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    31f6:	1bc0      	subs	r0, r0, r7
    31f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31fc:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    31fe:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3200:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3204:	42a0      	cmp	r0, r4
    3206:	f67f acf0 	bls.w	2bea <ticker_job+0x11a>
		LL_ASSERT(i);
    320a:	3e01      	subs	r6, #1
    320c:	d1de      	bne.n	31cc <ticker_job+0x6fc>
    320e:	4040      	eors	r0, r0
    3210:	f380 8811 	msr	BASEPRI, r0
    3214:	f04f 0004 	mov.w	r0, #4
    3218:	df02      	svc	2
	if (!pending) {
    321a:	2b00      	cmp	r3, #0
    321c:	f43f af6f 	beq.w	30fe <ticker_job+0x62e>
	instance->job_guard = 0;
    3220:	2300      	movs	r3, #0
    3222:	f88b 301e 	strb.w	r3, [fp, #30]
    3226:	e4d6      	b.n	2bd6 <ticker_job+0x106>
	while (id_insert !=
    3228:	45b0      	cmp	r8, r6
    322a:	f47f aef4 	bne.w	3016 <ticker_job+0x546>
    322e:	e759      	b.n	30e4 <ticker_job+0x614>
}
    3230:	b013      	add	sp, #76	; 0x4c
    3232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3236:	bf00      	nop
    3238:	ff172b5a 	.word	0xff172b5a
    323c:	7f172b59 	.word	0x7f172b59

00003240 <ticker_init>:
{
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    3242:	4e1c      	ldr	r6, [pc, #112]	; (32b4 <ticker_init+0x74>)
{
    3244:	9f05      	ldr	r7, [sp, #20]
    3246:	f89d 4018 	ldrb.w	r4, [sp, #24]
    324a:	f8dd c01c 	ldr.w	ip, [sp, #28]
	instance->count_node = count_node;
    324e:	252c      	movs	r5, #44	; 0x2c
    3250:	4345      	muls	r5, r0
    3252:	eb06 0e05 	add.w	lr, r6, r5
	instance->node = node;
    3256:	5172      	str	r2, [r6, r5]
	instance->count_node = count_node;
    3258:	f88e 1008 	strb.w	r1, [lr, #8]
	instance->count_user = count_user;
    325c:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    3260:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    3264:	3b01      	subs	r3, #1
    3266:	b2db      	uxtb	r3, r3
    3268:	2bff      	cmp	r3, #255	; 0xff
    326a:	d113      	bne.n	3294 <ticker_init+0x54>
	if (count_op) {
    326c:	bb04      	cbnz	r4, 32b0 <ticker_init+0x70>
	instance->caller_id_get_cb = caller_id_get_cb;
    326e:	232c      	movs	r3, #44	; 0x2c
    3270:	4358      	muls	r0, r3
    3272:	1833      	adds	r3, r6, r0
    3274:	9a08      	ldr	r2, [sp, #32]
    3276:	621a      	str	r2, [r3, #32]
	instance->sched_cb = sched_cb;
    3278:	9a09      	ldr	r2, [sp, #36]	; 0x24
    327a:	625a      	str	r2, [r3, #36]	; 0x24
    327c:	3018      	adds	r0, #24
	instance->trigger_set_cb = trigger_set_cb;
    327e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3280:	629a      	str	r2, [r3, #40]	; 0x28
    3282:	1832      	adds	r2, r6, r0
	instance->ticks_slot_previous = 0;
    3284:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3288:	5034      	str	r4, [r6, r0]
    328a:	8091      	strh	r1, [r2, #4]
	return TICKER_STATUS_SUCCESS;
    328c:	4620      	mov	r0, r4
	instance->ticks_current = 0;
    328e:	615c      	str	r4, [r3, #20]
	instance->ticks_elapsed_first = 0;
    3290:	815c      	strh	r4, [r3, #10]
}
    3292:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    3294:	b21a      	sxth	r2, r3
    3296:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
    329a:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    329e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    32a2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    32a6:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    32a8:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
		count_op -= users[count_user].count_user_op;
    32ac:	b2e4      	uxtb	r4, r4
    32ae:	e7d9      	b.n	3264 <ticker_init+0x24>
		return TICKER_STATUS_FAILURE;
    32b0:	2001      	movs	r0, #1
    32b2:	e7ee      	b.n	3292 <ticker_init+0x52>
    32b4:	20000218 	.word	0x20000218

000032b8 <ticker_trigger>:
	instance = &_instance[instance_index];
    32b8:	4a07      	ldr	r2, [pc, #28]	; (32d8 <ticker_trigger+0x20>)
    32ba:	212c      	movs	r1, #44	; 0x2c
    32bc:	fb00 2301 	mla	r3, r0, r1, r2
{
    32c0:	b410      	push	{r4}
	if (instance->sched_cb) {
    32c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    32c4:	b12c      	cbz	r4, 32d2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    32c6:	46a4      	mov	ip, r4
    32c8:	2201      	movs	r2, #1
    32ca:	2103      	movs	r1, #3
    32cc:	2002      	movs	r0, #2
}
    32ce:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    32d0:	4760      	bx	ip
}
    32d2:	bc10      	pop	{r4}
    32d4:	4770      	bx	lr
    32d6:	bf00      	nop
    32d8:	20000218 	.word	0x20000218

000032dc <ticker_start>:
{
    32dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    32e0:	4c22      	ldr	r4, [pc, #136]	; (336c <ticker_start+0x90>)
    32e2:	272c      	movs	r7, #44	; 0x2c
    32e4:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
    32e8:	b20d      	sxth	r5, r1
    32ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
    32ee:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    32f2:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    32f6:	f89c 4003 	ldrb.w	r4, [ip, #3]
    32fa:	1c66      	adds	r6, r4, #1
    32fc:	b2f6      	uxtb	r6, r6
		last = 0;
    32fe:	42b0      	cmp	r0, r6
    3300:	bf98      	it	ls
    3302:	2600      	movls	r6, #0
	if (last == user->first) {
    3304:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3308:	42b0      	cmp	r0, r6
    330a:	d02d      	beq.n	3368 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    330c:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3310:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3314:	0125      	lsls	r5, r4, #4
    3316:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    3318:	f04f 0e03 	mov.w	lr, #3
    331c:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    3320:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    3322:	9b06      	ldr	r3, [sp, #24]
    3324:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3326:	9b07      	ldr	r3, [sp, #28]
    3328:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    332a:	9b08      	ldr	r3, [sp, #32]
    332c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    332e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3330:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3332:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3336:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    3338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    333a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    333c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    333e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3340:	2302      	movs	r3, #2
    3342:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3346:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    334a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    334c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    334e:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3352:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    3356:	4608      	mov	r0, r1
    3358:	4798      	blx	r3
    335a:	4643      	mov	r3, r8
    335c:	2200      	movs	r2, #0
    335e:	2104      	movs	r1, #4
    3360:	47a8      	blx	r5
	return user_op->status;
    3362:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    3368:	2001      	movs	r0, #1
    336a:	e7fb      	b.n	3364 <ticker_start+0x88>
    336c:	20000218 	.word	0x20000218

00003370 <ticker_update>:
{
    3370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3374:	4c22      	ldr	r4, [pc, #136]	; (3400 <ticker_update+0x90>)
    3376:	272c      	movs	r7, #44	; 0x2c
    3378:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
    337c:	b20d      	sxth	r5, r1
    337e:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3382:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    3386:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    338a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    338e:	1c66      	adds	r6, r4, #1
    3390:	b2f6      	uxtb	r6, r6
		last = 0;
    3392:	42b0      	cmp	r0, r6
    3394:	bf98      	it	ls
    3396:	2600      	movls	r6, #0
	if (last == user->first) {
    3398:	f89c 0001 	ldrb.w	r0, [ip, #1]
    339c:	42b0      	cmp	r0, r6
    339e:	d02d      	beq.n	33fc <ticker_update+0x8c>
	user_op = &user->user_op[user->last];
    33a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    33a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    33a8:	0125      	lsls	r5, r4, #4
    33aa:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    33ac:	f04f 0804 	mov.w	r8, #4
    33b0:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    33b4:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    33b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    33ba:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    33bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    33c0:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    33c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    33c6:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    33c8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    33cc:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    33ce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    33d2:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    33d4:	2302      	movs	r3, #2
    33d6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    33d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    33da:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    33dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    33de:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    33e0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    33e2:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    33e6:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    33ea:	4608      	mov	r0, r1
    33ec:	4798      	blx	r3
    33ee:	464b      	mov	r3, r9
    33f0:	2200      	movs	r2, #0
    33f2:	4641      	mov	r1, r8
    33f4:	47a8      	blx	r5
	return user_op->status;
    33f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    33f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    33fc:	2001      	movs	r0, #1
    33fe:	e7fb      	b.n	33f8 <ticker_update+0x88>
    3400:	20000218 	.word	0x20000218

00003404 <ticker_stop>:
{
    3404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3408:	4c1a      	ldr	r4, [pc, #104]	; (3474 <ticker_stop+0x70>)
    340a:	262c      	movs	r6, #44	; 0x2c
    340c:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
    3410:	b20f      	sxth	r7, r1
    3412:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3416:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    341a:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    341e:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3422:	1c65      	adds	r5, r4, #1
    3424:	b2ed      	uxtb	r5, r5
		last = 0;
    3426:	42a8      	cmp	r0, r5
    3428:	bf98      	it	ls
    342a:	2500      	movls	r5, #0
	if (last == user->first) {
    342c:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3430:	42a8      	cmp	r0, r5
    3432:	d01c      	beq.n	346e <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    3434:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3438:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    343c:	0124      	lsls	r4, r4, #4
    343e:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3440:	f04f 0e05 	mov.w	lr, #5
    3444:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    3448:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    344a:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    344c:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    3450:	9b06      	ldr	r3, [sp, #24]
    3452:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    3454:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3458:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    345c:	4608      	mov	r0, r1
    345e:	4798      	blx	r3
    3460:	4643      	mov	r3, r8
    3462:	2200      	movs	r2, #0
    3464:	2104      	movs	r1, #4
    3466:	47a0      	blx	r4
	return user_op->status;
    3468:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    346e:	2001      	movs	r0, #1
    3470:	e7fb      	b.n	346a <ticker_stop+0x66>
    3472:	bf00      	nop
    3474:	20000218 	.word	0x20000218

00003478 <ticker_next_slot_get>:
{
    3478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    347c:	4c1c      	ldr	r4, [pc, #112]	; (34f0 <ticker_next_slot_get+0x78>)
    347e:	272c      	movs	r7, #44	; 0x2c
    3480:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
    3484:	b20d      	sxth	r5, r1
    3486:	f8d8 0004 	ldr.w	r0, [r8, #4]
    348a:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    348e:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    3492:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3496:	1c66      	adds	r6, r4, #1
    3498:	b2f6      	uxtb	r6, r6
		last = 0;
    349a:	42b0      	cmp	r0, r6
    349c:	bf98      	it	ls
    349e:	2600      	movls	r6, #0
	if (last == user->first) {
    34a0:	f89c 0001 	ldrb.w	r0, [ip, #1]
    34a4:	42b0      	cmp	r0, r6
    34a6:	d021      	beq.n	34ec <ticker_next_slot_get+0x74>
	user_op = &user->user_op[user->last];
    34a8:	f8dc e004 	ldr.w	lr, [ip, #4]
    34ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    34b0:	0125      	lsls	r5, r4, #4
    34b2:	eb0e 0405 	add.w	r4, lr, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    34b6:	2002      	movs	r0, #2
    34b8:	f80e 0005 	strb.w	r0, [lr, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    34bc:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    34c0:	9b06      	ldr	r3, [sp, #24]
    34c2:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    34c4:	9b07      	ldr	r3, [sp, #28]
    34c6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    34c8:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    34ca:	9b08      	ldr	r3, [sp, #32]
	user_op->id = TICKER_NULL;
    34cc:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    34ce:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    34d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    34d2:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    34d6:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    34da:	4608      	mov	r0, r1
    34dc:	4798      	blx	r3
    34de:	4643      	mov	r3, r8
    34e0:	2200      	movs	r2, #0
    34e2:	2104      	movs	r1, #4
    34e4:	47a8      	blx	r5
	return user_op->status;
    34e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    34e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    34ec:	2001      	movs	r0, #1
    34ee:	e7fb      	b.n	34e8 <ticker_next_slot_get+0x70>
    34f0:	20000218 	.word	0x20000218

000034f4 <ticker_job_idle_get>:
{
    34f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    34f8:	4c1a      	ldr	r4, [pc, #104]	; (3564 <ticker_job_idle_get+0x70>)
    34fa:	262c      	movs	r6, #44	; 0x2c
    34fc:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
    3500:	b20f      	sxth	r7, r1
    3502:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3506:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    350a:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    350e:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3512:	1c65      	adds	r5, r4, #1
    3514:	b2ed      	uxtb	r5, r5
		last = 0;
    3516:	42a8      	cmp	r0, r5
    3518:	bf98      	it	ls
    351a:	2500      	movls	r5, #0
	if (last == user->first) {
    351c:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3520:	42a8      	cmp	r0, r5
    3522:	d01c      	beq.n	355e <ticker_job_idle_get+0x6a>
	user_op = &user->user_op[user->last];
    3524:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3528:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    352c:	0124      	lsls	r4, r4, #4
    352e:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3530:	f04f 0e01 	mov.w	lr, #1
    3534:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = TICKER_NULL;
    3538:	20ff      	movs	r0, #255	; 0xff
    353a:	7078      	strb	r0, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    353c:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
    353e:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    3542:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    3544:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3548:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    354c:	4608      	mov	r0, r1
    354e:	4798      	blx	r3
    3550:	4643      	mov	r3, r8
    3552:	2200      	movs	r2, #0
    3554:	2104      	movs	r1, #4
    3556:	47a0      	blx	r4
	return user_op->status;
    3558:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    355e:	2001      	movs	r0, #1
    3560:	e7fb      	b.n	355a <ticker_job_idle_get+0x66>
    3562:	bf00      	nop
    3564:	20000218 	.word	0x20000218

00003568 <ticker_job_sched>:
{
    3568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    356c:	4c08      	ldr	r4, [pc, #32]	; (3590 <ticker_job_sched+0x28>)
    356e:	252c      	movs	r5, #44	; 0x2c
    3570:	fb05 4300 	mla	r3, r5, r0, r4
    3574:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
    3578:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    357a:	4608      	mov	r0, r1
    357c:	4798      	blx	r3
    357e:	fb06 4305 	mla	r3, r6, r5, r4
    3582:	46bc      	mov	ip, r7
    3584:	2200      	movs	r2, #0
    3586:	2104      	movs	r1, #4
}
    3588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    358c:	4760      	bx	ip
    358e:	bf00      	nop
    3590:	20000218 	.word	0x20000218

00003594 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    3594:	f005 b852 	b.w	863c <cntr_cnt_get>

00003598 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3598:	1a40      	subs	r0, r0, r1
}
    359a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    359e:	4770      	bx	lr

000035a0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    35a0:	b508      	push	{r3, lr}
    35a2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    35a4:	2b01      	cmp	r3, #1
{
    35a6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    35a8:	d80e      	bhi.n	35c8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    35aa:	b133      	cbz	r3, 35ba <ll_addr_get+0x1a>
		if (bdaddr) {
    35ac:	b119      	cbz	r1, 35b6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    35ae:	2206      	movs	r2, #6
    35b0:	4906      	ldr	r1, [pc, #24]	; (35cc <ll_addr_get+0x2c>)
    35b2:	f7fd f814 	bl	5de <memcpy>
		}

		return rnd_addr;
    35b6:	4805      	ldr	r0, [pc, #20]	; (35cc <ll_addr_get+0x2c>)
    35b8:	e007      	b.n	35ca <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    35ba:	b119      	cbz	r1, 35c4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    35bc:	2206      	movs	r2, #6
    35be:	4904      	ldr	r1, [pc, #16]	; (35d0 <ll_addr_get+0x30>)
    35c0:	f7fd f80d 	bl	5de <memcpy>
	}

	return pub_addr;
    35c4:	4802      	ldr	r0, [pc, #8]	; (35d0 <ll_addr_get+0x30>)
    35c6:	e000      	b.n	35ca <ll_addr_get+0x2a>
		return NULL;
    35c8:	2000      	movs	r0, #0
}
    35ca:	bd08      	pop	{r3, pc}
    35cc:	20000276 	.word	0x20000276
    35d0:	20000270 	.word	0x20000270

000035d4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    35d4:	b570      	push	{r4, r5, r6, lr}
    35d6:	4606      	mov	r6, r0
    35d8:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    35da:	f004 f9a3 	bl	7924 <ll_adv_is_enabled>
    35de:	4604      	mov	r4, r0
    35e0:	b110      	cbz	r0, 35e8 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    35e2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    35e4:	4620      	mov	r0, r4
    35e6:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    35e8:	f004 f9b0 	bl	794c <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    35ec:	f010 0f06 	tst.w	r0, #6
    35f0:	d1f7      	bne.n	35e2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    35f2:	2206      	movs	r2, #6
    35f4:	4629      	mov	r1, r5
	if (addr_type) {
    35f6:	b11e      	cbz	r6, 3600 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    35f8:	4802      	ldr	r0, [pc, #8]	; (3604 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    35fa:	f7fc fff0 	bl	5de <memcpy>
    35fe:	e7f1      	b.n	35e4 <ll_addr_set+0x10>
    3600:	4801      	ldr	r0, [pc, #4]	; (3608 <ll_addr_set+0x34>)
    3602:	e7fa      	b.n	35fa <ll_addr_set+0x26>
    3604:	20000276 	.word	0x20000276
    3608:	20000270 	.word	0x20000270

0000360c <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    360c:	2300      	movs	r3, #0
    360e:	7003      	strb	r3, [r0, #0]
	*max = 0;
    3610:	700b      	strb	r3, [r1, #0]
}
    3612:	4770      	bx	lr

00003614 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    3614:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3616:	460c      	mov	r4, r1
    3618:	1846      	adds	r6, r0, r1
    361a:	1b35      	subs	r5, r6, r4
	while (len) {
    361c:	b18c      	cbz	r4, 3642 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
    361e:	f7fd fe3d 	bl	129c <sys_rand32_get>

		if (len >= sizeof(v)) {
    3622:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    3624:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    3626:	d907      	bls.n	3638 <bt_rand+0x24>
			memcpy(buf, &v, sizeof(v));
    3628:	2204      	movs	r2, #4
    362a:	eb0d 0102 	add.w	r1, sp, r2
    362e:	4628      	mov	r0, r5
    3630:	f7fc ffd5 	bl	5de <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    3634:	3c04      	subs	r4, #4
    3636:	e7f0      	b.n	361a <bt_rand+0x6>
		} else {
			memcpy(buf, &v, len);
    3638:	4622      	mov	r2, r4
    363a:	a901      	add	r1, sp, #4
    363c:	4628      	mov	r0, r5
    363e:	f7fc ffce 	bl	5de <memcpy>
			break;
		}
	}

	return 0;
}
    3642:	2000      	movs	r0, #0
    3644:	b002      	add	sp, #8
    3646:	bd70      	pop	{r4, r5, r6, pc}

00003648 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    3648:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    364a:	4802      	ldr	r0, [pc, #8]	; (3654 <_hci_driver_init+0xc>)
    364c:	f7fe ff88 	bl	2560 <bt_hci_driver_register>

	return 0;
}
    3650:	2000      	movs	r0, #0
    3652:	bd08      	pop	{r3, pc}
    3654:	0000a910 	.word	0x0000a910

00003658 <hci_driver_send>:
	if (!buf->len) {
    3658:	8983      	ldrh	r3, [r0, #12]
{
    365a:	b510      	push	{r4, lr}
    365c:	4604      	mov	r4, r0
	if (!buf->len) {
    365e:	b15b      	cbz	r3, 3678 <hci_driver_send+0x20>
	switch (type) {
    3660:	7d03      	ldrb	r3, [r0, #20]
    3662:	b94b      	cbnz	r3, 3678 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    3664:	f000 f97a 	bl	395c <hci_cmd_handle>
	if (evt) {
    3668:	b108      	cbz	r0, 366e <hci_driver_send+0x16>
		bt_recv_prio(evt);
    366a:	f7fe ff33 	bl	24d4 <bt_recv_prio>
		net_buf_unref(buf);
    366e:	4620      	mov	r0, r4
    3670:	f005 fd7c 	bl	916c <net_buf_unref>
	return err;
    3674:	2000      	movs	r0, #0
}
    3676:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3678:	f06f 0015 	mvn.w	r0, #21
    367c:	e7fb      	b.n	3676 <hci_driver_send+0x1e>
	...

00003680 <recv_thread>:
{
    3680:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3682:	4d1c      	ldr	r5, [pc, #112]	; (36f4 <recv_thread+0x74>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3684:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3686:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    368a:	4628      	mov	r0, r5
    368c:	f005 ffb9 	bl	9602 <k_queue_get>
		if (node_rx && !buf) {
    3690:	4604      	mov	r4, r0
    3692:	b318      	cbz	r0, 36dc <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    3694:	f000 fd32 	bl	40fc <hci_get_class>
	switch (class) {
    3698:	2802      	cmp	r0, #2
    369a:	9401      	str	r4, [sp, #4]
    369c:	d821      	bhi.n	36e2 <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    369e:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    36a0:	bf0e      	itee	eq
    36a2:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    36a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    36a8:	2001      	movne	r0, #1
    36aa:	f7fe ff6d 	bl	2588 <bt_buf_get_rx>
    36ae:	4604      	mov	r4, r0
		if (buf) {
    36b0:	b118      	cbz	r0, 36ba <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    36b2:	4601      	mov	r1, r0
    36b4:	9801      	ldr	r0, [sp, #4]
    36b6:	f000 fc39 	bl	3f2c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    36ba:	9b01      	ldr	r3, [sp, #4]
    36bc:	2100      	movs	r1, #0
    36be:	88d8      	ldrh	r0, [r3, #6]
    36c0:	f004 fa0a 	bl	7ad8 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    36c4:	a802      	add	r0, sp, #8
    36c6:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    36ca:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    36cc:	f004 f9a4 	bl	7a18 <ll_rx_mem_release>
		if (buf) {
    36d0:	b124      	cbz	r4, 36dc <recv_thread+0x5c>
			if (buf->len) {
    36d2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    36d4:	4620      	mov	r0, r4
			if (buf->len) {
    36d6:	b153      	cbz	r3, 36ee <recv_thread+0x6e>
				bt_recv(buf);
    36d8:	f7fe fe4c 	bl	2374 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    36dc:	f006 f932 	bl	9944 <_impl_k_yield>
    36e0:	e7d1      	b.n	3686 <recv_thread+0x6>
		LL_ASSERT(0);
    36e2:	4040      	eors	r0, r0
    36e4:	f380 8811 	msr	BASEPRI, r0
    36e8:	f04f 0004 	mov.w	r0, #4
    36ec:	df02      	svc	2
				net_buf_unref(buf);
    36ee:	f005 fd3d 	bl	916c <net_buf_unref>
    36f2:	e7f3      	b.n	36dc <recv_thread+0x5c>
    36f4:	20002c2c 	.word	0x20002c2c

000036f8 <prio_recv_thread>:
{
    36f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    36fa:	4c0c      	ldr	r4, [pc, #48]	; (372c <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    36fc:	4d0c      	ldr	r5, [pc, #48]	; (3730 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    36fe:	f10d 0102 	add.w	r1, sp, #2
    3702:	a801      	add	r0, sp, #4
    3704:	f004 f950 	bl	79a8 <ll_rx_get>
    3708:	2800      	cmp	r0, #0
    370a:	d1f8      	bne.n	36fe <prio_recv_thread+0x6>
		if (node_rx) {
    370c:	9b01      	ldr	r3, [sp, #4]
    370e:	b133      	cbz	r3, 371e <prio_recv_thread+0x26>
			ll_rx_dequeue();
    3710:	f004 fb96 	bl	7e40 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    3714:	9901      	ldr	r1, [sp, #4]
    3716:	4628      	mov	r0, r5
    3718:	f005 ff4f 	bl	95ba <k_queue_append>
    371c:	e7ef      	b.n	36fe <prio_recv_thread+0x6>
    371e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3722:	4620      	mov	r0, r4
    3724:	f006 f9e4 	bl	9af0 <_impl_k_sem_take>
    3728:	e7e9      	b.n	36fe <prio_recv_thread+0x6>
    372a:	bf00      	nop
    372c:	20002c14 	.word	0x20002c14
    3730:	20002c2c 	.word	0x20002c2c

00003734 <hci_driver_open>:
{
    3734:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    3736:	4814      	ldr	r0, [pc, #80]	; (3788 <hci_driver_open+0x54>)
{
    3738:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    373a:	f004 fc25 	bl	7f88 <ll_init>
	if (err) {
    373e:	4604      	mov	r4, r0
    3740:	b9f8      	cbnz	r0, 3782 <hci_driver_open+0x4e>
	hci_init(NULL);
    3742:	f000 fcfb 	bl	413c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    3746:	f06f 0309 	mvn.w	r3, #9
    374a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    374e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3752:	4b0e      	ldr	r3, [pc, #56]	; (378c <hci_driver_open+0x58>)
    3754:	490e      	ldr	r1, [pc, #56]	; (3790 <hci_driver_open+0x5c>)
    3756:	480f      	ldr	r0, [pc, #60]	; (3794 <hci_driver_open+0x60>)
    3758:	e9cd 4404 	strd	r4, r4, [sp, #16]
    375c:	e9cd 4400 	strd	r4, r4, [sp]
    3760:	f006 fb7e 	bl	9e60 <_impl_k_thread_create>
    3764:	f06f 0307 	mvn.w	r3, #7
    3768:	e9cd 4302 	strd	r4, r3, [sp, #8]
    376c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    3770:	e9cd 4400 	strd	r4, r4, [sp]
    3774:	4b08      	ldr	r3, [pc, #32]	; (3798 <hci_driver_open+0x64>)
    3776:	4909      	ldr	r1, [pc, #36]	; (379c <hci_driver_open+0x68>)
    3778:	4809      	ldr	r0, [pc, #36]	; (37a0 <hci_driver_open+0x6c>)
    377a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    377e:	f006 fb6f 	bl	9e60 <_impl_k_thread_create>
}
    3782:	4620      	mov	r0, r4
    3784:	b006      	add	sp, #24
    3786:	bd10      	pop	{r4, pc}
    3788:	20002c14 	.word	0x20002c14
    378c:	000036f9 	.word	0x000036f9
    3790:	20001200 	.word	0x20001200
    3794:	20000f14 	.word	0x20000f14
    3798:	00003681 	.word	0x00003681
    379c:	200013c0 	.word	0x200013c0
    37a0:	20000eac 	.word	0x20000eac

000037a4 <sys_put_le32>:
	dst[1] = val >> 8;
    37a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    37a8:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    37aa:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    37ac:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    37ae:	0a00      	lsrs	r0, r0, #8
    37b0:	704b      	strb	r3, [r1, #1]
    37b2:	70c8      	strb	r0, [r1, #3]
}
    37b4:	4770      	bx	lr

000037b6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    37b6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    37b8:	3008      	adds	r0, #8
{
    37ba:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    37bc:	2102      	movs	r1, #2
{
    37be:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    37c0:	f005 fd06 	bl	91d0 <net_buf_simple_add>
	hdr->evt = evt;
    37c4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    37c6:	7044      	strb	r4, [r0, #1]
}
    37c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000037cc <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    37cc:	b538      	push	{r3, r4, r5, lr}
    37ce:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    37d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    37d4:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    37d6:	f7fe fee7 	bl	25a8 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    37da:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    37dc:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    37de:	b2d2      	uxtb	r2, r2
    37e0:	210e      	movs	r1, #14
    37e2:	f7ff ffe8 	bl	37b6 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    37e6:	6820      	ldr	r0, [r4, #0]
    37e8:	2103      	movs	r1, #3
    37ea:	3008      	adds	r0, #8
    37ec:	f005 fcf0 	bl	91d0 <net_buf_simple_add>
	cc->ncmd = 1;
    37f0:	2301      	movs	r3, #1
    37f2:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    37f4:	4b05      	ldr	r3, [pc, #20]	; (380c <cmd_complete+0x40>)
    37f6:	881b      	ldrh	r3, [r3, #0]
    37f8:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    37fc:	6820      	ldr	r0, [r4, #0]
    37fe:	4629      	mov	r1, r5
    3800:	3008      	adds	r0, #8
}
    3802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    3806:	f005 bce3 	b.w	91d0 <net_buf_simple_add>
    380a:	bf00      	nop
    380c:	2000027c 	.word	0x2000027c

00003810 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    3810:	b570      	push	{r4, r5, r6, lr}
    3812:	4604      	mov	r4, r0
    3814:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3816:	3201      	adds	r2, #1
{
    3818:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    381a:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    381c:	b2d2      	uxtb	r2, r2
    381e:	213e      	movs	r1, #62	; 0x3e
    3820:	f7ff ffc9 	bl	37b6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    3824:	2101      	movs	r1, #1
    3826:	4620      	mov	r0, r4
    3828:	f005 fcd2 	bl	91d0 <net_buf_simple_add>
	me->subevent = subevt;
    382c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    382e:	4629      	mov	r1, r5
    3830:	4620      	mov	r0, r4
}
    3832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3836:	f005 bccb 	b.w	91d0 <net_buf_simple_add>
	...

0000383c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    383c:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    3840:	4604      	mov	r4, r0
    3842:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3844:	4b15      	ldr	r3, [pc, #84]	; (389c <le_remote_feat_complete+0x60>)
{
    3846:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3848:	e9d3 2300 	ldrd	r2, r3, [r3]
    384c:	f04f 0b00 	mov.w	fp, #0
    3850:	f003 5c00 	and.w	ip, r3, #536870912	; 0x20000000
    3854:	ea5b 030c 	orrs.w	r3, fp, ip
{
    3858:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    385a:	d01d      	beq.n	3898 <le_remote_feat_complete+0x5c>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    385c:	4b10      	ldr	r3, [pc, #64]	; (38a0 <le_remote_feat_complete+0x64>)
    385e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3862:	f04f 0c00 	mov.w	ip, #0
    3866:	f002 0b08 	and.w	fp, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    386a:	ea5b 030c 	orrs.w	r3, fp, ip
    386e:	d013      	beq.n	3898 <le_remote_feat_complete+0x5c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3870:	220b      	movs	r2, #11
    3872:	2104      	movs	r1, #4
    3874:	f7ff ffcc 	bl	3810 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    3878:	2208      	movs	r2, #8
	sep->status = status;
    387a:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    387c:	f8a0 6001 	strh.w	r6, [r0, #1]
    3880:	3003      	adds	r0, #3
	if (!status) {
    3882:	b924      	cbnz	r4, 388e <le_remote_feat_complete+0x52>
		memcpy(&sep->features[0],
    3884:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3886:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memcpy(&sep->features[0],
    388a:	f7fc bea8 	b.w	5de <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    388e:	2100      	movs	r1, #0
}
    3890:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3894:	f7fc bed0 	b.w	638 <memset>
}
    3898:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    389c:	20002a18 	.word	0x20002a18
    38a0:	20002a20 	.word	0x20002a20

000038a4 <bt_addr_le_to_str.constprop.43>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    38a4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    38a6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    38a8:	b08a      	sub	sp, #40	; 0x28
    38aa:	4604      	mov	r4, r0
    38ac:	460e      	mov	r6, r1
    38ae:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    38b0:	2b03      	cmp	r3, #3
    38b2:	d820      	bhi.n	38f6 <bt_addr_le_to_str.constprop.43+0x52>
    38b4:	e8df f003 	tbb	[pc, r3]
    38b8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    38bc:	4911      	ldr	r1, [pc, #68]	; (3904 <bt_addr_le_to_str.constprop.43+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    38be:	4628      	mov	r0, r5
    38c0:	f7fc fe66 	bl	590 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    38c4:	7862      	ldrb	r2, [r4, #1]
    38c6:	9204      	str	r2, [sp, #16]
    38c8:	78a2      	ldrb	r2, [r4, #2]
    38ca:	9203      	str	r2, [sp, #12]
    38cc:	78e2      	ldrb	r2, [r4, #3]
    38ce:	9202      	str	r2, [sp, #8]
    38d0:	7922      	ldrb	r2, [r4, #4]
    38d2:	9201      	str	r2, [sp, #4]
    38d4:	7962      	ldrb	r2, [r4, #5]
    38d6:	9200      	str	r2, [sp, #0]
    38d8:	79a3      	ldrb	r3, [r4, #6]
    38da:	9505      	str	r5, [sp, #20]
    38dc:	4a0a      	ldr	r2, [pc, #40]	; (3908 <bt_addr_le_to_str.constprop.43+0x64>)
    38de:	211b      	movs	r1, #27
    38e0:	4630      	mov	r0, r6
    38e2:	f7fd fcbd 	bl	1260 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    38e6:	b00a      	add	sp, #40	; 0x28
    38e8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    38ea:	4908      	ldr	r1, [pc, #32]	; (390c <bt_addr_le_to_str.constprop.43+0x68>)
    38ec:	e7e7      	b.n	38be <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "public id");
    38ee:	4908      	ldr	r1, [pc, #32]	; (3910 <bt_addr_le_to_str.constprop.43+0x6c>)
    38f0:	e7e5      	b.n	38be <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "random id");
    38f2:	4908      	ldr	r1, [pc, #32]	; (3914 <bt_addr_le_to_str.constprop.43+0x70>)
    38f4:	e7e3      	b.n	38be <bt_addr_le_to_str.constprop.43+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    38f6:	4a08      	ldr	r2, [pc, #32]	; (3918 <bt_addr_le_to_str.constprop.43+0x74>)
    38f8:	210a      	movs	r1, #10
    38fa:	4628      	mov	r0, r5
    38fc:	f7fd fcb0 	bl	1260 <snprintk>
    3900:	e7e0      	b.n	38c4 <bt_addr_le_to_str.constprop.43+0x20>
    3902:	bf00      	nop
    3904:	0000a92b 	.word	0x0000a92b
    3908:	0000a954 	.word	0x0000a954
    390c:	0000a932 	.word	0x0000a932
    3910:	0000a939 	.word	0x0000a939
    3914:	0000a943 	.word	0x0000a943
    3918:	0000a94d 	.word	0x0000a94d

0000391c <le_adv_ext_report.isra.38.part.39>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    391c:	b510      	push	{r4, lr}
		if (!p->ext_hdr_len) {
    391e:	7883      	ldrb	r3, [r0, #2]
    3920:	069a      	lsls	r2, r3, #26
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3922:	b08a      	sub	sp, #40	; 0x28
		if (!p->ext_hdr_len) {
    3924:	d013      	beq.n	394e <le_adv_ext_report.isra.38.part.39+0x32>
		if (h->adv_addr) {
    3926:	78c3      	ldrb	r3, [r0, #3]
    3928:	07db      	lsls	r3, r3, #31
    392a:	d510      	bpl.n	394e <le_adv_ext_report.isra.38.part.39+0x32>
			addr.type = adv->tx_addr;
    392c:	4601      	mov	r1, r0
    392e:	ac0a      	add	r4, sp, #40	; 0x28
    3930:	f811 3b04 	ldrb.w	r3, [r1], #4
    3934:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3938:	f804 3d24 	strb.w	r3, [r4, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    393c:	2206      	movs	r2, #6
    393e:	f10d 0005 	add.w	r0, sp, #5
    3942:	f7fc fe4c 	bl	5de <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3946:	a903      	add	r1, sp, #12
    3948:	4620      	mov	r0, r4
    394a:	f7ff ffab 	bl	38a4 <bt_addr_le_to_str.constprop.43>
}
    394e:	b00a      	add	sp, #40	; 0x28
    3950:	bd10      	pop	{r4, pc}

00003952 <sys_get_le64>:
{
    3952:	4603      	mov	r3, r0
}
    3954:	6800      	ldr	r0, [r0, #0]
    3956:	6859      	ldr	r1, [r3, #4]
    3958:	4770      	bx	lr
	...

0000395c <hci_cmd_handle>:
{
    395c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    395e:	8981      	ldrh	r1, [r0, #12]
{
    3960:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    3962:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    3964:	2902      	cmp	r1, #2
{
    3966:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    3968:	950d      	str	r5, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    396a:	d802      	bhi.n	3972 <hci_cmd_handle+0x16>
		return NULL;
    396c:	2000      	movs	r0, #0
}
    396e:	b019      	add	sp, #100	; 0x64
    3970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    3972:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3974:	4ec5      	ldr	r6, [pc, #788]	; (3c8c <hci_cmd_handle+0x330>)
    3976:	781a      	ldrb	r2, [r3, #0]
    3978:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    397a:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    397c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    3980:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3982:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    3984:	d8f2      	bhi.n	396c <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    3986:	2103      	movs	r1, #3
    3988:	f104 0008 	add.w	r0, r4, #8
    398c:	f005 fc2f 	bl	91ee <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    3990:	8833      	ldrh	r3, [r6, #0]
    3992:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    3996:	0a9b      	lsrs	r3, r3, #10
    3998:	2b04      	cmp	r3, #4
    399a:	d063      	beq.n	3a64 <hci_cmd_handle+0x108>
    399c:	d807      	bhi.n	39ae <hci_cmd_handle+0x52>
    399e:	2b03      	cmp	r3, #3
    39a0:	d024      	beq.n	39ec <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    39a2:	2101      	movs	r1, #1
    39a4:	a80d      	add	r0, sp, #52	; 0x34
    39a6:	f7ff ff11 	bl	37cc <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    39aa:	2301      	movs	r3, #1
    39ac:	e1cc      	b.n	3d48 <hci_cmd_handle+0x3ec>
	switch (BT_OGF(_opcode)) {
    39ae:	2b08      	cmp	r3, #8
    39b0:	f000 80d9 	beq.w	3b66 <hci_cmd_handle+0x20a>
    39b4:	2b3f      	cmp	r3, #63	; 0x3f
    39b6:	d1f4      	bne.n	39a2 <hci_cmd_handle+0x46>
	switch (ocf) {
    39b8:	3a01      	subs	r2, #1
    39ba:	2a09      	cmp	r2, #9
    39bc:	d8f1      	bhi.n	39a2 <hci_cmd_handle+0x46>
    39be:	a301      	add	r3, pc, #4	; (adr r3, 39c4 <hci_cmd_handle+0x68>)
    39c0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    39c4:	00003d4d 	.word	0x00003d4d
    39c8:	00003d7b 	.word	0x00003d7b
    39cc:	00003da3 	.word	0x00003da3
    39d0:	000039a3 	.word	0x000039a3
    39d4:	000039a3 	.word	0x000039a3
    39d8:	00003de7 	.word	0x00003de7
    39dc:	000039a3 	.word	0x000039a3
    39e0:	00003db9 	.word	0x00003db9
    39e4:	00003df1 	.word	0x00003df1
    39e8:	00003e5d 	.word	0x00003e5d
	switch (ocf) {
    39ec:	2a03      	cmp	r2, #3
    39ee:	d014      	beq.n	3a1a <hci_cmd_handle+0xbe>
    39f0:	d808      	bhi.n	3a04 <hci_cmd_handle+0xa8>
    39f2:	2a01      	cmp	r2, #1
    39f4:	d1d5      	bne.n	39a2 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    39f6:	68a0      	ldr	r0, [r4, #8]
    39f8:	f7ff ffab 	bl	3952 <sys_get_le64>
    39fc:	4ba4      	ldr	r3, [pc, #656]	; (3c90 <hci_cmd_handle+0x334>)
    39fe:	e9c3 0100 	strd	r0, r1, [r3]
    3a02:	e003      	b.n	3a0c <hci_cmd_handle+0xb0>
	switch (ocf) {
    3a04:	2a2d      	cmp	r2, #45	; 0x2d
    3a06:	d017      	beq.n	3a38 <hci_cmd_handle+0xdc>
    3a08:	2a63      	cmp	r2, #99	; 0x63
    3a0a:	d1ca      	bne.n	39a2 <hci_cmd_handle+0x46>
		ccst = cmd_complete(evt, sizeof(*ccst));
    3a0c:	2101      	movs	r1, #1
    3a0e:	a80d      	add	r0, sp, #52	; 0x34
    3a10:	f7ff fedc 	bl	37cc <cmd_complete>
		ccst->status = 0x00;
    3a14:	7005      	strb	r5, [r0, #0]
	return evt;
    3a16:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a18:	e7a9      	b.n	396e <hci_cmd_handle+0x12>
	event_mask = DEFAULT_EVENT_MASK;
    3a1a:	4b9d      	ldr	r3, [pc, #628]	; (3c90 <hci_cmd_handle+0x334>)
    3a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a20:	f641 71ff 	movw	r1, #8191	; 0x1fff
    3a24:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    3a28:	4b9a      	ldr	r3, [pc, #616]	; (3c94 <hci_cmd_handle+0x338>)
    3a2a:	201f      	movs	r0, #31
    3a2c:	2100      	movs	r1, #0
    3a2e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    3a32:	f003 ff21 	bl	7878 <ll_reset>
    3a36:	e7e9      	b.n	3a0c <hci_cmd_handle+0xb0>
    3a38:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3a3a:	2104      	movs	r1, #4
    3a3c:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    3a3e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    3a40:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    3a42:	f7ff fec3 	bl	37cc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    3a46:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    3a48:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3a4a:	1cc2      	adds	r2, r0, #3
    3a4c:	4639      	mov	r1, r7
    3a4e:	4630      	mov	r0, r6
    3a50:	f003 ffa0 	bl	7994 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3a54:	2800      	cmp	r0, #0
    3a56:	bf14      	ite	ne
    3a58:	2302      	movne	r3, #2
    3a5a:	2300      	moveq	r3, #0
    3a5c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    3a5e:	f8a4 5001 	strh.w	r5, [r4, #1]
    3a62:	e7d8      	b.n	3a16 <hci_cmd_handle+0xba>
	switch (ocf) {
    3a64:	3a01      	subs	r2, #1
    3a66:	2a08      	cmp	r2, #8
    3a68:	d89b      	bhi.n	39a2 <hci_cmd_handle+0x46>
    3a6a:	a301      	add	r3, pc, #4	; (adr r3, 3a70 <hci_cmd_handle+0x114>)
    3a6c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3a70:	00003a95 	.word	0x00003a95
    3a74:	00003abf 	.word	0x00003abf
    3a78:	00003b33 	.word	0x00003b33
    3a7c:	000039a3 	.word	0x000039a3
    3a80:	000039a3 	.word	0x000039a3
    3a84:	000039a3 	.word	0x000039a3
    3a88:	000039a3 	.word	0x000039a3
    3a8c:	000039a3 	.word	0x000039a3
    3a90:	00003b4f 	.word	0x00003b4f
	rp = cmd_complete(evt, sizeof(*rp));
    3a94:	2109      	movs	r1, #9
    3a96:	a80d      	add	r0, sp, #52	; 0x34
    3a98:	f7ff fe98 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3a9c:	2300      	movs	r3, #0
    3a9e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    3aa0:	7083      	strb	r3, [r0, #2]
    3aa2:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3aa4:	f06f 030e 	mvn.w	r3, #14
    3aa8:	7143      	strb	r3, [r0, #5]
    3aaa:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    3aac:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3aae:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    3ab4:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    3ab6:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3ab8:	71c3      	strb	r3, [r0, #7]
    3aba:	7203      	strb	r3, [r0, #8]
    3abc:	e7ab      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3abe:	2141      	movs	r1, #65	; 0x41
    3ac0:	a80d      	add	r0, sp, #52	; 0x34
    3ac2:	f7ff fe83 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3ac6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3ac8:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3aca:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3acc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3ad0:	f7fc fdb2 	bl	638 <memset>
	rp->commands[2] |= BIT(7);
    3ad4:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    3ad6:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    3ad8:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    3ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ade:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3ae0:	79a3      	ldrb	r3, [r4, #6]
    3ae2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3ae6:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    3ae8:	7ae3      	ldrb	r3, [r4, #11]
    3aea:	f043 0304 	orr.w	r3, r3, #4
    3aee:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3af0:	7be3      	ldrb	r3, [r4, #15]
    3af2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    3af6:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    3af8:	7c23      	ldrb	r3, [r4, #16]
    3afa:	f043 0302 	orr.w	r3, r3, #2
    3afe:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    3b00:	7de3      	ldrb	r3, [r4, #23]
    3b02:	f043 0304 	orr.w	r3, r3, #4
    3b06:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    3b08:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    3b0a:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(0) | BIT(1);
    3b0e:	f063 033c 	orn	r3, r3, #60	; 0x3c
	rp->commands[27] |= BIT(6) | BIT(7);
    3b12:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(0) | BIT(1);
    3b14:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    3b16:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    3b18:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    3b1c:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3b20:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    3b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    3b28:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3b2a:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    3b2c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    3b30:	e771      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3b32:	2109      	movs	r1, #9
    3b34:	a80d      	add	r0, sp, #52	; 0x34
    3b36:	f7ff fe49 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3b3a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3b3c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3b3e:	2208      	movs	r2, #8
	rp->status = 0x00;
    3b40:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3b44:	f7fc fd78 	bl	638 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3b48:	2360      	movs	r3, #96	; 0x60
    3b4a:	7163      	strb	r3, [r4, #5]
    3b4c:	e763      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3b4e:	2107      	movs	r1, #7
    3b50:	a80d      	add	r0, sp, #52	; 0x34
    3b52:	f7ff fe3b 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3b56:	4601      	mov	r1, r0
    3b58:	2300      	movs	r3, #0
    3b5a:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3b5e:	4618      	mov	r0, r3
    3b60:	f7ff fd1e 	bl	35a0 <ll_addr_get>
    3b64:	e757      	b.n	3a16 <hci_cmd_handle+0xba>
	switch (ocf) {
    3b66:	2a0a      	cmp	r2, #10
    3b68:	f000 80e1 	beq.w	3d2e <hci_cmd_handle+0x3d2>
    3b6c:	d827      	bhi.n	3bbe <hci_cmd_handle+0x262>
    3b6e:	2a05      	cmp	r2, #5
    3b70:	f000 8081 	beq.w	3c76 <hci_cmd_handle+0x31a>
    3b74:	d812      	bhi.n	3b9c <hci_cmd_handle+0x240>
    3b76:	2a02      	cmp	r2, #2
    3b78:	d05f      	beq.n	3c3a <hci_cmd_handle+0x2de>
    3b7a:	2a03      	cmp	r2, #3
    3b7c:	d069      	beq.n	3c52 <hci_cmd_handle+0x2f6>
    3b7e:	2a01      	cmp	r2, #1
    3b80:	f47f af0f 	bne.w	39a2 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    3b84:	68a0      	ldr	r0, [r4, #8]
    3b86:	f7ff fee4 	bl	3952 <sys_get_le64>
    3b8a:	4b42      	ldr	r3, [pc, #264]	; (3c94 <hci_cmd_handle+0x338>)
    3b8c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3b90:	2101      	movs	r1, #1
    3b92:	a80d      	add	r0, sp, #52	; 0x34
    3b94:	f7ff fe1a 	bl	37cc <cmd_complete>
	ccst->status = 0x00;
    3b98:	2300      	movs	r3, #0
    3b9a:	e0d5      	b.n	3d48 <hci_cmd_handle+0x3ec>
	switch (ocf) {
    3b9c:	2a07      	cmp	r2, #7
    3b9e:	f000 8155 	beq.w	3e4c <hci_cmd_handle+0x4f0>
    3ba2:	f0c0 80a6 	bcc.w	3cf2 <hci_cmd_handle+0x396>
    3ba6:	2a08      	cmp	r2, #8
    3ba8:	f000 80bb 	beq.w	3d22 <hci_cmd_handle+0x3c6>
    3bac:	2a09      	cmp	r2, #9
    3bae:	f47f aef8 	bne.w	39a2 <hci_cmd_handle+0x46>
    3bb2:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    3bb4:	1c59      	adds	r1, r3, #1
    3bb6:	7818      	ldrb	r0, [r3, #0]
    3bb8:	f004 fbb8 	bl	832c <ll_scan_data_set>
    3bbc:	e7e8      	b.n	3b90 <hci_cmd_handle+0x234>
	switch (ocf) {
    3bbe:	2a12      	cmp	r2, #18
    3bc0:	d077      	beq.n	3cb2 <hci_cmd_handle+0x356>
    3bc2:	d810      	bhi.n	3be6 <hci_cmd_handle+0x28a>
    3bc4:	2a10      	cmp	r2, #16
    3bc6:	d067      	beq.n	3c98 <hci_cmd_handle+0x33c>
    3bc8:	d86f      	bhi.n	3caa <hci_cmd_handle+0x34e>
    3bca:	2a0f      	cmp	r2, #15
    3bcc:	f47f aee9 	bne.w	39a2 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3bd0:	2102      	movs	r1, #2
    3bd2:	a80d      	add	r0, sp, #52	; 0x34
    3bd4:	f7ff fdfa 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3bd8:	2300      	movs	r3, #0
    3bda:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3bdc:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    3bde:	f004 fc57 	bl	8490 <ll_wl_size_get>
    3be2:	7060      	strb	r0, [r4, #1]
    3be4:	e717      	b.n	3a16 <hci_cmd_handle+0xba>
	switch (ocf) {
    3be6:	2a18      	cmp	r2, #24
    3be8:	d067      	beq.n	3cba <hci_cmd_handle+0x35e>
    3bea:	d815      	bhi.n	3c18 <hci_cmd_handle+0x2bc>
    3bec:	2a17      	cmp	r2, #23
    3bee:	f47f aed8 	bne.w	39a2 <hci_cmd_handle+0x46>
    3bf2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3bf4:	2300      	movs	r3, #0
    3bf6:	aa0e      	add	r2, sp, #56	; 0x38
    3bf8:	f100 0110 	add.w	r1, r0, #16
    3bfc:	f004 fd52 	bl	86a4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3c00:	2111      	movs	r1, #17
    3c02:	a80d      	add	r0, sp, #52	; 0x34
    3c04:	f7ff fde2 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3c08:	2300      	movs	r3, #0
    3c0a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    3c0e:	2210      	movs	r2, #16
    3c10:	a90e      	add	r1, sp, #56	; 0x38
	memcpy(rp->info, build_info, sizeof(build_info));
    3c12:	f7fc fce4 	bl	5de <memcpy>
    3c16:	e6fe      	b.n	3a16 <hci_cmd_handle+0xba>
	switch (ocf) {
    3c18:	2a1c      	cmp	r2, #28
    3c1a:	d059      	beq.n	3cd0 <hci_cmd_handle+0x374>
    3c1c:	2a4b      	cmp	r2, #75	; 0x4b
    3c1e:	f47f aec0 	bne.w	39a2 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3c22:	2103      	movs	r1, #3
    3c24:	a80d      	add	r0, sp, #52	; 0x34
    3c26:	f7ff fdd1 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3c2a:	4601      	mov	r1, r0
    3c2c:	2300      	movs	r3, #0
    3c2e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3c32:	3001      	adds	r0, #1
    3c34:	f7ff fcea 	bl	360c <ll_tx_pwr_get>
    3c38:	e6ed      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c3a:	2104      	movs	r1, #4
    3c3c:	a80d      	add	r0, sp, #52	; 0x34
    3c3e:	f7ff fdc5 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3c42:	2300      	movs	r3, #0
    3c44:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c46:	221b      	movs	r2, #27
    3c48:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3c4a:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c4c:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3c4e:	70c3      	strb	r3, [r0, #3]
    3c50:	e6e1      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c52:	2109      	movs	r1, #9
    3c54:	a80d      	add	r0, sp, #52	; 0x34
    3c56:	f7ff fdb9 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3c5a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c5c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c5e:	2208      	movs	r2, #8
	rp->status = 0x00;
    3c60:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c64:	f7fc fce8 	bl	638 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    3c68:	230c      	movs	r3, #12
    3c6a:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    3c6c:	2340      	movs	r3, #64	; 0x40
    3c6e:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    3c70:	2301      	movs	r3, #1
    3c72:	70e3      	strb	r3, [r4, #3]
    3c74:	e6cf      	b.n	3a16 <hci_cmd_handle+0xba>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3c76:	68a1      	ldr	r1, [r4, #8]
    3c78:	2001      	movs	r0, #1
    3c7a:	f7ff fcab 	bl	35d4 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    3c7e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3c80:	2101      	movs	r1, #1
    3c82:	a80d      	add	r0, sp, #52	; 0x34
    3c84:	f7ff fda2 	bl	37cc <cmd_complete>
	ccst->status = status;
    3c88:	7004      	strb	r4, [r0, #0]
    3c8a:	e6c4      	b.n	3a16 <hci_cmd_handle+0xba>
    3c8c:	2000027c 	.word	0x2000027c
    3c90:	20002a18 	.word	0x20002a18
    3c94:	20002a20 	.word	0x20002a20
	ccst = cmd_complete(evt, sizeof(*ccst));
    3c98:	2101      	movs	r1, #1
    3c9a:	a80d      	add	r0, sp, #52	; 0x34
    3c9c:	f7ff fd96 	bl	37cc <cmd_complete>
    3ca0:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    3ca2:	f004 fbf7 	bl	8494 <ll_wl_clear>
    3ca6:	7020      	strb	r0, [r4, #0]
    3ca8:	e6b5      	b.n	3a16 <hci_cmd_handle+0xba>
	status = ll_wl_add(&cmd->addr);
    3caa:	68a0      	ldr	r0, [r4, #8]
    3cac:	f004 fc08 	bl	84c0 <ll_wl_add>
    3cb0:	e7e5      	b.n	3c7e <hci_cmd_handle+0x322>
	status = ll_wl_remove(&cmd->addr);
    3cb2:	68a0      	ldr	r0, [r4, #8]
    3cb4:	f004 fc3c 	bl	8530 <ll_wl_remove>
    3cb8:	e7e1      	b.n	3c7e <hci_cmd_handle+0x322>
	rp = cmd_complete(evt, sizeof(*rp));
    3cba:	2109      	movs	r1, #9
    3cbc:	a80d      	add	r0, sp, #52	; 0x34
    3cbe:	f7ff fd85 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3cc2:	2300      	movs	r3, #0
    3cc4:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    3cc8:	2108      	movs	r1, #8
    3cca:	f7ff fca3 	bl	3614 <bt_rand>
    3cce:	e6a2      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3cd0:	2109      	movs	r1, #9
    3cd2:	a80d      	add	r0, sp, #52	; 0x34
    3cd4:	f7ff fd7a 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3cd8:	4601      	mov	r1, r0
    3cda:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3cdc:	4604      	mov	r4, r0
	rp->status = 0x00;
    3cde:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    3ce2:	2003      	movs	r0, #3
    3ce4:	f7ff fd5e 	bl	37a4 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3ce8:	1d61      	adds	r1, r4, #5
    3cea:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3cec:	f7ff fd5a 	bl	37a4 <sys_put_le32>
    3cf0:	e691      	b.n	3a16 <hci_cmd_handle+0xba>
    3cf2:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3cf4:	2100      	movs	r1, #0
    3cf6:	7903      	ldrb	r3, [r0, #4]
    3cf8:	8802      	ldrh	r2, [r0, #0]
    3cfa:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    3cfe:	e9cd 1107 	strd	r1, r1, [sp, #28]
    3d02:	e9cd 1105 	strd	r1, r1, [sp, #20]
    3d06:	7b84      	ldrb	r4, [r0, #14]
    3d08:	9404      	str	r4, [sp, #16]
    3d0a:	7b44      	ldrb	r4, [r0, #13]
    3d0c:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    3d0e:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3d10:	9402      	str	r4, [sp, #8]
    3d12:	7984      	ldrb	r4, [r0, #6]
    3d14:	9401      	str	r4, [sp, #4]
    3d16:	7940      	ldrb	r0, [r0, #5]
    3d18:	9000      	str	r0, [sp, #0]
    3d1a:	4608      	mov	r0, r1
    3d1c:	f004 f9bc 	bl	8098 <ll_adv_params_set>
    3d20:	e7ad      	b.n	3c7e <hci_cmd_handle+0x322>
    3d22:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    3d24:	1c59      	adds	r1, r3, #1
    3d26:	7818      	ldrb	r0, [r3, #0]
    3d28:	f004 faa8 	bl	827c <ll_adv_data_set>
    3d2c:	e730      	b.n	3b90 <hci_cmd_handle+0x234>
	status = ll_adv_enable(cmd->enable);
    3d2e:	68a3      	ldr	r3, [r4, #8]
    3d30:	7818      	ldrb	r0, [r3, #0]
    3d32:	f004 fb41 	bl	83b8 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3d36:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    3d38:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3d3a:	a80d      	add	r0, sp, #52	; 0x34
    3d3c:	f7ff fd46 	bl	37cc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3d40:	2c00      	cmp	r4, #0
    3d42:	bf14      	ite	ne
    3d44:	230c      	movne	r3, #12
    3d46:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3d48:	7003      	strb	r3, [r0, #0]
    3d4a:	e664      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3d4c:	210d      	movs	r1, #13
    3d4e:	a80d      	add	r0, sp, #52	; 0x34
    3d50:	f7ff fd3c 	bl	37cc <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d54:	2202      	movs	r2, #2
    3d56:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3d58:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    3d5a:	2201      	movs	r2, #1
    3d5c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d5e:	220b      	movs	r2, #11
	rp->status = 0x00;
    3d60:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d62:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3d64:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    3d66:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d68:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3d6a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    3d6c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d6e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3d70:	7242      	strb	r2, [r0, #9]
    3d72:	7283      	strb	r3, [r0, #10]
    3d74:	72c3      	strb	r3, [r0, #11]
    3d76:	7303      	strb	r3, [r0, #12]
    3d78:	e64d      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3d7a:	2141      	movs	r1, #65	; 0x41
    3d7c:	a80d      	add	r0, sp, #52	; 0x34
    3d7e:	f7ff fd25 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3d82:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3d84:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3d86:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3d88:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3d8c:	f7fc fc54 	bl	638 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    3d90:	7863      	ldrb	r3, [r4, #1]
    3d92:	f063 0358 	orn	r3, r3, #88	; 0x58
    3d96:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    3d98:	78a3      	ldrb	r3, [r4, #2]
    3d9a:	f043 0303 	orr.w	r3, r3, #3
    3d9e:	70a3      	strb	r3, [r4, #2]
    3da0:	e639      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3da2:	2109      	movs	r1, #9
    3da4:	a80d      	add	r0, sp, #52	; 0x34
    3da6:	f7ff fd11 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3daa:	2100      	movs	r1, #0
    3dac:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3db0:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    3db2:	f7fc fc41 	bl	638 <memset>
    3db6:	e62e      	b.n	3a16 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    3db8:	4b5b      	ldr	r3, [pc, #364]	; (3f28 <hci_cmd_handle+0x5cc>)
    3dba:	aa0e      	add	r2, sp, #56	; 0x38
    3dbc:	f103 0628 	add.w	r6, r3, #40	; 0x28
    3dc0:	4615      	mov	r5, r2
    3dc2:	6818      	ldr	r0, [r3, #0]
    3dc4:	6859      	ldr	r1, [r3, #4]
    3dc6:	4614      	mov	r4, r2
    3dc8:	c403      	stmia	r4!, {r0, r1}
    3dca:	3308      	adds	r3, #8
    3dcc:	42b3      	cmp	r3, r6
    3dce:	4622      	mov	r2, r4
    3dd0:	d1f7      	bne.n	3dc2 <hci_cmd_handle+0x466>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    3dd2:	2129      	movs	r1, #41	; 0x29
    3dd4:	a80d      	add	r0, sp, #52	; 0x34
    3dd6:	f7ff fcf9 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3dda:	2300      	movs	r3, #0
    3ddc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    3de0:	2228      	movs	r2, #40	; 0x28
    3de2:	4629      	mov	r1, r5
    3de4:	e715      	b.n	3c12 <hci_cmd_handle+0x2b6>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    3de6:	68a1      	ldr	r1, [r4, #8]
    3de8:	2000      	movs	r0, #0
    3dea:	f7ff fbf3 	bl	35d4 <ll_addr_set>
    3dee:	e6cf      	b.n	3b90 <hci_cmd_handle+0x234>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3df4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    3df8:	3201      	adds	r2, #1
    3dfa:	d106      	bne.n	3e0a <hci_cmd_handle+0x4ae>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3dfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3e04:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3e06:	4293      	cmp	r3, r2
    3e08:	d020      	beq.n	3e4c <hci_cmd_handle+0x4f0>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    3e0a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3e0e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3e12:	07db      	lsls	r3, r3, #31
    3e14:	d51a      	bpl.n	3e4c <hci_cmd_handle+0x4f0>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3e16:	2118      	movs	r1, #24
    3e18:	a80d      	add	r0, sp, #52	; 0x34
    3e1a:	f7ff fcd7 	bl	37cc <cmd_complete>
		rp->status = 0x00;
    3e1e:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    3e20:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3e22:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    3e24:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    3e26:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    3e28:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    3e2c:	1ca1      	adds	r1, r4, #2
    3e2e:	f7ff fcb9 	bl	37a4 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3e32:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    3e36:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    3e38:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3e3c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3e40:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3e42:	2210      	movs	r2, #16
    3e44:	4631      	mov	r1, r6
    3e46:	f104 0008 	add.w	r0, r4, #8
    3e4a:	e7b2      	b.n	3db2 <hci_cmd_handle+0x456>
	rp = cmd_complete(evt, sizeof(*rp));
    3e4c:	2102      	movs	r1, #2
    3e4e:	a80d      	add	r0, sp, #52	; 0x34
    3e50:	f7ff fcbc 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3e54:	2300      	movs	r3, #0
    3e56:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    3e58:	7043      	strb	r3, [r0, #1]
    3e5a:	e5dc      	b.n	3a16 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3e5c:	2121      	movs	r1, #33	; 0x21
    3e5e:	a80d      	add	r0, sp, #52	; 0x34
    3e60:	f7ff fcb4 	bl	37cc <cmd_complete>
	rp->status = 0x00;
    3e64:	4603      	mov	r3, r0
    3e66:	2200      	movs	r2, #0
    3e68:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    3e70:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e72:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    3e76:	3101      	adds	r1, #1
    3e78:	d04b      	beq.n	3f12 <hci_cmd_handle+0x5b6>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3e7a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e7e:	3101      	adds	r1, #1
    3e80:	d047      	beq.n	3f12 <hci_cmd_handle+0x5b6>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3e82:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3e86:	3101      	adds	r1, #1
    3e88:	d043      	beq.n	3f12 <hci_cmd_handle+0x5b6>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    3e8a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3e8e:	3101      	adds	r1, #1
    3e90:	d03f      	beq.n	3f12 <hci_cmd_handle+0x5b6>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    3e92:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    3e96:	4619      	mov	r1, r3
    3e98:	f7ff fc84 	bl	37a4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    3e9c:	1d61      	adds	r1, r4, #5
    3e9e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    3ea2:	f7ff fc7f 	bl	37a4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    3ea6:	f104 0109 	add.w	r1, r4, #9
    3eaa:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3eae:	f7ff fc79 	bl	37a4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    3eb2:	f104 010d 	add.w	r1, r4, #13
    3eb6:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    3eba:	f7ff fc73 	bl	37a4 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ec2:	f104 0311 	add.w	r3, r4, #17
    3ec6:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
    3eca:	3101      	adds	r1, #1
    3ecc:	d027      	beq.n	3f1e <hci_cmd_handle+0x5c2>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3ece:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3ed2:	3101      	adds	r1, #1
    3ed4:	d023      	beq.n	3f1e <hci_cmd_handle+0x5c2>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3ed6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3eda:	3101      	adds	r1, #1
    3edc:	d01f      	beq.n	3f1e <hci_cmd_handle+0x5c2>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    3ede:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3ee2:	3101      	adds	r1, #1
    3ee4:	d01b      	beq.n	3f1e <hci_cmd_handle+0x5c2>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    3ee6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    3eea:	4619      	mov	r1, r3
    3eec:	f7ff fc5a 	bl	37a4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    3ef0:	f104 0115 	add.w	r1, r4, #21
    3ef4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    3ef8:	f7ff fc54 	bl	37a4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    3efc:	f104 0119 	add.w	r1, r4, #25
    3f00:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    3f04:	f7ff fc4e 	bl	37a4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3f08:	f104 011d 	add.w	r1, r4, #29
    3f0c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    3f10:	e6ec      	b.n	3cec <hci_cmd_handle+0x390>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    3f12:	2210      	movs	r2, #16
    3f14:	2100      	movs	r1, #0
    3f16:	4618      	mov	r0, r3
    3f18:	f7fc fb8e 	bl	638 <memset>
    3f1c:	e7cf      	b.n	3ebe <hci_cmd_handle+0x562>
		memset(rp->er, 0x00, sizeof(rp->er));
    3f1e:	2210      	movs	r2, #16
    3f20:	2100      	movs	r1, #0
    3f22:	4618      	mov	r0, r3
    3f24:	e745      	b.n	3db2 <hci_cmd_handle+0x456>
    3f26:	bf00      	nop
    3f28:	0000a977 	.word	0x0000a977

00003f2c <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    3f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3f30:	7903      	ldrb	r3, [r0, #4]
    3f32:	2b01      	cmp	r3, #1
{
    3f34:	b08a      	sub	sp, #40	; 0x28
    3f36:	4604      	mov	r4, r0
    3f38:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    3f3a:	f100 0808 	add.w	r8, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3f3e:	f000 809b 	beq.w	4078 <hci_evt_encode+0x14c>
	switch (node_rx->hdr.type) {
    3f42:	3b02      	subs	r3, #2
    3f44:	2b03      	cmp	r3, #3
    3f46:	f200 80cd 	bhi.w	40e4 <hci_evt_encode+0x1b8>
    3f4a:	e8df f003 	tbb	[pc, r3]
    3f4e:	5302      	.short	0x5302
    3f50:	5f53      	.short	0x5f53
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3f52:	4b67      	ldr	r3, [pc, #412]	; (40f0 <hci_evt_encode+0x1c4>)
    3f54:	9303      	str	r3, [sp, #12]
    3f56:	f64f 7304 	movw	r3, #65284	; 0xff04
    3f5a:	f8ad 3010 	strh.w	r3, [sp, #16]
    3f5e:	2302      	movs	r3, #2
    3f60:	f88d 3012 	strb.w	r3, [sp, #18]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3f64:	4b63      	ldr	r3, [pc, #396]	; (40f4 <hci_evt_encode+0x1c8>)
    3f66:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f6a:	2000      	movs	r0, #0
    3f6c:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    3f70:	ea50 0301 	orrs.w	r3, r0, r1
    3f74:	d03b      	beq.n	3fee <hci_evt_encode+0xc2>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    3f76:	4b60      	ldr	r3, [pc, #384]	; (40f8 <hci_evt_encode+0x1cc>)
    3f78:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f7c:	2100      	movs	r1, #0
    3f7e:	f002 0002 	and.w	r0, r2, #2
    3f82:	ea50 0301 	orrs.w	r3, r0, r1
    3f86:	d032      	beq.n	3fee <hci_evt_encode+0xc2>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    3f88:	7a22      	ldrb	r2, [r4, #8]
    3f8a:	7a63      	ldrb	r3, [r4, #9]
    3f8c:	f002 020f 	and.w	r2, r2, #15
    3f90:	2a01      	cmp	r2, #1
		data_len = (adv->len - BDADDR_SIZE);
    3f92:	bf1a      	itte	ne
    3f94:	1f9e      	subne	r6, r3, #6
    3f96:	b2f6      	uxtbne	r6, r6
		data_len = 0;
    3f98:	2600      	moveq	r6, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f9a:	4423      	add	r3, r4
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f9c:	f106 020b 	add.w	r2, r6, #11
    3fa0:	b2d2      	uxtb	r2, r2
    3fa2:	2102      	movs	r1, #2
    3fa4:	4628      	mov	r0, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3fa6:	7a9f      	ldrb	r7, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3fa8:	f7ff fc32 	bl	3810 <meta_evt>
	sep->num_reports = 1;
    3fac:	2301      	movs	r3, #1
    3fae:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    3fb0:	7a23      	ldrb	r3, [r4, #8]
    3fb2:	aa0a      	add	r2, sp, #40	; 0x28
    3fb4:	f003 030f 	and.w	r3, r3, #15
    3fb8:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3fba:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    3fbc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    3fc0:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    3fc2:	7a23      	ldrb	r3, [r4, #8]
    3fc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3fc8:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3fca:	2206      	movs	r2, #6
    3fcc:	f104 010a 	add.w	r1, r4, #10
    3fd0:	3003      	adds	r0, #3
    3fd2:	f7fc fb04 	bl	5de <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3fd6:	350a      	adds	r5, #10
	adv_info->length = data_len;
    3fd8:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3fdc:	427f      	negs	r7, r7
    3fde:	b27f      	sxtb	r7, r7
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3fe0:	4632      	mov	r2, r6
    3fe2:	f108 0108 	add.w	r1, r8, #8
    3fe6:	4628      	mov	r0, r5
    3fe8:	f7fc faf9 	bl	5de <memcpy>
	*prssi = rssi;
    3fec:	55af      	strb	r7, [r5, r6]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    3fee:	b00a      	add	sp, #40	; 0x28
    3ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3ff4:	7a03      	ldrb	r3, [r0, #8]
    3ff6:	f003 030f 	and.w	r3, r3, #15
    3ffa:	2b07      	cmp	r3, #7
    3ffc:	d1f7      	bne.n	3fee <hci_evt_encode+0xc2>
    3ffe:	7a43      	ldrb	r3, [r0, #9]
    4000:	2b00      	cmp	r3, #0
    4002:	d0f4      	beq.n	3fee <hci_evt_encode+0xc2>
    4004:	4640      	mov	r0, r8
    4006:	f7ff fc89 	bl	391c <le_adv_ext_report.isra.38.part.39>
    400a:	e7f0      	b.n	3fee <hci_evt_encode+0xc2>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    400c:	4b39      	ldr	r3, [pc, #228]	; (40f4 <hci_evt_encode+0x1c8>)
    400e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4012:	f100 060a 	add.w	r6, r0, #10
    4016:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    401a:	2000      	movs	r0, #0
    401c:	ea50 0301 	orrs.w	r3, r0, r1
    4020:	d008      	beq.n	4034 <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    4022:	4b35      	ldr	r3, [pc, #212]	; (40f8 <hci_evt_encode+0x1cc>)
    4024:	e9d3 2300 	ldrd	r2, r3, [r3]
    4028:	2100      	movs	r1, #0
    402a:	f402 2080 	and.w	r0, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    402e:	ea50 0301 	orrs.w	r3, r0, r1
    4032:	d110      	bne.n	4056 <hci_evt_encode+0x12a>
		addr.type = adv->tx_addr;
    4034:	7a23      	ldrb	r3, [r4, #8]
    4036:	ac0a      	add	r4, sp, #40	; 0x28
    4038:	f3c3 1380 	ubfx	r3, r3, #6, #1
    403c:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4040:	4631      	mov	r1, r6
    4042:	2206      	movs	r2, #6
    4044:	f10d 0005 	add.w	r0, sp, #5
    4048:	f7fc fac9 	bl	5de <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    404c:	a903      	add	r1, sp, #12
    404e:	4620      	mov	r0, r4
    4050:	f7ff fc28 	bl	38a4 <bt_addr_le_to_str.constprop.43>
    4054:	e7cb      	b.n	3fee <hci_evt_encode+0xc2>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4056:	2208      	movs	r2, #8
    4058:	2113      	movs	r1, #19
    405a:	4628      	mov	r0, r5
    405c:	f7ff fbd8 	bl	3810 <meta_evt>
	sep->handle = 0;
    4060:	2300      	movs	r3, #0
    4062:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    4064:	7a23      	ldrb	r3, [r4, #8]
    4066:	f3c3 1380 	ubfx	r3, r3, #6, #1
    406a:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    406c:	2206      	movs	r2, #6
    406e:	4631      	mov	r1, r6
    4070:	3002      	adds	r0, #2
    4072:	f7fc fab4 	bl	5de <memcpy>
    4076:	e7ba      	b.n	3fee <hci_evt_encode+0xc2>
	switch (pdu_data->llctrl.opcode) {
    4078:	7ac1      	ldrb	r1, [r0, #11]
    407a:	88c6      	ldrh	r6, [r0, #6]
    407c:	2909      	cmp	r1, #9
    407e:	d00b      	beq.n	4098 <hci_evt_encode+0x16c>
    4080:	290c      	cmp	r1, #12
    4082:	d010      	beq.n	40a6 <hci_evt_encode+0x17a>
    4084:	2907      	cmp	r1, #7
    4086:	d12d      	bne.n	40e4 <hci_evt_encode+0x1b8>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    4088:	7b03      	ldrb	r3, [r0, #12]
    408a:	2b0e      	cmp	r3, #14
    408c:	d1af      	bne.n	3fee <hci_evt_encode+0xc2>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    408e:	462b      	mov	r3, r5
    4090:	4632      	mov	r2, r6
    4092:	2100      	movs	r1, #0
    4094:	201a      	movs	r0, #26
    4096:	e003      	b.n	40a0 <hci_evt_encode+0x174>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    4098:	462b      	mov	r3, r5
    409a:	4632      	mov	r2, r6
    409c:	4641      	mov	r1, r8
    409e:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    40a0:	f7ff fbcc 	bl	383c <le_remote_feat_complete>
    40a4:	e7a3      	b.n	3fee <hci_evt_encode+0xc2>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    40a6:	4b13      	ldr	r3, [pc, #76]	; (40f4 <hci_evt_encode+0x1c8>)
    40a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    40ac:	f04f 0800 	mov.w	r8, #0
    40b0:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    40b4:	ea57 0308 	orrs.w	r3, r7, r8
    40b8:	d099      	beq.n	3fee <hci_evt_encode+0xc2>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    40ba:	2208      	movs	r2, #8
    40bc:	4628      	mov	r0, r5
    40be:	f7ff fb7a 	bl	37b6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    40c2:	2108      	movs	r1, #8
    40c4:	1868      	adds	r0, r5, r1
    40c6:	f005 f883 	bl	91d0 <net_buf_simple_add>
	ep->status = 0x00;
    40ca:	2300      	movs	r3, #0
    40cc:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    40ce:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    40d2:	7b23      	ldrb	r3, [r4, #12]
    40d4:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    40d6:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    40da:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    40dc:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    40e0:	80c3      	strh	r3, [r0, #6]
    40e2:	e784      	b.n	3fee <hci_evt_encode+0xc2>
		LL_ASSERT(0);
    40e4:	4040      	eors	r0, r0
    40e6:	f380 8811 	msr	BASEPRI, r0
    40ea:	f04f 0004 	mov.w	r0, #4
    40ee:	df02      	svc	2
    40f0:	ff030100 	.word	0xff030100
    40f4:	20002a18 	.word	0x20002a18
    40f8:	20002a20 	.word	0x20002a20

000040fc <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    40fc:	7903      	ldrb	r3, [r0, #4]
    40fe:	2b01      	cmp	r3, #1
    4100:	d00f      	beq.n	4122 <hci_get_class+0x26>
    4102:	2b0a      	cmp	r3, #10
    4104:	d815      	bhi.n	4132 <hci_get_class+0x36>
    4106:	2001      	movs	r0, #1
    4108:	fa00 f303 	lsl.w	r3, r0, r3
    410c:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4110:	d112      	bne.n	4138 <hci_get_class+0x3c>
    4112:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    4116:	d110      	bne.n	413a <hci_get_class+0x3e>
    4118:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    411c:	f343 1080 	sbfx	r0, r3, #6, #1
    4120:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4122:	7a03      	ldrb	r3, [r0, #8]
    4124:	f003 0303 	and.w	r3, r3, #3
    4128:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    412a:	bf0c      	ite	eq
    412c:	2002      	moveq	r0, #2
    412e:	2003      	movne	r0, #3
    4130:	4770      	bx	lr
			return -1;
    4132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4136:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    4138:	2002      	movs	r0, #2
	}
}
    413a:	4770      	bx	lr

0000413c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    413c:	4b06      	ldr	r3, [pc, #24]	; (4158 <hci_init+0x1c>)
    413e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4142:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4146:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    414a:	4b04      	ldr	r3, [pc, #16]	; (415c <hci_init+0x20>)
    414c:	201f      	movs	r0, #31
    414e:	2100      	movs	r1, #0
    4150:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    4154:	4770      	bx	lr
    4156:	bf00      	nop
    4158:	20002a18 	.word	0x20002a18
    415c:	20002a20 	.word	0x20002a20

00004160 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4160:	bf20      	wfe
	__SEV();
    4162:	bf40      	sev
	__WFE();
    4164:	bf20      	wfe
}
    4166:	4770      	bx	lr

00004168 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4168:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    416a:	4b0d      	ldr	r3, [pc, #52]	; (41a0 <pdu_len_cmp+0x38>)
{
    416c:	b089      	sub	sp, #36	; 0x24
    416e:	4605      	mov	r5, r0
    4170:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    4172:	aa01      	add	r2, sp, #4
    4174:	f103 0718 	add.w	r7, r3, #24
    4178:	6818      	ldr	r0, [r3, #0]
    417a:	6859      	ldr	r1, [r3, #4]
    417c:	4614      	mov	r4, r2
    417e:	c403      	stmia	r4!, {r0, r1}
    4180:	3308      	adds	r3, #8
    4182:	42bb      	cmp	r3, r7
    4184:	4622      	mov	r2, r4
    4186:	d1f7      	bne.n	4178 <pdu_len_cmp+0x10>
    4188:	881b      	ldrh	r3, [r3, #0]
    418a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    418c:	ab08      	add	r3, sp, #32
    418e:	441d      	add	r5, r3
    4190:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    4194:	1b83      	subs	r3, r0, r6
    4196:	4258      	negs	r0, r3
    4198:	4158      	adcs	r0, r3
    419a:	b009      	add	sp, #36	; 0x24
    419c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    419e:	bf00      	nop
    41a0:	0000a39b 	.word	0x0000a39b

000041a4 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    41a4:	6008      	str	r0, [r1, #0]
}
    41a6:	4770      	bx	lr

000041a8 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    41a8:	b918      	cbnz	r0, 41b2 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    41aa:	680b      	ldr	r3, [r1, #0]
    41ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    41b0:	600b      	str	r3, [r1, #0]
	}
}
    41b2:	4770      	bx	lr

000041b4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    41b4:	b918      	cbnz	r0, 41be <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    41b6:	680b      	ldr	r3, [r1, #0]
    41b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    41bc:	600b      	str	r3, [r1, #0]
	}
}
    41be:	4770      	bx	lr

000041c0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    41c0:	b570      	push	{r4, r5, r6, lr}
    41c2:	1d03      	adds	r3, r0, #4
    41c4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    41c6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    41c8:	429d      	cmp	r5, r3
    41ca:	d101      	bne.n	41d0 <chan_sel_remap+0x10>
    41cc:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    41ce:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    41d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    41d4:	2200      	movs	r2, #0
    41d6:	18a0      	adds	r0, r4, r2
    41d8:	2a08      	cmp	r2, #8
    41da:	b2c0      	uxtb	r0, r0
    41dc:	d101      	bne.n	41e2 <chan_sel_remap+0x22>
    41de:	4604      	mov	r4, r0
    41e0:	e7f2      	b.n	41c8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    41e2:	f016 0f01 	tst.w	r6, #1
    41e6:	d003      	beq.n	41f0 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    41e8:	2900      	cmp	r1, #0
    41ea:	d0f0      	beq.n	41ce <chan_sel_remap+0xe>
				chan_index--;
    41ec:	3901      	subs	r1, #1
    41ee:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    41f0:	0876      	lsrs	r6, r6, #1
    41f2:	3201      	adds	r2, #1
    41f4:	e7ef      	b.n	41d6 <chan_sel_remap+0x16>
	...

000041f8 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    41f8:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    41fa:	4a0c      	ldr	r2, [pc, #48]	; (422c <packet_rx_reserve_get+0x34>)
    41fc:	f892 313a 	ldrb.w	r3, [r2, #314]	; 0x13a
	    _radio.packet_rx_last) {
    4200:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
    4204:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    4206:	bf38      	it	cc
    4208:	f892 4138 	ldrbcc.w	r4, [r2, #312]	; 0x138
			_radio.packet_rx_last);
    420c:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
			_radio.packet_rx_last +
    4210:	bf38      	it	cc
    4212:	191b      	addcc	r3, r3, r4
    4214:	1a5b      	subs	r3, r3, r1
    4216:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4218:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    421a:	bf9b      	ittet	ls
    421c:	f892 1139 	ldrbls.w	r1, [r2, #313]	; 0x139
    4220:	f8d2 3134 	ldrls.w	r3, [r2, #308]	; 0x134
		return 0;
    4224:	2000      	movhi	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
    4226:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
}
    422a:	bd10      	pop	{r4, pc}
    422c:	20000280 	.word	0x20000280

00004230 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4230:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4232:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    4236:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    423a:	4299      	cmp	r1, r3
    423c:	d128      	bne.n	4290 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    423e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4242:	2b00      	cmp	r3, #0
    4244:	db26      	blt.n	4294 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    4246:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4248:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    424a:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    424e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4250:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4254:	4354      	muls	r4, r2
					      conn->supervision_reload *
    4256:	227d      	movs	r2, #125	; 0x7d
    4258:	4362      	muls	r2, r4
					      125 / 1000;
    425a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    425e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4262:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4266:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    426a:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    426c:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    4270:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    4272:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    4274:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    4278:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    427a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    427e:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    4280:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
    4284:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e
		conn->llcp_ack--;
    4288:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d

		return 0;
    428c:	4618      	mov	r0, r3
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
}
    428e:	bd30      	pop	{r4, r5, pc}
		return 1;
    4290:	2001      	movs	r0, #1
    4292:	e7fc      	b.n	428e <conn_update_req+0x5e>
	return 2;
    4294:	2002      	movs	r0, #2
    4296:	e7fa      	b.n	428e <conn_update_req+0x5e>

00004298 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    4298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    429c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    429e:	4294      	cmp	r4, r2
{
    42a0:	4681      	mov	r9, r0
    42a2:	460f      	mov	r7, r1
    42a4:	4690      	mov	r8, r2
	if (_first == last) {
    42a6:	d03d      	beq.n	4324 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    42a8:	4e1f      	ldr	r6, [pc, #124]	; (4328 <tx_cmplt_get+0x90>)
    42aa:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
    42ae:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    42b2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    42b4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    42b6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    42ba:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
    42be:	b222      	sxth	r2, r4
    42c0:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
    42c4:	f8b9 c000 	ldrh.w	ip, [r9]
    42c8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    42cc:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    42d0:	4594      	cmp	ip, r2
    42d2:	d120      	bne.n	4316 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    42d4:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    42d6:	2801      	cmp	r0, #1
    42d8:	f020 0303 	bic.w	r3, r0, #3
    42dc:	d90a      	bls.n	42f4 <tx_cmplt_get+0x5c>
    42de:	b1f3      	cbz	r3, 431e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    42e0:	1d02      	adds	r2, r0, #4
    42e2:	d01c      	beq.n	431e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    42e4:	7942      	ldrb	r2, [r0, #5]
    42e6:	b1d2      	cbz	r2, 431e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    42e8:	7902      	ldrb	r2, [r0, #4]
    42ea:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    42ee:	3a01      	subs	r2, #1
    42f0:	2a01      	cmp	r2, #1
    42f2:	d814      	bhi.n	431e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    42f4:	2201      	movs	r2, #1
			cmplt++;
    42f6:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    42f8:	604a      	str	r2, [r1, #4]
			cmplt++;
    42fa:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    42fc:	b113      	cbz	r3, 4304 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    42fe:	4651      	mov	r1, sl
    4300:	f7fe f9b1 	bl	2666 <mem_release>
		}

		_first = _first + 1;
    4304:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    4306:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
		_first = _first + 1;
    430a:	b2e4      	uxtb	r4, r4
			_first = 0;
    430c:	42a2      	cmp	r2, r4
    430e:	bf08      	it	eq
    4310:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4312:	4544      	cmp	r4, r8
    4314:	d1d3      	bne.n	42be <tx_cmplt_get+0x26>

	*first = _first;
    4316:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    4318:	4628      	mov	r0, r5
    431a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    431e:	f8c1 b004 	str.w	fp, [r1, #4]
    4322:	e7eb      	b.n	42fc <tx_cmplt_get+0x64>
		return 0;
    4324:	2500      	movs	r5, #0
    4326:	e7f7      	b.n	4318 <tx_cmplt_get+0x80>
    4328:	20000280 	.word	0x20000280

0000432c <connection_get>:
{
    432c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    432e:	4b09      	ldr	r3, [pc, #36]	; (4354 <connection_get+0x28>)
    4330:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    4334:	4282      	cmp	r2, r0
{
    4336:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    4338:	d90a      	bls.n	4350 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    433a:	4602      	mov	r2, r0
    433c:	f44f 7182 	mov.w	r1, #260	; 0x104
    4340:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    4344:	f7fe f9a4 	bl	2690 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4348:	b110      	cbz	r0, 4350 <connection_get+0x24>
    434a:	8c03      	ldrh	r3, [r0, #32]
    434c:	42a3      	cmp	r3, r4
    434e:	d000      	beq.n	4352 <connection_get+0x26>
	return 0;
    4350:	2000      	movs	r0, #0
}
    4352:	bd10      	pop	{r4, pc}
    4354:	20000280 	.word	0x20000280

00004358 <role_disable>:
{
    4358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    435c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    435e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    4360:	2805      	cmp	r0, #5
{
    4362:	4605      	mov	r5, r0
    4364:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4366:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    4368:	d00e      	beq.n	4388 <role_disable+0x30>
    436a:	2806      	cmp	r0, #6
    436c:	f000 808d 	beq.w	448a <role_disable+0x132>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4370:	f240 8085 	bls.w	447e <role_disable+0x126>
			conn_handle = ticker_id_primary -
    4374:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    4376:	b280      	uxth	r0, r0
    4378:	f7ff ffd8 	bl	432c <connection_get>
			if (!conn) {
    437c:	2800      	cmp	r0, #0
    437e:	f000 80d6 	beq.w	452e <role_disable+0x1d6>
			ticks_active_to_start =
    4382:	e9d0 6800 	ldrd	r6, r8, [r0]
		break;
    4386:	e00f      	b.n	43a8 <role_disable+0x50>
		ticks_xtal_to_start =
    4388:	4b6a      	ldr	r3, [pc, #424]	; (4534 <role_disable+0x1dc>)
		ticks_active_to_start =
    438a:	e9d3 6806 	ldrd	r6, r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    438e:	ab02      	add	r3, sp, #8
    4390:	9300      	str	r3, [sp, #0]
    4392:	460a      	mov	r2, r1
    4394:	4b68      	ldr	r3, [pc, #416]	; (4538 <role_disable+0x1e0>)
    4396:	2103      	movs	r1, #3
    4398:	2000      	movs	r0, #0
    439a:	f7ff f833 	bl	3404 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    439e:	2802      	cmp	r0, #2
    43a0:	d066      	beq.n	4470 <role_disable+0x118>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    43a2:	9b02      	ldr	r3, [sp, #8]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d167      	bne.n	4478 <role_disable+0x120>
	LL_ASSERT(!_radio.ticker_id_stop);
    43a8:	4c62      	ldr	r4, [pc, #392]	; (4534 <role_disable+0x1dc>)
    43aa:	7ca3      	ldrb	r3, [r4, #18]
    43ac:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    43b0:	2b00      	cmp	r3, #0
    43b2:	d164      	bne.n	447e <role_disable+0x126>
	ret_cb = TICKER_STATUS_BUSY;
    43b4:	ab06      	add	r3, sp, #24
    43b6:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    43b8:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    43ba:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43be:	2103      	movs	r1, #3
    43c0:	9300      	str	r3, [sp, #0]
    43c2:	462a      	mov	r2, r5
    43c4:	4b5c      	ldr	r3, [pc, #368]	; (4538 <role_disable+0x1e0>)
    43c6:	f7ff f81d 	bl	3404 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    43ca:	2802      	cmp	r0, #2
    43cc:	d061      	beq.n	4492 <role_disable+0x13a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    43ce:	9b02      	ldr	r3, [sp, #8]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d145      	bne.n	4460 <role_disable+0x108>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    43d4:	7c23      	ldrb	r3, [r4, #16]
    43d6:	42ab      	cmp	r3, r5
    43d8:	d002      	beq.n	43e0 <role_disable+0x88>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    43da:	7c63      	ldrb	r3, [r4, #17]
    43dc:	42ab      	cmp	r3, r5
    43de:	d13b      	bne.n	4458 <role_disable+0x100>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    43e0:	ab06      	add	r3, sp, #24
    43e2:	2202      	movs	r2, #2
    43e4:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43e8:	2200      	movs	r2, #0
    43ea:	9300      	str	r3, [sp, #0]
    43ec:	2103      	movs	r1, #3
    43ee:	4b52      	ldr	r3, [pc, #328]	; (4538 <role_disable+0x1e0>)
    43f0:	4610      	mov	r0, r2
    43f2:	f7ff f807 	bl	3404 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    43f6:	2802      	cmp	r0, #2
    43f8:	d107      	bne.n	440a <role_disable+0xb2>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    43fa:	2201      	movs	r2, #1
    43fc:	4611      	mov	r1, r2
    43fe:	2003      	movs	r0, #3
    4400:	f7fe f9a6 	bl	2750 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    4404:	9b03      	ldr	r3, [sp, #12]
    4406:	2b02      	cmp	r3, #2
    4408:	d039      	beq.n	447e <role_disable+0x126>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    440a:	9803      	ldr	r0, [sp, #12]
    440c:	2800      	cmp	r0, #0
    440e:	d15c      	bne.n	44ca <role_disable+0x172>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4410:	2302      	movs	r3, #2
    4412:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    4414:	7c23      	ldrb	r3, [r4, #16]
    4416:	2b00      	cmp	r3, #0
    4418:	d031      	beq.n	447e <role_disable+0x126>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    441a:	ab04      	add	r3, sp, #16
    441c:	9300      	str	r3, [sp, #0]
    441e:	2201      	movs	r2, #1
    4420:	4b45      	ldr	r3, [pc, #276]	; (4538 <role_disable+0x1e0>)
		_radio.ticker_id_prepare = 0;
    4422:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4424:	2103      	movs	r1, #3
    4426:	f7fe ffed 	bl	3404 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    442a:	2802      	cmp	r0, #2
    442c:	d107      	bne.n	443e <role_disable+0xe6>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    442e:	2201      	movs	r2, #1
    4430:	4611      	mov	r1, r2
    4432:	2003      	movs	r0, #3
    4434:	f7fe f98c 	bl	2750 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    4438:	9b04      	ldr	r3, [sp, #16]
    443a:	2b02      	cmp	r3, #2
    443c:	d01f      	beq.n	447e <role_disable+0x126>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    443e:	9a04      	ldr	r2, [sp, #16]
    4440:	2a00      	cmp	r2, #0
    4442:	d134      	bne.n	44ae <role_disable+0x156>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4444:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4448:	45b0      	cmp	r8, r6
    444a:	d93c      	bls.n	44c6 <role_disable+0x16e>
				ret = mayfly_enqueue(
    444c:	4b3b      	ldr	r3, [pc, #236]	; (453c <role_disable+0x1e4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    444e:	4611      	mov	r1, r2
    4450:	2003      	movs	r0, #3
    4452:	f7fe f9a5 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4456:	b990      	cbnz	r0, 447e <role_disable+0x126>
	if (!_radio.ticker_id_stop) {
    4458:	7ca3      	ldrb	r3, [r4, #18]
    445a:	b90b      	cbnz	r3, 4460 <role_disable+0x108>
		ret_cb = TICKER_STATUS_FAILURE;
    445c:	2301      	movs	r3, #1
    445e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    4460:	2300      	movs	r3, #0
    4462:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    4464:	9802      	ldr	r0, [sp, #8]
}
    4466:	b006      	add	sp, #24
    4468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    446c:	f7ff fe78 	bl	4160 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4470:	9b02      	ldr	r3, [sp, #8]
    4472:	2b02      	cmp	r3, #2
    4474:	d0fa      	beq.n	446c <role_disable+0x114>
    4476:	e794      	b.n	43a2 <role_disable+0x4a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4478:	9b02      	ldr	r3, [sp, #8]
    447a:	2b01      	cmp	r3, #1
    447c:	d094      	beq.n	43a8 <role_disable+0x50>
		LL_ASSERT(0);
    447e:	4040      	eors	r0, r0
    4480:	f380 8811 	msr	BASEPRI, r0
    4484:	f04f 0004 	mov.w	r0, #4
    4488:	df02      	svc	2
		ticks_xtal_to_start =
    448a:	4b2a      	ldr	r3, [pc, #168]	; (4534 <role_disable+0x1dc>)
		ticks_active_to_start =
    448c:	e9d3 6834 	ldrd	r6, r8, [r3, #208]	; 0xd0
		break;
    4490:	e78a      	b.n	43a8 <role_disable+0x50>
		if (_radio.ticker_id_event == ticker_id_primary) {
    4492:	7c63      	ldrb	r3, [r4, #17]
    4494:	42ab      	cmp	r3, r5
    4496:	d104      	bne.n	44a2 <role_disable+0x14a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4498:	2201      	movs	r2, #1
    449a:	4611      	mov	r1, r2
    449c:	2003      	movs	r0, #3
    449e:	f7fe f957 	bl	2750 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    44a2:	9b02      	ldr	r3, [sp, #8]
    44a4:	2b02      	cmp	r3, #2
    44a6:	d192      	bne.n	43ce <role_disable+0x76>
			cpu_sleep();
    44a8:	f7ff fe5a 	bl	4160 <cpu_sleep>
    44ac:	e7f9      	b.n	44a2 <role_disable+0x14a>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    44ae:	9b04      	ldr	r3, [sp, #16]
    44b0:	2b01      	cmp	r3, #1
    44b2:	d1e4      	bne.n	447e <role_disable+0x126>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    44b4:	2200      	movs	r2, #0
    44b6:	4611      	mov	r1, r2
    44b8:	4b20      	ldr	r3, [pc, #128]	; (453c <role_disable+0x1e4>)
    44ba:	2003      	movs	r0, #3
    44bc:	f7fe f970 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    44c0:	4602      	mov	r2, r0
    44c2:	2800      	cmp	r0, #0
    44c4:	d1db      	bne.n	447e <role_disable+0x126>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    44c6:	4b1e      	ldr	r3, [pc, #120]	; (4540 <role_disable+0x1e8>)
    44c8:	e7c1      	b.n	444e <role_disable+0xf6>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    44ca:	9d03      	ldr	r5, [sp, #12]
    44cc:	2d01      	cmp	r5, #1
    44ce:	d1d6      	bne.n	447e <role_disable+0x126>
		if (ticker_id_stop != TICKER_NULL) {
    44d0:	2fff      	cmp	r7, #255	; 0xff
    44d2:	d019      	beq.n	4508 <role_disable+0x1b0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    44d4:	ab06      	add	r3, sp, #24
    44d6:	2202      	movs	r2, #2
    44d8:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    44dc:	2103      	movs	r1, #3
    44de:	9300      	str	r3, [sp, #0]
    44e0:	463a      	mov	r2, r7
    44e2:	4b15      	ldr	r3, [pc, #84]	; (4538 <role_disable+0x1e0>)
    44e4:	2000      	movs	r0, #0
    44e6:	f7fe ff8d 	bl	3404 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    44ea:	2802      	cmp	r0, #2
    44ec:	d107      	bne.n	44fe <role_disable+0x1a6>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    44ee:	462a      	mov	r2, r5
    44f0:	4629      	mov	r1, r5
    44f2:	2003      	movs	r0, #3
    44f4:	f7fe f92c 	bl	2750 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    44f8:	9b05      	ldr	r3, [sp, #20]
    44fa:	2b02      	cmp	r3, #2
    44fc:	d0bf      	beq.n	447e <role_disable+0x126>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    44fe:	9b05      	ldr	r3, [sp, #20]
    4500:	b113      	cbz	r3, 4508 <role_disable+0x1b0>
    4502:	9b05      	ldr	r3, [sp, #20]
    4504:	2b01      	cmp	r3, #1
    4506:	d1ba      	bne.n	447e <role_disable+0x126>
		if (_radio.role != ROLE_NONE) {
    4508:	7ce3      	ldrb	r3, [r4, #19]
    450a:	2b00      	cmp	r3, #0
    450c:	d0a4      	beq.n	4458 <role_disable+0x100>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    450e:	4b0d      	ldr	r3, [pc, #52]	; (4544 <role_disable+0x1ec>)
    4510:	2204      	movs	r2, #4
    4512:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4514:	2200      	movs	r2, #0
    4516:	4611      	mov	r1, r2
    4518:	2003      	movs	r0, #3
    451a:	f7fe f941 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    451e:	2800      	cmp	r0, #0
    4520:	d1ad      	bne.n	447e <role_disable+0x126>
			while (_radio.role != ROLE_NONE) {
    4522:	7ce3      	ldrb	r3, [r4, #19]
    4524:	2b00      	cmp	r3, #0
    4526:	d097      	beq.n	4458 <role_disable+0x100>
				cpu_sleep();
    4528:	f7ff fe1a 	bl	4160 <cpu_sleep>
    452c:	e7f9      	b.n	4522 <role_disable+0x1ca>
				return 1;
    452e:	2001      	movs	r0, #1
    4530:	e799      	b.n	4466 <role_disable+0x10e>
    4532:	bf00      	nop
    4534:	20000280 	.word	0x20000280
    4538:	000041a5 	.word	0x000041a5
    453c:	20002a68 	.word	0x20002a68
    4540:	20002b08 	.word	0x20002b08
    4544:	20002a98 	.word	0x20002a98

00004548 <sched_after_mstr_free_slot_get>:
{
    4548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    454c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    454e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    4550:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    4552:	f8df 9114 	ldr.w	r9, [pc, #276]	; 4668 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    4556:	f88d 501f 	strb.w	r5, [sp, #31]
{
    455a:	4680      	mov	r8, r0
    455c:	4693      	mov	fp, r2
    455e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    4560:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    4564:	601c      	str	r4, [r3, #0]
    4566:	9408      	str	r4, [sp, #32]
    4568:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    456a:	2302      	movs	r3, #2
    456c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    456e:	ab09      	add	r3, sp, #36	; 0x24
    4570:	9302      	str	r3, [sp, #8]
    4572:	4b3b      	ldr	r3, [pc, #236]	; (4660 <sched_after_mstr_free_slot_get+0x118>)
    4574:	9301      	str	r3, [sp, #4]
    4576:	ab08      	add	r3, sp, #32
    4578:	9300      	str	r3, [sp, #0]
    457a:	f10d 021f 	add.w	r2, sp, #31
    457e:	465b      	mov	r3, fp
    4580:	4641      	mov	r1, r8
    4582:	2000      	movs	r0, #0
    4584:	f7fe ff78 	bl	3478 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    4588:	2802      	cmp	r0, #2
    458a:	d00b      	beq.n	45a4 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    458c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    458e:	b16b      	cbz	r3, 45ac <sched_after_mstr_free_slot_get+0x64>
    4590:	4040      	eors	r0, r0
    4592:	f380 8811 	msr	BASEPRI, r0
    4596:	f04f 0004 	mov.w	r0, #4
    459a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    459c:	4641      	mov	r1, r8
    459e:	2000      	movs	r0, #0
    45a0:	f7fe ffe2 	bl	3568 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    45a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    45a6:	2b02      	cmp	r3, #2
    45a8:	d0f8      	beq.n	459c <sched_after_mstr_free_slot_get+0x54>
    45aa:	e7ef      	b.n	458c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    45ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    45b0:	2aff      	cmp	r2, #255	; 0xff
    45b2:	d04d      	beq.n	4650 <sched_after_mstr_free_slot_get+0x108>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    45b4:	2a06      	cmp	r2, #6
    45b6:	d9d8      	bls.n	456a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    45b8:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    45bc:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    45be:	429a      	cmp	r2, r3
    45c0:	dad3      	bge.n	456a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    45c2:	3a07      	subs	r2, #7
    45c4:	b292      	uxth	r2, r2
    45c6:	f44f 7182 	mov.w	r1, #260	; 0x104
    45ca:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    45ce:	f7fe f85f 	bl	2690 <mem_get>
		if (conn && !conn->role) {
    45d2:	2800      	cmp	r0, #0
    45d4:	d0c9      	beq.n	456a <sched_after_mstr_free_slot_get+0x22>
    45d6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    45da:	2b00      	cmp	r3, #0
    45dc:	dbc5      	blt.n	456a <sched_after_mstr_free_slot_get+0x22>
    45de:	e9d0 3c00 	ldrd	r3, ip, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    45e2:	2b00      	cmp	r3, #0
			u32_t ticks_to_expire_normal = ticks_to_expire;
    45e4:	9a08      	ldr	r2, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    45e6:	da12      	bge.n	460e <sched_after_mstr_free_slot_get+0xc6>
    45e8:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    45ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    45ee:	458c      	cmp	ip, r1
    45f0:	bf2c      	ite	cs
    45f2:	4462      	addcs	r2, ip
    45f4:	1852      	addcc	r2, r2, r1
				ticks_to_expire_normal -=
    45f6:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    45f8:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    45fa:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    45fc:	f101 0104 	add.w	r1, r1, #4
    4600:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    4602:	d108      	bne.n	4616 <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
    4604:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    4608:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    460a:	4616      	mov	r6, r2
    460c:	e7ad      	b.n	456a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    460e:	4563      	cmp	r3, ip
    4610:	bf38      	it	cc
    4612:	4663      	movcc	r3, ip
    4614:	e7f0      	b.n	45f8 <sched_after_mstr_free_slot_get+0xb0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    4616:	4631      	mov	r1, r6
    4618:	4610      	mov	r0, r2
    461a:	9305      	str	r3, [sp, #20]
    461c:	9204      	str	r2, [sp, #16]
    461e:	f7fe ffbb 	bl	3598 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    4622:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    4626:	4288      	cmp	r0, r1
    4628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    462c:	d9ea      	bls.n	4604 <sched_after_mstr_free_slot_get+0xbc>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    462e:	480d      	ldr	r0, [pc, #52]	; (4664 <sched_after_mstr_free_slot_get+0x11c>)
    4630:	4434      	add	r4, r6
    4632:	fba4 0100 	umull	r0, r1, r4, r0
    4636:	2307      	movs	r3, #7
    4638:	fb03 1104 	mla	r1, r3, r4, r1
    463c:	a306      	add	r3, pc, #24	; (adr r3, 4658 <sched_after_mstr_free_slot_get+0x110>)
    463e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4642:	f7fb fe11 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    4646:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    4648:	6038      	str	r0, [r7, #0]
}
    464a:	b00b      	add	sp, #44	; 0x2c
    464c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    4650:	2dff      	cmp	r5, #255	; 0xff
    4652:	d1ec      	bne.n	462e <sched_after_mstr_free_slot_get+0xe6>
    4654:	e7f9      	b.n	464a <sched_after_mstr_free_slot_get+0x102>
    4656:	bf00      	nop
    4658:	3b9aca00 	.word	0x3b9aca00
    465c:	00000000 	.word	0x00000000
    4660:	000041a5 	.word	0x000041a5
    4664:	1afd498d 	.word	0x1afd498d
    4668:	20000280 	.word	0x20000280

0000466c <isr_adv_ci_adva_check>:
{
    466c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    466e:	7804      	ldrb	r4, [r0, #0]
    4670:	780a      	ldrb	r2, [r1, #0]
    4672:	f3c4 1380 	ubfx	r3, r4, #6, #1
    4676:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    467a:	d119      	bne.n	46b0 <isr_adv_ci_adva_check+0x44>
    467c:	f004 040f 	and.w	r4, r4, #15
    4680:	2c01      	cmp	r4, #1
    4682:	f100 0502 	add.w	r5, r0, #2
    4686:	f101 0608 	add.w	r6, r1, #8
    468a:	d008      	beq.n	469e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    468c:	2206      	movs	r2, #6
    468e:	4631      	mov	r1, r6
    4690:	4628      	mov	r0, r5
    4692:	f7fb ff94 	bl	5be <memcmp>
			 BDADDR_SIZE)) ||
    4696:	fab0 f080 	clz	r0, r0
    469a:	0940      	lsrs	r0, r0, #5
}
    469c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    469e:	2206      	movs	r2, #6
    46a0:	4631      	mov	r1, r6
    46a2:	4628      	mov	r0, r5
    46a4:	f7fb ff8b 	bl	5be <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    46a8:	2800      	cmp	r0, #0
    46aa:	d1ef      	bne.n	468c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    46ac:	4620      	mov	r0, r4
    46ae:	e7f5      	b.n	469c <isr_adv_ci_adva_check+0x30>
    46b0:	2000      	movs	r0, #0
    46b2:	e7f3      	b.n	469c <isr_adv_ci_adva_check+0x30>

000046b4 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    46b4:	4a0b      	ldr	r2, [pc, #44]	; (46e4 <rx_fc_lock+0x30>)
    46b6:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    46ba:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
    46be:	4299      	cmp	r1, r3
    46c0:	d10e      	bne.n	46e0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    46c2:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    46c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    46ca:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
    46ce:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    46d2:	3301      	adds	r3, #1
    46d4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    46d6:	2b03      	cmp	r3, #3
    46d8:	bf08      	it	eq
    46da:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    46dc:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
	}
}
    46e0:	4770      	bx	lr
    46e2:	bf00      	nop
    46e4:	20000280 	.word	0x20000280

000046e8 <chan_set.part.24>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    46e8:	4040      	eors	r0, r0
    46ea:	f380 8811 	msr	BASEPRI, r0
    46ee:	f04f 0004 	mov.w	r0, #4
    46f2:	df02      	svc	2

000046f4 <ticker_success_assert>:
{
    46f4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    46f6:	b108      	cbz	r0, 46fc <ticker_success_assert+0x8>
    46f8:	f7ff fff6 	bl	46e8 <chan_set.part.24>
}
    46fc:	bd08      	pop	{r3, pc}
	...

00004700 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    4700:	2801      	cmp	r0, #1
{
    4702:	b508      	push	{r3, lr}
    4704:	4b09      	ldr	r3, [pc, #36]	; (472c <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    4706:	d107      	bne.n	4718 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    4708:	7c9a      	ldrb	r2, [r3, #18]
    470a:	2a05      	cmp	r2, #5
    470c:	d102      	bne.n	4714 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    470e:	2200      	movs	r2, #0
    4710:	749a      	strb	r2, [r3, #18]
}
    4712:	bd08      	pop	{r3, pc}
    4714:	f7ff ffe8 	bl	46e8 <chan_set.part.24>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    4718:	7c1b      	ldrb	r3, [r3, #16]
    471a:	2b05      	cmp	r3, #5
    471c:	d1f9      	bne.n	4712 <ticker_stop_adv_assert+0x12>
    471e:	4040      	eors	r0, r0
    4720:	f380 8811 	msr	BASEPRI, r0
    4724:	f04f 0004 	mov.w	r0, #4
    4728:	df02      	svc	2
    472a:	bf00      	nop
    472c:	20000280 	.word	0x20000280

00004730 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    4730:	2801      	cmp	r0, #1
{
    4732:	b508      	push	{r3, lr}
    4734:	4b09      	ldr	r3, [pc, #36]	; (475c <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    4736:	d107      	bne.n	4748 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    4738:	7c9a      	ldrb	r2, [r3, #18]
    473a:	2a06      	cmp	r2, #6
    473c:	d102      	bne.n	4744 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    473e:	2200      	movs	r2, #0
    4740:	749a      	strb	r2, [r3, #18]
}
    4742:	bd08      	pop	{r3, pc}
    4744:	f7ff ffd0 	bl	46e8 <chan_set.part.24>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    4748:	7c1b      	ldrb	r3, [r3, #16]
    474a:	2b06      	cmp	r3, #6
    474c:	d1f9      	bne.n	4742 <ticker_stop_scan_assert+0x12>
    474e:	4040      	eors	r0, r0
    4750:	f380 8811 	msr	BASEPRI, r0
    4754:	f04f 0004 	mov.w	r0, #4
    4758:	df02      	svc	2
    475a:	bf00      	nop
    475c:	20000280 	.word	0x20000280

00004760 <ticker_update_adv_assert>:
{
    4760:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    4762:	b128      	cbz	r0, 4770 <ticker_update_adv_assert+0x10>
    4764:	4b03      	ldr	r3, [pc, #12]	; (4774 <ticker_update_adv_assert+0x14>)
    4766:	7c9b      	ldrb	r3, [r3, #18]
    4768:	2b05      	cmp	r3, #5
    476a:	d001      	beq.n	4770 <ticker_update_adv_assert+0x10>
    476c:	f7ff ffbc 	bl	46e8 <chan_set.part.24>
}
    4770:	bd08      	pop	{r3, pc}
    4772:	bf00      	nop
    4774:	20000280 	.word	0x20000280

00004778 <ticker_update_slave_assert>:
{
    4778:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    477a:	b130      	cbz	r0, 478a <ticker_update_slave_assert+0x12>
    477c:	4b03      	ldr	r3, [pc, #12]	; (478c <ticker_update_slave_assert+0x14>)
    477e:	7c9b      	ldrb	r3, [r3, #18]
    4780:	b2c9      	uxtb	r1, r1
    4782:	4299      	cmp	r1, r3
    4784:	d001      	beq.n	478a <ticker_update_slave_assert+0x12>
    4786:	f7ff ffaf 	bl	46e8 <chan_set.part.24>
}
    478a:	bd08      	pop	{r3, pc}
    478c:	20000280 	.word	0x20000280

00004790 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    4790:	4b04      	ldr	r3, [pc, #16]	; (47a4 <ticker_job_disable+0x14>)
    4792:	7d1b      	ldrb	r3, [r3, #20]
    4794:	b123      	cbz	r3, 47a0 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4796:	2101      	movs	r1, #1
    4798:	2200      	movs	r2, #0
    479a:	4608      	mov	r0, r1
    479c:	f7fd bfd8 	b.w	2750 <mayfly_enable>
}
    47a0:	4770      	bx	lr
    47a2:	bf00      	nop
    47a4:	20000280 	.word	0x20000280

000047a8 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    47a8:	2806      	cmp	r0, #6
{
    47aa:	b510      	push	{r4, lr}
    47ac:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    47ae:	d90a      	bls.n	47c6 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    47b0:	4b09      	ldr	r3, [pc, #36]	; (47d8 <hdr_conn_get+0x30>)
    47b2:	1fc2      	subs	r2, r0, #7
    47b4:	b292      	uxth	r2, r2
    47b6:	f44f 7182 	mov.w	r1, #260	; 0x104
    47ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    47be:	f7fd ff67 	bl	2690 <mem_get>
    47c2:	6020      	str	r0, [r4, #0]
}
    47c4:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    47c6:	2805      	cmp	r0, #5
    47c8:	d004      	beq.n	47d4 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    47ca:	2806      	cmp	r0, #6
	return NULL;
    47cc:	4803      	ldr	r0, [pc, #12]	; (47dc <hdr_conn_get+0x34>)
    47ce:	bf18      	it	ne
    47d0:	2000      	movne	r0, #0
    47d2:	e7f7      	b.n	47c4 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    47d4:	4802      	ldr	r0, [pc, #8]	; (47e0 <hdr_conn_get+0x38>)
    47d6:	e7f5      	b.n	47c4 <hdr_conn_get+0x1c>
    47d8:	20000280 	.word	0x20000280
    47dc:	20000350 	.word	0x20000350
    47e0:	20000298 	.word	0x20000298

000047e4 <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    47e4:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    47e6:	4b0a      	ldr	r3, [pc, #40]	; (4810 <mayfly_xtal_retain.part.16+0x2c>)
    47e8:	2200      	movs	r2, #0
    47ea:	701a      	strb	r2, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    47ec:	4b09      	ldr	r3, [pc, #36]	; (4814 <mayfly_xtal_retain.part.16+0x30>)
    47ee:	f1a3 0110 	sub.w	r1, r3, #16
			retval = mayfly_enqueue(caller_id,
    47f2:	2801      	cmp	r0, #1
    47f4:	bf18      	it	ne
    47f6:	460b      	movne	r3, r1
    47f8:	4611      	mov	r1, r2
    47fa:	f7fd ffd1 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    47fe:	b128      	cbz	r0, 480c <mayfly_xtal_retain.part.16+0x28>
    4800:	4040      	eors	r0, r0
    4802:	f380 8811 	msr	BASEPRI, r0
    4806:	f04f 0004 	mov.w	r0, #4
    480a:	df02      	svc	2
}
    480c:	bd08      	pop	{r3, pc}
    480e:	bf00      	nop
    4810:	20000488 	.word	0x20000488
    4814:	20002ae8 	.word	0x20002ae8

00004818 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4818:	2200      	movs	r2, #0
{
    481a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    481c:	4611      	mov	r1, r2
    481e:	4b04      	ldr	r3, [pc, #16]	; (4830 <event_active+0x18>)
    4820:	4610      	mov	r0, r2
    4822:	f7fd ffbd 	bl	27a0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4826:	b108      	cbz	r0, 482c <event_active+0x14>
    4828:	f7ff ff5e 	bl	46e8 <chan_set.part.24>
}
    482c:	bd08      	pop	{r3, pc}
    482e:	bf00      	nop
    4830:	20002a38 	.word	0x20002a38

00004834 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4834:	2200      	movs	r2, #0
{
    4836:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4838:	4611      	mov	r1, r2
    483a:	4b04      	ldr	r3, [pc, #16]	; (484c <event_xtal+0x18>)
    483c:	4610      	mov	r0, r2
    483e:	f7fd ffaf 	bl	27a0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4842:	b108      	cbz	r0, 4848 <event_xtal+0x14>
    4844:	f7ff ff50 	bl	46e8 <chan_set.part.24>
}
    4848:	bd08      	pop	{r3, pc}
    484a:	bf00      	nop
    484c:	20002ab8 	.word	0x20002ab8

00004850 <mayfly_radio_active>:
{
    4850:	b508      	push	{r3, lr}
    4852:	4a0a      	ldr	r2, [pc, #40]	; (487c <mayfly_radio_active+0x2c>)
    4854:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    4856:	b138      	cbz	r0, 4868 <mayfly_radio_active+0x18>
		if (s_active++) {
    4858:	1c59      	adds	r1, r3, #1
    485a:	7011      	strb	r1, [r2, #0]
    485c:	b963      	cbnz	r3, 4878 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    485e:	2001      	movs	r0, #1
}
    4860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    4864:	f003 bb88 	b.w	7f78 <radio_active_callback>
		LL_ASSERT(s_active);
    4868:	b90b      	cbnz	r3, 486e <mayfly_radio_active+0x1e>
    486a:	f7ff ff3d 	bl	46e8 <chan_set.part.24>
		if (--s_active) {
    486e:	3b01      	subs	r3, #1
    4870:	b2db      	uxtb	r3, r3
    4872:	7013      	strb	r3, [r2, #0]
    4874:	2b00      	cmp	r3, #0
    4876:	d0f3      	beq.n	4860 <mayfly_radio_active+0x10>
}
    4878:	bd08      	pop	{r3, pc}
    487a:	bf00      	nop
    487c:	20000434 	.word	0x20000434

00004880 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    4880:	2000      	movs	r0, #0
    4882:	f7ff bfe5 	b.w	4850 <mayfly_radio_active>
	...

00004888 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    4888:	b2c0      	uxtb	r0, r0
{
    488a:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    488c:	1f03      	subs	r3, r0, #4
    488e:	2b01      	cmp	r3, #1
    4890:	d901      	bls.n	4896 <mayfly_radio_stop+0xe>
    4892:	f7ff ff29 	bl	46e8 <chan_set.part.24>
	radio_used = ((_radio.state != STATE_NONE) &&
    4896:	4a08      	ldr	r2, [pc, #32]	; (48b8 <mayfly_radio_stop+0x30>)
    4898:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    489a:	b113      	cbz	r3, 48a2 <mayfly_radio_stop+0x1a>
	radio_used = ((_radio.state != STATE_NONE) &&
    489c:	3b04      	subs	r3, #4
    489e:	2b01      	cmp	r3, #1
    48a0:	d806      	bhi.n	48b0 <mayfly_radio_stop+0x28>
	if (radio_used || !radio_is_idle()) {
    48a2:	f004 f8c1 	bl	8a28 <radio_is_idle>
    48a6:	b928      	cbnz	r0, 48b4 <mayfly_radio_stop+0x2c>
}
    48a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    48ac:	f004 b88a 	b.w	89c4 <radio_disable>
			_radio.state = state;
    48b0:	7510      	strb	r0, [r2, #20]
    48b2:	e7f9      	b.n	48a8 <mayfly_radio_stop+0x20>
}
    48b4:	bd08      	pop	{r3, pc}
    48b6:	bf00      	nop
    48b8:	20000280 	.word	0x20000280

000048bc <rx_packet_set>:
{
    48bc:	b538      	push	{r3, r4, r5, lr}
    48be:	4605      	mov	r5, r0
    48c0:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    48c2:	2100      	movs	r1, #0
    48c4:	4608      	mov	r0, r1
    48c6:	f003 ffe3 	bl	8890 <radio_phy_set>
	if (conn->enc_rx) {
    48ca:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    48ce:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    48d0:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    48d4:	d50d      	bpl.n	48f2 <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    48d6:	211f      	movs	r1, #31
    48d8:	2008      	movs	r0, #8
    48da:	f004 f81f 	bl	891c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    48de:	4622      	mov	r2, r4
    48e0:	2100      	movs	r1, #0
    48e2:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    48e6:	f004 fa51 	bl	8d8c <radio_ccm_rx_pkt_set>
}
    48ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    48ee:	f004 b843 	b.w	8978 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    48f2:	2008      	movs	r0, #8
    48f4:	211b      	movs	r1, #27
    48f6:	f004 f811 	bl	891c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    48fa:	4620      	mov	r0, r4
    48fc:	e7f5      	b.n	48ea <rx_packet_set+0x2e>
	...

00004900 <pdu_node_tx_release>:
{
    4900:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    4902:	4a10      	ldr	r2, [pc, #64]	; (4944 <pdu_node_tx_release+0x44>)
    4904:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
    4908:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
    490c:	3301      	adds	r3, #1
    490e:	b2db      	uxtb	r3, r3
		last = 0;
    4910:	429c      	cmp	r4, r3
    4912:	bf08      	it	eq
    4914:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    4916:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
    491a:	429c      	cmp	r4, r3
    491c:	d101      	bne.n	4922 <pdu_node_tx_release+0x22>
    491e:	f7ff fee3 	bl	46e8 <chan_set.part.24>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    4922:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
    4926:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
    492a:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    492e:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
    4932:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    4936:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    4938:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
    493c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    4940:	f003 bb1c 	b.w	7f7c <radio_event_callback>
    4944:	20000280 	.word	0x20000280

00004948 <packet_tx_enqueue>:
{
    4948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    494c:	4d25      	ldr	r5, [pc, #148]	; (49e4 <packet_tx_enqueue+0x9c>)
{
    494e:	4606      	mov	r6, r0
    4950:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
    4952:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4954:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
    4958:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
    495c:	429a      	cmp	r2, r3
    495e:	d036      	beq.n	49ce <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4960:	f895 916d 	ldrb.w	r9, [r5, #365]	; 0x16d
    4964:	f8d5 a164 	ldr.w	sl, [r5, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4968:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
    496c:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4970:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4974:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    4978:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
    497a:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    497c:	f7fd fe88 	bl	2690 <mem_get>
    4980:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    4982:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
    4986:	8c1a      	ldrh	r2, [r3, #32]
    4988:	4282      	cmp	r2, r0
    498a:	d122      	bne.n	49d2 <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    498c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    4990:	b942      	cbnz	r2, 49a4 <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
    4992:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    4996:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    499a:	b91a      	cbnz	r2, 49a4 <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
    499c:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    49a0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    49a4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    49a8:	b102      	cbz	r2, 49ac <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
    49aa:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    49ac:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    49b0:	f898 316d 	ldrb.w	r3, [r8, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
    49b4:	f898 216c 	ldrb.w	r2, [r8, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
    49b8:	3301      	adds	r3, #1
    49ba:	b2db      	uxtb	r3, r3
    49bc:	3e01      	subs	r6, #1
			first = 0;
    49be:	429a      	cmp	r2, r3
    49c0:	bf08      	it	eq
    49c2:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    49c4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
    49c8:	f888 316d 	strb.w	r3, [r8, #365]	; 0x16d
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    49cc:	d1c2      	bne.n	4954 <packet_tx_enqueue+0xc>
}
    49ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    49d2:	7923      	ldrb	r3, [r4, #4]
    49d4:	f367 0301 	bfi	r3, r7, #0, #2
    49d8:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    49da:	4621      	mov	r1, r4
    49dc:	f7ff ff90 	bl	4900 <pdu_node_tx_release>
    49e0:	e7e6      	b.n	49b0 <packet_tx_enqueue+0x68>
    49e2:	bf00      	nop
    49e4:	20000280 	.word	0x20000280

000049e8 <connection_release>:
{
    49e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    49ea:	2201      	movs	r2, #1
{
    49ec:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    49ee:	4611      	mov	r1, r2
    49f0:	2000      	movs	r0, #0
    49f2:	f7fd fead 	bl	2750 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    49f6:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    49fa:	2100      	movs	r1, #0
    49fc:	f242 330e 	movw	r3, #8974	; 0x230e
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4a00:	3207      	adds	r2, #7
	ticker_status =
    4a02:	9300      	str	r3, [sp, #0]
    4a04:	4608      	mov	r0, r1
    4a06:	4b37      	ldr	r3, [pc, #220]	; (4ae4 <connection_release+0xfc>)
    4a08:	b2d2      	uxtb	r2, r2
    4a0a:	f7fe fcfb 	bl	3404 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a0e:	f030 0102 	bics.w	r1, r0, #2
    4a12:	d005      	beq.n	4a20 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a14:	4040      	eors	r0, r0
    4a16:	f380 8811 	msr	BASEPRI, r0
    4a1a:	f04f 0004 	mov.w	r0, #4
    4a1e:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    4a20:	4b31      	ldr	r3, [pc, #196]	; (4ae8 <connection_release+0x100>)
    4a22:	7d1a      	ldrb	r2, [r3, #20]
    4a24:	2a05      	cmp	r2, #5
    4a26:	461d      	mov	r5, r3
    4a28:	d11b      	bne.n	4a62 <connection_release+0x7a>
					  conn->handle))) {
    4a2a:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    4a2c:	7c18      	ldrb	r0, [r3, #16]
    4a2e:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    4a30:	4290      	cmp	r0, r2
    4a32:	d116      	bne.n	4a62 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    4a34:	7419      	strb	r1, [r3, #16]
		ticker_status =
    4a36:	f242 331f 	movw	r3, #8991	; 0x231f
    4a3a:	9300      	str	r3, [sp, #0]
    4a3c:	2201      	movs	r2, #1
    4a3e:	4b29      	ldr	r3, [pc, #164]	; (4ae4 <connection_release+0xfc>)
    4a40:	4608      	mov	r0, r1
    4a42:	f7fe fcdf 	bl	3404 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a46:	f030 0202 	bics.w	r2, r0, #2
    4a4a:	d1e3      	bne.n	4a14 <connection_release+0x2c>
		ticker_status =
    4a4c:	f242 3326 	movw	r3, #8998	; 0x2326
    4a50:	9300      	str	r3, [sp, #0]
    4a52:	4611      	mov	r1, r2
    4a54:	4b23      	ldr	r3, [pc, #140]	; (4ae4 <connection_release+0xfc>)
    4a56:	4610      	mov	r0, r2
    4a58:	f7fe fcd4 	bl	3404 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a5c:	f030 0302 	bics.w	r3, r0, #2
    4a60:	d1d8      	bne.n	4a14 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    4a62:	e9d4 133b 	ldrd	r1, r3, [r4, #236]	; 0xec
    4a66:	4299      	cmp	r1, r3
    4a68:	d003      	beq.n	4a72 <connection_release+0x8a>
    4a6a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    4a6e:	4299      	cmp	r1, r3
    4a70:	d101      	bne.n	4a76 <connection_release+0x8e>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4a72:	4e1e      	ldr	r6, [pc, #120]	; (4aec <connection_release+0x104>)
    4a74:	e010      	b.n	4a98 <connection_release+0xb0>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4a76:	790b      	ldrb	r3, [r1, #4]
    4a78:	f36f 0301 	bfc	r3, #0, #2
    4a7c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4a7e:	680b      	ldr	r3, [r1, #0]
    4a80:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    4a84:	8c20      	ldrh	r0, [r4, #32]
    4a86:	f7ff ff3b 	bl	4900 <pdu_node_tx_release>
    4a8a:	e7ea      	b.n	4a62 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4a8c:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4a8e:	4631      	mov	r1, r6
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    4a90:	e9c4 333b 	strd	r3, r3, [r4, #236]	; 0xec
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4a94:	f7fd fde7 	bl	2666 <mem_release>
	while ((conn->pkt_tx_head) &&
    4a98:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    4a9c:	b118      	cbz	r0, 4aa6 <connection_release+0xbe>
    4a9e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    4aa2:	4298      	cmp	r0, r3
    4aa4:	d1f2      	bne.n	4a8c <connection_release+0xa4>
	conn->pkt_tx_ctrl = NULL;
    4aa6:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    4aa8:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
	while (conn->pkt_tx_head) {
    4aac:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    4ab0:	b951      	cbnz	r1, 4ac8 <connection_release+0xe0>
	conn->handle = 0xffff;
    4ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4ab6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    4ab8:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    4abc:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
    4abe:	bf08      	it	eq
    4ac0:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
    4ac4:	b002      	add	sp, #8
    4ac6:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4ac8:	790b      	ldrb	r3, [r1, #4]
    4aca:	f36f 0301 	bfc	r3, #0, #2
    4ace:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4ad0:	680b      	ldr	r3, [r1, #0]
    4ad2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    4ad6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    4ada:	8c20      	ldrh	r0, [r4, #32]
    4adc:	f7ff ff10 	bl	4900 <pdu_node_tx_release>
    4ae0:	e7e4      	b.n	4aac <connection_release+0xc4>
    4ae2:	bf00      	nop
    4ae4:	000046f5 	.word	0x000046f5
    4ae8:	20000280 	.word	0x20000280
    4aec:	200003d4 	.word	0x200003d4

00004af0 <tx_packet_set>:
{
    4af0:	b538      	push	{r3, r4, r5, lr}
    4af2:	4605      	mov	r5, r0
    4af4:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    4af6:	2100      	movs	r1, #0
    4af8:	4608      	mov	r0, r1
    4afa:	f003 fec9 	bl	8890 <radio_phy_set>
	if (conn->enc_tx) {
    4afe:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    4b02:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4b04:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    4b08:	d50c      	bpl.n	4b24 <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4b0a:	211f      	movs	r1, #31
    4b0c:	2008      	movs	r0, #8
    4b0e:	f003 ff05 	bl	891c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    4b12:	4621      	mov	r1, r4
    4b14:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    4b18:	f004 f974 	bl	8e04 <radio_ccm_tx_pkt_set>
}
    4b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    4b20:	f003 bf30 	b.w	8984 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    4b24:	2008      	movs	r0, #8
    4b26:	211b      	movs	r1, #27
    4b28:	f003 fef8 	bl	891c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    4b2c:	4620      	mov	r0, r4
    4b2e:	e7f5      	b.n	4b1c <tx_packet_set+0x2c>

00004b30 <chan_set>:
	switch (chan) {
    4b30:	2826      	cmp	r0, #38	; 0x26
{
    4b32:	b510      	push	{r4, lr}
    4b34:	4604      	mov	r4, r0
	switch (chan) {
    4b36:	d00b      	beq.n	4b50 <chan_set+0x20>
    4b38:	2827      	cmp	r0, #39	; 0x27
    4b3a:	d00b      	beq.n	4b54 <chan_set+0x24>
    4b3c:	2825      	cmp	r0, #37	; 0x25
    4b3e:	d10b      	bne.n	4b58 <chan_set+0x28>
		radio_freq_chan_set(2);
    4b40:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    4b42:	f003 febb 	bl	88bc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    4b46:	4620      	mov	r0, r4
}
    4b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    4b4c:	f003 bebc 	b.w	88c8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    4b50:	201a      	movs	r0, #26
    4b52:	e7f6      	b.n	4b42 <chan_set+0x12>
		radio_freq_chan_set(80);
    4b54:	2050      	movs	r0, #80	; 0x50
    4b56:	e7f4      	b.n	4b42 <chan_set+0x12>
		if (chan < 11) {
    4b58:	280a      	cmp	r0, #10
    4b5a:	d802      	bhi.n	4b62 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    4b5c:	3002      	adds	r0, #2
    4b5e:	0040      	lsls	r0, r0, #1
    4b60:	e7ef      	b.n	4b42 <chan_set+0x12>
		} else if (chan < 40) {
    4b62:	2827      	cmp	r0, #39	; 0x27
    4b64:	d801      	bhi.n	4b6a <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    4b66:	3003      	adds	r0, #3
    4b68:	e7f9      	b.n	4b5e <chan_set+0x2e>
    4b6a:	f7ff fdbd 	bl	46e8 <chan_set.part.24>
	...

00004b70 <adv_setup>:
{
    4b70:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
    4b72:	4c2a      	ldr	r4, [pc, #168]	; (4c1c <adv_setup+0xac>)
    4b74:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    4b78:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    4b7c:	429a      	cmp	r2, r3
    4b7e:	d006      	beq.n	4b8e <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    4b80:	3301      	adds	r3, #1
    4b82:	b2db      	uxtb	r3, r3
			first = 0;
    4b84:	2b02      	cmp	r3, #2
    4b86:	bf08      	it	eq
    4b88:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    4b8a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
    4b8e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    4b92:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    4b96:	429a      	cmp	r2, r3
    4b98:	d006      	beq.n	4ba8 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    4b9a:	3301      	adds	r3, #1
    4b9c:	b2db      	uxtb	r3, r3
			first = 0;
    4b9e:	2b02      	cmp	r3, #2
    4ba0:	bf08      	it	eq
    4ba2:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4ba4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
    4ba8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    4bac:	232a      	movs	r3, #42	; 0x2a
    4bae:	2527      	movs	r5, #39	; 0x27
    4bb0:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
    4bb4:	1960      	adds	r0, r4, r5
    4bb6:	f003 fee5 	bl	8984 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    4bba:	5d63      	ldrb	r3, [r4, r5]
    4bbc:	f003 030f 	and.w	r3, r3, #15
    4bc0:	2b02      	cmp	r3, #2
    4bc2:	d023      	beq.n	4c0c <adv_setup+0x9c>
    4bc4:	2b07      	cmp	r3, #7
    4bc6:	d021      	beq.n	4c0c <adv_setup+0x9c>
		_radio.state = STATE_TX;
    4bc8:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    4bca:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4bcc:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    4bce:	f003 ffe3 	bl	8b98 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4bd2:	2000      	movs	r0, #0
    4bd4:	f003 ff50 	bl	8a78 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    4bd8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4bdc:	f3c3 0202 	ubfx	r2, r3, #0, #3
    4be0:	b2d3      	uxtb	r3, r2
    4be2:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    4be4:	2000      	movs	r0, #0
    4be6:	f011 0f01 	tst.w	r1, #1
    4bea:	f100 0501 	add.w	r5, r0, #1
    4bee:	d012      	beq.n	4c16 <adv_setup+0xa6>
		(_radio.advertiser.chan_map_current - 1);
    4bf0:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    4bf2:	4013      	ands	r3, r2
    4bf4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    4bf8:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    4bfa:	f363 0202 	bfi	r2, r3, #0, #3
    4bfe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    4c02:	3025      	adds	r0, #37	; 0x25
}
    4c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
    4c08:	f7ff bf92 	b.w	4b30 <chan_set>
		_radio.state = STATE_CLOSE;
    4c0c:	2303      	movs	r3, #3
    4c0e:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    4c10:	f003 ff48 	bl	8aa4 <radio_switch_complete_and_disable>
    4c14:	e7e0      	b.n	4bd8 <adv_setup+0x68>
		bitmap >>= 1;
    4c16:	0849      	lsrs	r1, r1, #1
    4c18:	4628      	mov	r0, r5
    4c1a:	e7e4      	b.n	4be6 <adv_setup+0x76>
    4c1c:	20000280 	.word	0x20000280

00004c20 <sched_after_mstr_free_offset_get>:
{
    4c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4c22:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    4c24:	aa02      	add	r2, sp, #8
{
    4c26:	461c      	mov	r4, r3
    4c28:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    4c2a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    4c2e:	3127      	adds	r1, #39	; 0x27
    4c30:	2001      	movs	r0, #1
    4c32:	f7ff fc89 	bl	4548 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    4c36:	6823      	ldr	r3, [r4, #0]
    4c38:	b1fb      	cbz	r3, 4c7a <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    4c3a:	9801      	ldr	r0, [sp, #4]
    4c3c:	1b83      	subs	r3, r0, r6
    4c3e:	021b      	lsls	r3, r3, #8
    4c40:	d501      	bpl.n	4c46 <sched_after_mstr_free_offset_get+0x26>
    4c42:	f7ff fd51 	bl	46e8 <chan_set.part.24>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4c46:	4631      	mov	r1, r6
    4c48:	f7fe fca6 	bl	3598 <ticker_ticks_diff_get>
    4c4c:	4602      	mov	r2, r0
    4c4e:	4810      	ldr	r0, [pc, #64]	; (4c90 <sched_after_mstr_free_offset_get+0x70>)
    4c50:	2307      	movs	r3, #7
    4c52:	fba2 0100 	umull	r0, r1, r2, r0
    4c56:	fb03 1102 	mla	r1, r3, r2, r1
    4c5a:	a30b      	add	r3, pc, #44	; (adr r3, 4c88 <sched_after_mstr_free_offset_get+0x68>)
    4c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c60:	f7fb fb02 	bl	268 <__aeabi_uldivmod>
    4c64:	6823      	ldr	r3, [r4, #0]
    4c66:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    4c68:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4c6a:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    4c6c:	db05      	blt.n	4c7a <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    4c6e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    4c72:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    4c74:	6823      	ldr	r3, [r4, #0]
    4c76:	4283      	cmp	r3, r0
    4c78:	d801      	bhi.n	4c7e <sched_after_mstr_free_offset_get+0x5e>
}
    4c7a:	b002      	add	sp, #8
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    4c7e:	1a1b      	subs	r3, r3, r0
    4c80:	6023      	str	r3, [r4, #0]
    4c82:	e7f7      	b.n	4c74 <sched_after_mstr_free_offset_get+0x54>
    4c84:	f3af 8000 	nop.w
    4c88:	3b9aca00 	.word	0x3b9aca00
    4c8c:	00000000 	.word	0x00000000
    4c90:	1afd498d 	.word	0x1afd498d

00004c94 <mayfly_sched_win_offset_use>:
{
    4c94:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4c96:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    4c9a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    4c9c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    4c9e:	68c1      	ldr	r1, [r0, #12]
    4ca0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    4ca2:	f7ff ffbd 	bl	4c20 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4ca6:	a902      	add	r1, sp, #8
    4ca8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4caa:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4cac:	f240 42e2 	movw	r2, #1250	; 0x4e2
    4cb0:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4cb4:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    4cb6:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    4cba:	f7fb fc90 	bl	5de <memcpy>
}
    4cbe:	b002      	add	sp, #8
    4cc0:	bd10      	pop	{r4, pc}
	...

00004cc4 <ticker_stop_adv_stop>:
{
    4cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4cc6:	4c3e      	ldr	r4, [pc, #248]	; (4dc0 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    4cc8:	b120      	cbz	r0, 4cd4 <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    4cca:	7ca3      	ldrb	r3, [r4, #18]
    4ccc:	2b05      	cmp	r3, #5
    4cce:	d075      	beq.n	4dbc <ticker_stop_adv_stop+0xf8>
    4cd0:	f7ff fd0a 	bl	46e8 <chan_set.part.24>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4cd4:	7c23      	ldrb	r3, [r4, #16]
    4cd6:	2b05      	cmp	r3, #5
    4cd8:	d002      	beq.n	4ce0 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    4cda:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4cdc:	2b05      	cmp	r3, #5
    4cde:	d165      	bne.n	4dac <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4ce0:	ab04      	add	r3, sp, #16
    4ce2:	2202      	movs	r2, #2
    4ce4:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4ce8:	2200      	movs	r2, #0
    4cea:	9300      	str	r3, [sp, #0]
    4cec:	2101      	movs	r1, #1
    4cee:	4b35      	ldr	r3, [pc, #212]	; (4dc4 <ticker_stop_adv_stop+0x100>)
    4cf0:	4610      	mov	r0, r2
    4cf2:	f7fe fb87 	bl	3404 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4cf6:	2802      	cmp	r0, #2
    4cf8:	d00d      	beq.n	4d16 <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4cfa:	9802      	ldr	r0, [sp, #8]
    4cfc:	b1c0      	cbz	r0, 4d30 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4cfe:	9802      	ldr	r0, [sp, #8]
    4d00:	2801      	cmp	r0, #1
    4d02:	d119      	bne.n	4d38 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    4d04:	7ce3      	ldrb	r3, [r4, #19]
    4d06:	2b00      	cmp	r3, #0
    4d08:	d050      	beq.n	4dac <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4d0a:	4b2f      	ldr	r3, [pc, #188]	; (4dc8 <ticker_stop_adv_stop+0x104>)
    4d0c:	2204      	movs	r2, #4
    4d0e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4d10:	2200      	movs	r2, #0
    4d12:	4611      	mov	r1, r2
    4d14:	e046      	b.n	4da4 <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4d16:	2201      	movs	r2, #1
    4d18:	4611      	mov	r1, r2
    4d1a:	4610      	mov	r0, r2
    4d1c:	f7fd fd18 	bl	2750 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    4d20:	9b02      	ldr	r3, [sp, #8]
    4d22:	2b02      	cmp	r3, #2
    4d24:	d1e9      	bne.n	4cfa <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d26:	2101      	movs	r1, #1
    4d28:	2000      	movs	r0, #0
    4d2a:	f7fe fc1d 	bl	3568 <ticker_job_sched>
    4d2e:	e7f7      	b.n	4d20 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4d30:	2302      	movs	r3, #2
    4d32:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    4d34:	7c23      	ldrb	r3, [r4, #16]
    4d36:	b92b      	cbnz	r3, 4d44 <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    4d38:	4040      	eors	r0, r0
    4d3a:	f380 8811 	msr	BASEPRI, r0
    4d3e:	f04f 0004 	mov.w	r0, #4
    4d42:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d44:	ab03      	add	r3, sp, #12
    4d46:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    4d48:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d4a:	4611      	mov	r1, r2
    4d4c:	9300      	str	r3, [sp, #0]
    4d4e:	4b1d      	ldr	r3, [pc, #116]	; (4dc4 <ticker_stop_adv_stop+0x100>)
    4d50:	f7fe fb58 	bl	3404 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4d54:	2802      	cmp	r0, #2
    4d56:	d00f      	beq.n	4d78 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4d58:	9a03      	ldr	r2, [sp, #12]
    4d5a:	b1d2      	cbz	r2, 4d92 <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4d5c:	9c03      	ldr	r4, [sp, #12]
    4d5e:	2c01      	cmp	r4, #1
    4d60:	d1ea      	bne.n	4d38 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4d62:	2200      	movs	r2, #0
    4d64:	4611      	mov	r1, r2
    4d66:	4b19      	ldr	r3, [pc, #100]	; (4dcc <ticker_stop_adv_stop+0x108>)
    4d68:	4620      	mov	r0, r4
    4d6a:	f7fd fd19 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4d6e:	4602      	mov	r2, r0
    4d70:	2800      	cmp	r0, #0
    4d72:	d1e1      	bne.n	4d38 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4d74:	4b16      	ldr	r3, [pc, #88]	; (4dd0 <ticker_stop_adv_stop+0x10c>)
    4d76:	e013      	b.n	4da0 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4d78:	2201      	movs	r2, #1
    4d7a:	4611      	mov	r1, r2
    4d7c:	4610      	mov	r0, r2
    4d7e:	f7fd fce7 	bl	2750 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    4d82:	9b03      	ldr	r3, [sp, #12]
    4d84:	2b02      	cmp	r3, #2
    4d86:	d1e7      	bne.n	4d58 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d88:	2101      	movs	r1, #1
    4d8a:	2000      	movs	r0, #0
    4d8c:	f7fe fbec 	bl	3568 <ticker_job_sched>
    4d90:	e7f7      	b.n	4d82 <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    4d92:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4d94:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    4d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4d9a:	428b      	cmp	r3, r1
    4d9c:	d2ea      	bcs.n	4d74 <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    4d9e:	4b0b      	ldr	r3, [pc, #44]	; (4dcc <ticker_stop_adv_stop+0x108>)
    4da0:	4611      	mov	r1, r2
    4da2:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4da4:	f7fd fcfc 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4da8:	2800      	cmp	r0, #0
    4daa:	d1c5      	bne.n	4d38 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4dac:	2200      	movs	r2, #0
    4dae:	4b09      	ldr	r3, [pc, #36]	; (4dd4 <ticker_stop_adv_stop+0x110>)
    4db0:	4611      	mov	r1, r2
    4db2:	2001      	movs	r0, #1
    4db4:	f7fd fcf4 	bl	27a0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    4db8:	2800      	cmp	r0, #0
    4dba:	d1bd      	bne.n	4d38 <ticker_stop_adv_stop+0x74>
}
    4dbc:	b004      	add	sp, #16
    4dbe:	bd10      	pop	{r4, pc}
    4dc0:	20000280 	.word	0x20000280
    4dc4:	000041a5 	.word	0x000041a5
    4dc8:	20002a88 	.word	0x20002a88
    4dcc:	20002a58 	.word	0x20002a58
    4dd0:	20002af8 	.word	0x20002af8
    4dd4:	20002a28 	.word	0x20002a28

00004dd8 <isr_scan_tgta_check.isra.31>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4dd8:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4dda:	4c16      	ldr	r4, [pc, #88]	; (4e34 <isr_scan_tgta_check.isra.31+0x5c>)
    4ddc:	7803      	ldrb	r3, [r0, #0]
    4dde:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    4de2:	09db      	lsrs	r3, r3, #7
    4de4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4de8:	4605      	mov	r5, r0
    4dea:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    4dec:	d007      	beq.n	4dfe <isr_scan_tgta_check.isra.31+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    4dee:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
    4df2:	f3c0 1001 	ubfx	r0, r0, #4, #2
    4df6:	f010 0002 	ands.w	r0, r0, #2
    4dfa:	d10b      	bne.n	4e14 <isr_scan_tgta_check.isra.31+0x3c>
}
    4dfc:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    4dfe:	f100 0108 	add.w	r1, r0, #8
    4e02:	2206      	movs	r2, #6
    4e04:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
    4e08:	f7fb fbd9 	bl	5be <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4e0c:	2800      	cmp	r0, #0
    4e0e:	d1ee      	bne.n	4dee <isr_scan_tgta_check.isra.31+0x16>
			BDADDR_SIZE) == 0))) ||
    4e10:	2001      	movs	r0, #1
    4e12:	e7f3      	b.n	4dfc <isr_scan_tgta_check.isra.31+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    4e14:	f995 3000 	ldrsb.w	r3, [r5]
    4e18:	2b00      	cmp	r3, #0
    4e1a:	da09      	bge.n	4e30 <isr_scan_tgta_check.isra.31+0x58>
	    (pdu->rx_addr != 0) &&
    4e1c:	7b6b      	ldrb	r3, [r5, #13]
    4e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4e22:	2b40      	cmp	r3, #64	; 0x40
    4e24:	d104      	bne.n	4e30 <isr_scan_tgta_check.isra.31+0x58>
		if (dir_report) {
    4e26:	2e00      	cmp	r6, #0
    4e28:	d0f2      	beq.n	4e10 <isr_scan_tgta_check.isra.31+0x38>
			*dir_report = true;
    4e2a:	2001      	movs	r0, #1
    4e2c:	7030      	strb	r0, [r6, #0]
    4e2e:	e7e5      	b.n	4dfc <isr_scan_tgta_check.isra.31+0x24>
			BDADDR_SIZE) == 0))) ||
    4e30:	2000      	movs	r0, #0
    4e32:	e7e3      	b.n	4dfc <isr_scan_tgta_check.isra.31+0x24>
    4e34:	20000280 	.word	0x20000280

00004e38 <packet_rx_enqueue>:
{
    4e38:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    4e3a:	4a16      	ldr	r2, [pc, #88]	; (4e94 <packet_rx_enqueue+0x5c>)
    4e3c:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
    4e40:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
    4e44:	4299      	cmp	r1, r3
    4e46:	d101      	bne.n	4e4c <packet_rx_enqueue+0x14>
    4e48:	f7ff fc4e 	bl	46e8 <chan_set.part.24>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4e4c:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    4e50:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
    4e54:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4e58:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.onion.link;
    4e5c:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4e5e:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    4e60:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
    4e64:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
    4e68:	3301      	adds	r3, #1
    4e6a:	b2db      	uxtb	r3, r3
		last = 0;
    4e6c:	429c      	cmp	r4, r3
    4e6e:	bf08      	it	eq
    4e70:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    4e72:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4e76:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    4e7a:	f7fd fc23 	bl	26c4 <memq_enqueue>
	LL_ASSERT(link);
    4e7e:	b928      	cbnz	r0, 4e8c <packet_rx_enqueue+0x54>
    4e80:	4040      	eors	r0, r0
    4e82:	f380 8811 	msr	BASEPRI, r0
    4e86:	f04f 0004 	mov.w	r0, #4
    4e8a:	df02      	svc	2
}
    4e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    4e90:	f003 b874 	b.w	7f7c <radio_event_callback>
    4e94:	20000280 	.word	0x20000280

00004e98 <mayfly_adv_stop>:
{
    4e98:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    4e9a:	2001      	movs	r0, #1
    4e9c:	f7ff f9ac 	bl	41f8 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    4ea0:	4604      	mov	r4, r0
    4ea2:	b908      	cbnz	r0, 4ea8 <mayfly_adv_stop+0x10>
    4ea4:	f7ff fc20 	bl	46e8 <chan_set.part.24>
	node_rx->hdr.handle = 0xffff;
    4ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4eac:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4eae:	2306      	movs	r3, #6
    4eb0:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4eb2:	2210      	movs	r2, #16
    4eb4:	2100      	movs	r1, #0
    4eb6:	300b      	adds	r0, #11
    4eb8:	f7fb fbbe 	bl	638 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    4ebc:	233c      	movs	r3, #60	; 0x3c
    4ebe:	72e3      	strb	r3, [r4, #11]
}
    4ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    4ec4:	f7ff bfb8 	b.w	4e38 <packet_rx_enqueue>

00004ec8 <terminate_ind_rx_enqueue>:
{
    4ec8:	4603      	mov	r3, r0
    4eca:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    4ecc:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    4ed0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
    4ed4:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.onion.link);
    4ed6:	b908      	cbnz	r0, 4edc <terminate_ind_rx_enqueue+0x14>
    4ed8:	f7ff fc06 	bl	46e8 <chan_set.part.24>
	node_rx->hdr.handle = conn->handle;
    4edc:	8c1c      	ldrh	r4, [r3, #32]
    4ede:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    4ee2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4ee6:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4ee8:	4a0a      	ldr	r2, [pc, #40]	; (4f14 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4eea:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4eee:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
    4ef2:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4ef6:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    4efa:	f7fd fbe3 	bl	26c4 <memq_enqueue>
	LL_ASSERT(link);
    4efe:	b928      	cbnz	r0, 4f0c <terminate_ind_rx_enqueue+0x44>
    4f00:	4040      	eors	r0, r0
    4f02:	f380 8811 	msr	BASEPRI, r0
    4f06:	f04f 0004 	mov.w	r0, #4
    4f0a:	df02      	svc	2
}
    4f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    4f10:	f003 b834 	b.w	7f7c <radio_event_callback>
    4f14:	20000280 	.word	0x20000280

00004f18 <isr.part.45>:
			LL_ASSERT(0);
    4f18:	4040      	eors	r0, r0
    4f1a:	f380 8811 	msr	BASEPRI, r0
    4f1e:	f04f 0004 	mov.w	r0, #4
    4f22:	df02      	svc	2

00004f24 <isr_rx_scan_report.isra.38>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    4f24:	b570      	push	{r4, r5, r6, lr}
    4f26:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    4f28:	2003      	movs	r0, #3
    4f2a:	f7ff f965 	bl	41f8 <packet_rx_reserve_get>
	if (node_rx == 0) {
    4f2e:	4604      	mov	r4, r0
    4f30:	b320      	cbz	r0, 4f7c <isr_rx_scan_report.isra.38+0x58>
	node_rx->hdr.handle = 0xffff;
    4f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4f36:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    4f38:	4b11      	ldr	r3, [pc, #68]	; (4f80 <isr_rx_scan_report.isra.38+0x5c>)
    4f3a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    4f3e:	075a      	lsls	r2, r3, #29
    4f40:	d018      	beq.n	4f74 <isr_rx_scan_report.isra.38+0x50>
		switch (_radio.scanner.phy) {
    4f42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    4f46:	b2da      	uxtb	r2, r3
    4f48:	2a01      	cmp	r2, #1
    4f4a:	d003      	beq.n	4f54 <isr_rx_scan_report.isra.38+0x30>
    4f4c:	2a04      	cmp	r2, #4
    4f4e:	d002      	beq.n	4f56 <isr_rx_scan_report.isra.38+0x32>
    4f50:	f7ff ffe2 	bl	4f18 <isr.part.45>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    4f54:	2303      	movs	r3, #3
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4f56:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    4f58:	f104 0508 	add.w	r5, r4, #8
			     pdu_adv_rx->len] =
    4f5c:	b166      	cbz	r6, 4f78 <isr_rx_scan_report.isra.38+0x54>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4f5e:	f003 fdb9 	bl	8ad4 <radio_rssi_get>
			     pdu_adv_rx->len] =
    4f62:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4f66:	7a63      	ldrb	r3, [r4, #9]
    4f68:	441d      	add	r5, r3
    4f6a:	70a8      	strb	r0, [r5, #2]
	packet_rx_enqueue();
    4f6c:	f7ff ff64 	bl	4e38 <packet_rx_enqueue>
	return 0;
    4f70:	2000      	movs	r0, #0
}
    4f72:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4f74:	2302      	movs	r3, #2
    4f76:	e7ee      	b.n	4f56 <isr_rx_scan_report.isra.38+0x32>
			     pdu_adv_rx->len] =
    4f78:	207f      	movs	r0, #127	; 0x7f
    4f7a:	e7f4      	b.n	4f66 <isr_rx_scan_report.isra.38+0x42>
		return 1;
    4f7c:	2001      	movs	r0, #1
    4f7e:	e7f8      	b.n	4f72 <isr_rx_scan_report.isra.38+0x4e>
    4f80:	20000280 	.word	0x20000280

00004f84 <prepare_normal_set>:
{
    4f84:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    4f86:	6804      	ldr	r4, [r0, #0]
    4f88:	2c00      	cmp	r4, #0
{
    4f8a:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    4f8c:	da19      	bge.n	4fc2 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    4f8e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    4f92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    4f96:	429d      	cmp	r5, r3
    4f98:	bf34      	ite	cc
    4f9a:	1ae4      	subcc	r4, r4, r3
    4f9c:	1b64      	subcs	r4, r4, r5
		ticker_status =
    4f9e:	4b0a      	ldr	r3, [pc, #40]	; (4fc8 <prepare_normal_set+0x44>)
    4fa0:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    4fa2:	b2a4      	uxth	r4, r4
		ticker_status =
    4fa4:	2300      	movs	r3, #0
    4fa6:	9006      	str	r0, [sp, #24]
    4fa8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    4fac:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4fb0:	4618      	mov	r0, r3
    4fb2:	9400      	str	r4, [sp, #0]
    4fb4:	f7fe f9dc 	bl	3370 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4fb8:	f030 0302 	bics.w	r3, r0, #2
    4fbc:	d001      	beq.n	4fc2 <prepare_normal_set+0x3e>
    4fbe:	f7ff fb93 	bl	46e8 <chan_set.part.24>
}
    4fc2:	b009      	add	sp, #36	; 0x24
    4fc4:	bd30      	pop	{r4, r5, pc}
    4fc6:	bf00      	nop
    4fc8:	000041b5 	.word	0x000041b5

00004fcc <adv_scan_configure.constprop.48>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    4fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    4fce:	ad02      	add	r5, sp, #8
    4fd0:	4b10      	ldr	r3, [pc, #64]	; (5014 <adv_scan_configure.constprop.48+0x48>)
    4fd2:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    4fd6:	4604      	mov	r4, r0
	radio_reset();
    4fd8:	f003 fc40 	bl	885c <radio_reset>
	radio_tx_power_set(0);
    4fdc:	2000      	movs	r0, #0
    4fde:	f003 fc67 	bl	88b0 <radio_tx_power_set>
	radio_isr_set(isr);
    4fe2:	480d      	ldr	r0, [pc, #52]	; (5018 <adv_scan_configure.constprop.48+0x4c>)
    4fe4:	f003 fc04 	bl	87f0 <radio_isr_set>
	radio_phy_set(phy, flags);
    4fe8:	2101      	movs	r1, #1
    4fea:	4620      	mov	r0, r4
    4fec:	f003 fc50 	bl	8890 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    4ff0:	4628      	mov	r0, r5
    4ff2:	f003 fc7b 	bl	88ec <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4ff6:	0062      	lsls	r2, r4, #1
    4ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    4ffc:	2125      	movs	r1, #37	; 0x25
    4ffe:	2008      	movs	r0, #8
    5000:	f003 fc8c 	bl	891c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5004:	4905      	ldr	r1, [pc, #20]	; (501c <adv_scan_configure.constprop.48+0x50>)
    5006:	f240 605b 	movw	r0, #1627	; 0x65b
    500a:	f003 fd17 	bl	8a3c <radio_crc_configure>
}
    500e:	b003      	add	sp, #12
    5010:	bd30      	pop	{r4, r5, pc}
    5012:	bf00      	nop
    5014:	8e89bed6 	.word	0x8e89bed6
    5018:	00005f39 	.word	0x00005f39
    501c:	00555555 	.word	0x00555555

00005020 <event_stop.constprop.49>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    5020:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5022:	4b05      	ldr	r3, [pc, #20]	; (5038 <event_stop.constprop.49+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5024:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    5026:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5028:	4611      	mov	r1, r2
    502a:	4610      	mov	r0, r2
    502c:	f7fd fbb8 	bl	27a0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5030:	b108      	cbz	r0, 5036 <event_stop.constprop.49+0x16>
    5032:	f7ff fb59 	bl	46e8 <chan_set.part.24>
}
    5036:	bd08      	pop	{r3, pc}
    5038:	20002a78 	.word	0x20002a78

0000503c <event_common_prepare>:
{
    503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    5040:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    5042:	681d      	ldr	r5, [r3, #0]
{
    5044:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5046:	2c00      	cmp	r4, #0
{
    5048:	4681      	mov	r9, r0
    504a:	910b      	str	r1, [sp, #44]	; 0x2c
    504c:	4690      	mov	r8, r2
    504e:	469b      	mov	fp, r3
    5050:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5054:	da03      	bge.n	505e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    5056:	9c16      	ldr	r4, [sp, #88]	; 0x58
    5058:	42ac      	cmp	r4, r5
    505a:	bf38      	it	cc
    505c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    505e:	42ac      	cmp	r4, r5
    5060:	4f4e      	ldr	r7, [pc, #312]	; (519c <event_common_prepare+0x160>)
    5062:	d91b      	bls.n	509c <event_common_prepare+0x60>
		ticker_status =
    5064:	f241 538b 	movw	r3, #5515	; 0x158b
    5068:	e9cd 7307 	strd	r7, r3, [sp, #28]
    506c:	4b4c      	ldr	r3, [pc, #304]	; (51a0 <event_common_prepare+0x164>)
    506e:	2100      	movs	r1, #0
    5070:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    5074:	1b63      	subs	r3, r4, r5
		ticker_status =
    5076:	9300      	str	r3, [sp, #0]
    5078:	9106      	str	r1, [sp, #24]
    507a:	464b      	mov	r3, r9
    507c:	e9cd 1102 	strd	r1, r1, [sp, #8]
    5080:	9101      	str	r1, [sp, #4]
    5082:	2201      	movs	r2, #1
    5084:	4608      	mov	r0, r1
    5086:	f7fe f929 	bl	32dc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    508a:	f030 0302 	bics.w	r3, r0, #2
    508e:	d02b      	beq.n	50e8 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    5090:	4040      	eors	r0, r0
    5092:	f380 8811 	msr	BASEPRI, r0
    5096:	f04f 0004 	mov.w	r0, #4
    509a:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    509c:	d21d      	bcs.n	50da <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    509e:	2300      	movs	r3, #0
    50a0:	461a      	mov	r2, r3
    50a2:	4619      	mov	r1, r3
    50a4:	4618      	mov	r0, r3
    50a6:	f7ff fbb7 	bl	4818 <event_active>
		ticker_status =
    50aa:	f44f 53ad 	mov.w	r3, #5536	; 0x15a0
    50ae:	e9cd 7307 	strd	r7, r3, [sp, #28]
    50b2:	4b3c      	ldr	r3, [pc, #240]	; (51a4 <event_common_prepare+0x168>)
    50b4:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    50b6:	1b2c      	subs	r4, r5, r4
		ticker_status =
    50b8:	e9cd 1304 	strd	r1, r3, [sp, #16]
    50bc:	9106      	str	r1, [sp, #24]
    50be:	464b      	mov	r3, r9
    50c0:	e9cd 1102 	strd	r1, r1, [sp, #8]
    50c4:	e9cd 4100 	strd	r4, r1, [sp]
    50c8:	2201      	movs	r2, #1
    50ca:	4608      	mov	r0, r1
    50cc:	f7fe f906 	bl	32dc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    50d0:	f030 0302 	bics.w	r3, r0, #2
    50d4:	d1dc      	bne.n	5090 <event_common_prepare+0x54>
    50d6:	462c      	mov	r4, r5
    50d8:	e00b      	b.n	50f2 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    50da:	2300      	movs	r3, #0
    50dc:	461a      	mov	r2, r3
    50de:	4619      	mov	r1, r3
    50e0:	4618      	mov	r0, r3
    50e2:	f7ff fb99 	bl	4818 <event_active>
		event_xtal(0, 0, 0, NULL);
    50e6:	2300      	movs	r3, #0
    50e8:	461a      	mov	r2, r3
    50ea:	4619      	mov	r1, r3
    50ec:	4618      	mov	r0, r3
    50ee:	f7ff fba1 	bl	4834 <event_xtal>
	_radio.remainder_anchor = remainder;
    50f2:	4e2d      	ldr	r6, [pc, #180]	; (51a8 <event_common_prepare+0x16c>)
    50f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    50f6:	60f3      	str	r3, [r6, #12]
	ticker_status =
    50f8:	f241 53b8 	movw	r3, #5560	; 0x15b8
    50fc:	e9cd 7307 	strd	r7, r3, [sp, #28]
    5100:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5102:	9306      	str	r3, [sp, #24]
    5104:	2200      	movs	r2, #0
    5106:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5108:	9305      	str	r3, [sp, #20]
    510a:	e9cd 2203 	strd	r2, r2, [sp, #12]
    510e:	464b      	mov	r3, r9
    5110:	e9cd 2201 	strd	r2, r2, [sp, #4]
    5114:	9400      	str	r4, [sp, #0]
    5116:	4611      	mov	r1, r2
    5118:	4610      	mov	r0, r2
    511a:	f7fe f8df 	bl	32dc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    511e:	f030 0302 	bics.w	r3, r0, #2
    5122:	d1b5      	bne.n	5090 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5124:	2005      	movs	r0, #5
    5126:	f7ff ff7b 	bl	5020 <event_stop.constprop.49>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    512a:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    512e:	42ab      	cmp	r3, r5
    5130:	d023      	beq.n	517a <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    5132:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5136:	f8d8 3000 	ldr.w	r3, [r8]
    513a:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    513c:	bfbc      	itt	lt
    513e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5142:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5146:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
    514a:	f8d8 1000 	ldr.w	r1, [r8]
    514e:	428a      	cmp	r2, r1
    5150:	bf38      	it	cc
    5152:	460a      	movcc	r2, r1
		ticker_status =
    5154:	f241 51e8 	movw	r1, #5608	; 0x15e8
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5158:	b2a3      	uxth	r3, r4
    515a:	b292      	uxth	r2, r2
		ticker_status =
    515c:	e9cd 7105 	strd	r7, r1, [sp, #20]
    5160:	2100      	movs	r1, #0
    5162:	e9cd 2301 	strd	r2, r3, [sp, #4]
    5166:	9200      	str	r2, [sp, #0]
    5168:	e9cd 1103 	strd	r1, r1, [sp, #12]
    516c:	4652      	mov	r2, sl
    516e:	4608      	mov	r0, r1
    5170:	f7fe f8fe 	bl	3370 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5174:	f030 0302 	bics.w	r3, r0, #2
    5178:	d18a      	bne.n	5090 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    517a:	20ff      	movs	r0, #255	; 0xff
    517c:	f7ff fbe4 	bl	4948 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5180:	4b0a      	ldr	r3, [pc, #40]	; (51ac <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5182:	2201      	movs	r2, #1
    5184:	4611      	mov	r1, r2
    5186:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5188:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    518c:	f7fd fb08 	bl	27a0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    5190:	2800      	cmp	r0, #0
    5192:	f47f af7d 	bne.w	5090 <event_common_prepare+0x54>
}
    5196:	b00d      	add	sp, #52	; 0x34
    5198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    519c:	000046f5 	.word	0x000046f5
    51a0:	00004819 	.word	0x00004819
    51a4:	00004835 	.word	0x00004835
    51a8:	20000280 	.word	0x20000280
    51ac:	20002b18 	.word	0x20002b18

000051b0 <radio_event_adv_prepare>:
{
    51b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    51b2:	4a0b      	ldr	r2, [pc, #44]	; (51e0 <radio_event_adv_prepare+0x30>)
    51b4:	7c13      	ldrb	r3, [r2, #16]
    51b6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    51ba:	b10b      	cbz	r3, 51c0 <radio_event_adv_prepare+0x10>
    51bc:	f7ff fa94 	bl	46e8 <chan_set.part.24>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    51c0:	2305      	movs	r3, #5
    51c2:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    51c4:	9403      	str	r4, [sp, #12]
    51c6:	4c07      	ldr	r4, [pc, #28]	; (51e4 <radio_event_adv_prepare+0x34>)
    51c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
    51cc:	6a13      	ldr	r3, [r2, #32]
    51ce:	9300      	str	r3, [sp, #0]
    51d0:	f102 031c 	add.w	r3, r2, #28
    51d4:	3218      	adds	r2, #24
    51d6:	f7ff ff31 	bl	503c <event_common_prepare>
}
    51da:	b004      	add	sp, #16
    51dc:	bd10      	pop	{r4, pc}
    51de:	bf00      	nop
    51e0:	20000280 	.word	0x20000280
    51e4:	00005465 	.word	0x00005465

000051e8 <event_adv_stop>:
{
    51e8:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    51ea:	2005      	movs	r0, #5
    51ec:	f7ff ff18 	bl	5020 <event_stop.constprop.49>
	ticker_status =
    51f0:	f641 03ac 	movw	r3, #6316	; 0x18ac
    51f4:	2100      	movs	r1, #0
    51f6:	9300      	str	r3, [sp, #0]
    51f8:	2205      	movs	r2, #5
    51fa:	4b06      	ldr	r3, [pc, #24]	; (5214 <event_adv_stop+0x2c>)
    51fc:	4608      	mov	r0, r1
    51fe:	f7fe f901 	bl	3404 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5202:	f030 0302 	bics.w	r3, r0, #2
    5206:	d001      	beq.n	520c <event_adv_stop+0x24>
    5208:	f7ff fa6e 	bl	46e8 <chan_set.part.24>
}
    520c:	b003      	add	sp, #12
    520e:	f85d fb04 	ldr.w	pc, [sp], #4
    5212:	bf00      	nop
    5214:	00004cc5 	.word	0x00004cc5

00005218 <packet_rx_allocate.constprop.50>:
static void packet_rx_allocate(u8_t max)
    5218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    521c:	4d21      	ldr	r5, [pc, #132]	; (52a4 <packet_rx_allocate.constprop.50+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    521e:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
    5222:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
    5226:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
    522a:	3401      	adds	r4, #1
    522c:	b2e4      	uxtb	r4, r4
		acquire = 0;
    522e:	42a3      	cmp	r3, r4
    5230:	bf08      	it	eq
    5232:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    5234:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5238:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    523c:	f1b9 0f00 	cmp.w	r9, #0
    5240:	d003      	beq.n	524a <packet_rx_allocate.constprop.50+0x32>
    5242:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
    5246:	429c      	cmp	r4, r3
    5248:	d101      	bne.n	524e <packet_rx_allocate.constprop.50+0x36>
}
    524a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    524e:	4638      	mov	r0, r7
    5250:	f7fd f9f0 	bl	2634 <mem_acquire>
		if (!link) {
    5254:	4606      	mov	r6, r0
    5256:	2800      	cmp	r0, #0
    5258:	d0f7      	beq.n	524a <packet_rx_allocate.constprop.50+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    525a:	4640      	mov	r0, r8
    525c:	f7fd f9ea 	bl	2634 <mem_acquire>
		if (!node_rx) {
    5260:	b928      	cbnz	r0, 526e <packet_rx_allocate.constprop.50+0x56>
			mem_release(link, &_radio.link_rx_free);
    5262:	4630      	mov	r0, r6
    5264:	4910      	ldr	r1, [pc, #64]	; (52a8 <packet_rx_allocate.constprop.50+0x90>)
}
    5266:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    526a:	f7fd b9fc 	b.w	2666 <mem_release>
		node_rx->hdr.onion.link = link;
    526e:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    5270:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    5274:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    5278:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    527c:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
    5280:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
    5284:	3401      	adds	r4, #1
    5286:	b2e4      	uxtb	r4, r4
			acquire = 0;
    5288:	42a3      	cmp	r3, r4
    528a:	bf08      	it	eq
    528c:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    528e:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    5292:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    5296:	3b01      	subs	r3, #1
    5298:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
    529c:	fa5f f989 	uxtb.w	r9, r9
    52a0:	e7cc      	b.n	523c <packet_rx_allocate.constprop.50+0x24>
    52a2:	bf00      	nop
    52a4:	20000280 	.word	0x20000280
    52a8:	200003c0 	.word	0x200003c0

000052ac <common_init>:
{
    52ac:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    52ae:	4c2c      	ldr	r4, [pc, #176]	; (5360 <common_init+0xb4>)
    52b0:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    52b4:	2a00      	cmp	r2, #0
    52b6:	d037      	beq.n	5328 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    52b8:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    52bc:	f44f 7182 	mov.w	r1, #260	; 0x104
    52c0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    52c4:	f7fd f992 	bl	25ec <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    52c8:	4b26      	ldr	r3, [pc, #152]	; (5364 <common_init+0xb8>)
    52ca:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    52ce:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    52d2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    52d6:	f7fd f989 	bl	25ec <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    52da:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    52de:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    52e2:	4b21      	ldr	r3, [pc, #132]	; (5368 <common_init+0xbc>)
    52e4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    52e8:	440a      	add	r2, r1
    52ea:	2108      	movs	r1, #8
    52ec:	f7fd f97e 	bl	25ec <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    52f0:	4b1e      	ldr	r3, [pc, #120]	; (536c <common_init+0xc0>)
    52f2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    52f6:	2202      	movs	r2, #2
    52f8:	2124      	movs	r1, #36	; 0x24
    52fa:	f7fd f977 	bl	25ec <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    52fe:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    5302:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    5306:	4b1a      	ldr	r3, [pc, #104]	; (5370 <common_init+0xc4>)
    5308:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
    530c:	3a01      	subs	r2, #1
    530e:	b292      	uxth	r2, r2
    5310:	f7fd f96c 	bl	25ec <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    5314:	4814      	ldr	r0, [pc, #80]	; (5368 <common_init+0xbc>)
    5316:	f7fd f98d 	bl	2634 <mem_acquire>
	LL_ASSERT(link);
    531a:	b940      	cbnz	r0, 532e <common_init+0x82>
    531c:	4040      	eors	r0, r0
    531e:	f380 8811 	msr	BASEPRI, r0
    5322:	f04f 0004 	mov.w	r0, #4
    5326:	df02      	svc	2
		_radio.conn_free = NULL;
    5328:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    532c:	e7cc      	b.n	52c8 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    532e:	4a11      	ldr	r2, [pc, #68]	; (5374 <common_init+0xc8>)
    5330:	1f11      	subs	r1, r2, #4
    5332:	f7fd f9c4 	bl	26be <memq_init>
	_radio.advertiser.chan_map = 0x07;
    5336:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    533a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    533e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    5342:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5346:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    534a:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    534e:	f242 531f 	movw	r3, #9503	; 0x251f
    5352:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
}
    5356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    535a:	f7ff bf5d 	b.w	5218 <packet_rx_allocate.constprop.50>
    535e:	bf00      	nop
    5360:	20000280 	.word	0x20000280
    5364:	200003a8 	.word	0x200003a8
    5368:	200003c0 	.word	0x200003c0
    536c:	200003d4 	.word	0x200003d4
    5370:	200003dc 	.word	0x200003dc
    5374:	200003c8 	.word	0x200003c8

00005378 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    5378:	4b02      	ldr	r3, [pc, #8]	; (5384 <mayfly_xtal_start+0xc>)
    537a:	6818      	ldr	r0, [r3, #0]
    537c:	6843      	ldr	r3, [r0, #4]
    537e:	2100      	movs	r1, #0
    5380:	681b      	ldr	r3, [r3, #0]
    5382:	4718      	bx	r3
    5384:	20000280 	.word	0x20000280

00005388 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    5388:	4b02      	ldr	r3, [pc, #8]	; (5394 <mayfly_xtal_stop+0xc>)
    538a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    538c:	6843      	ldr	r3, [r0, #4]
    538e:	2100      	movs	r1, #0
    5390:	685b      	ldr	r3, [r3, #4]
    5392:	4718      	bx	r3
    5394:	20000280 	.word	0x20000280

00005398 <chan_sel_2>:
{
    5398:	b4f0      	push	{r4, r5, r6, r7}
	prn_e = counter ^ chan_id;
    539a:	4048      	eors	r0, r1
    539c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    539e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    53a2:	2608      	movs	r6, #8
	o = 0;
    53a4:	2400      	movs	r4, #0
		o |= (i & 1);
    53a6:	f00c 0501 	and.w	r5, ip, #1
    53aa:	3e01      	subs	r6, #1
    53ac:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    53b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    53b4:	b2ec      	uxtb	r4, r5
		i >>= 1;
    53b6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    53ba:	d1f4      	bne.n	53a6 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    53bc:	0225      	lsls	r5, r4, #8
    53be:	b22d      	sxth	r5, r5
    53c0:	b2c0      	uxtb	r0, r0
    53c2:	f04f 0c08 	mov.w	ip, #8
	o = 0;
    53c6:	4634      	mov	r4, r6
		o |= (i & 1);
    53c8:	f000 0601 	and.w	r6, r0, #1
    53cc:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    53d0:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    53d4:	f016 0cff 	ands.w	ip, r6, #255	; 0xff
		o |= (i & 1);
    53d8:	b2e4      	uxtb	r4, r4
		i >>= 1;
    53da:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    53de:	d1f3      	bne.n	53c8 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    53e0:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    53e2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    53e6:	3f01      	subs	r7, #1
    53e8:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    53ea:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    53ee:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    53f0:	d1d5      	bne.n	539e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    53f2:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    53f4:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    53f6:	fbb1 f0f4 	udiv	r0, r1, r4
    53fa:	fb04 1010 	mls	r0, r4, r0, r1
    53fe:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5400:	08c4      	lsrs	r4, r0, #3
    5402:	f000 0507 	and.w	r5, r0, #7
    5406:	5d14      	ldrb	r4, [r2, r4]
    5408:	412c      	asrs	r4, r5
    540a:	07e4      	lsls	r4, r4, #31
    540c:	d405      	bmi.n	541a <chan_sel_2+0x82>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    540e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    5410:	0c09      	lsrs	r1, r1, #16
    5412:	4610      	mov	r0, r2
}
    5414:	bcf0      	pop	{r4, r5, r6, r7}
		chan_next = chan_sel_remap(chan_map, chan_index);
    5416:	f7fe bed3 	b.w	41c0 <chan_sel_remap>
}
    541a:	bcf0      	pop	{r4, r5, r6, r7}
    541c:	4770      	bx	lr
	...

00005420 <preempt_calc>:
{
    5420:	b570      	push	{r4, r5, r6, lr}
    5422:	4614      	mov	r4, r2
    5424:	460e      	mov	r6, r1
    5426:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    5428:	f7fe f8b4 	bl	3594 <ticker_ticks_now_get>
	u32_t diff =
    542c:	4621      	mov	r1, r4
    542e:	f7fe f8b3 	bl	3598 <ticker_ticks_diff_get>
	diff += 3;
    5432:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    5434:	2c09      	cmp	r4, #9
    5436:	d911      	bls.n	545c <preempt_calc+0x3c>
		if (s_xtal_retained) {
    5438:	4b09      	ldr	r3, [pc, #36]	; (5460 <preempt_calc+0x40>)
    543a:	781b      	ldrb	r3, [r3, #0]
    543c:	b113      	cbz	r3, 5444 <preempt_calc+0x24>
    543e:	2000      	movs	r0, #0
    5440:	f7ff f9d0 	bl	47e4 <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    5444:	4632      	mov	r2, r6
    5446:	2100      	movs	r1, #0
    5448:	4628      	mov	r0, r5
    544a:	f7ff fd9b 	bl	4f84 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    544e:	68ab      	ldr	r3, [r5, #8]
    5450:	441c      	add	r4, r3
		if (diff <
    5452:	2c26      	cmp	r4, #38	; 0x26
    5454:	d800      	bhi.n	5458 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    5456:	60ac      	str	r4, [r5, #8]
		return 1;
    5458:	2001      	movs	r0, #1
    545a:	e000      	b.n	545e <preempt_calc+0x3e>
	return 0;
    545c:	2000      	movs	r0, #0
}
    545e:	bd70      	pop	{r4, r5, r6, pc}
    5460:	20000488 	.word	0x20000488

00005464 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    5464:	4b29      	ldr	r3, [pc, #164]	; (550c <event_adv+0xa8>)
    5466:	7cda      	ldrb	r2, [r3, #19]
{
    5468:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    546a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    546e:	4605      	mov	r5, r0
    5470:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    5472:	b12a      	cbz	r2, 5480 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5474:	4040      	eors	r0, r0
    5476:	f380 8811 	msr	BASEPRI, r0
    547a:	f04f 0004 	mov.w	r0, #4
    547e:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    5480:	7c1b      	ldrb	r3, [r3, #16]
    5482:	b2db      	uxtb	r3, r3
    5484:	2b05      	cmp	r3, #5
    5486:	d1f5      	bne.n	5474 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    5488:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    548a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    548e:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    5490:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    5494:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    5496:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    5498:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    549a:	f7ff fd97 	bl	4fcc <adv_scan_configure.constprop.48>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    549e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    54a2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    54a6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    54aa:	f363 0202 	bfi	r2, r3, #0, #3
    54ae:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    54b2:	f7ff fb5d 	bl	4b70 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    54b6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    54ba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    54be:	d007      	beq.n	54d0 <event_adv+0x6c>
		struct ll_filter *wl = ctrl_filter_get(true);
    54c0:	4630      	mov	r0, r6
    54c2:	f002 ffd9 	bl	8478 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    54c6:	1c82      	adds	r2, r0, #2
    54c8:	7841      	ldrb	r1, [r0, #1]
    54ca:	7800      	ldrb	r0, [r0, #0]
    54cc:	f003 fb1a 	bl	8b04 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    54d0:	68e2      	ldr	r2, [r4, #12]
    54d2:	f105 0109 	add.w	r1, r5, #9
    54d6:	2001      	movs	r0, #1
    54d8:	f003 fb6a 	bl	8bb0 <radio_tmr_start>
	radio_tmr_end_capture();
    54dc:	f003 fc38 	bl	8d50 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    54e0:	462a      	mov	r2, r5
    54e2:	2105      	movs	r1, #5
    54e4:	480a      	ldr	r0, [pc, #40]	; (5510 <event_adv+0xac>)
    54e6:	f7ff ff9b 	bl	5420 <preempt_calc>
    54ea:	4603      	mov	r3, r0
    54ec:	b128      	cbz	r0, 54fa <event_adv+0x96>
		_radio.state = STATE_STOP;
    54ee:	2304      	movs	r3, #4
    54f0:	7523      	strb	r3, [r4, #20]
}
    54f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    54f6:	f003 ba65 	b.w	89c4 <radio_disable>
		ticker_status =
    54fa:	4a06      	ldr	r2, [pc, #24]	; (5514 <event_adv+0xb0>)
    54fc:	4601      	mov	r1, r0
    54fe:	f7fd fff9 	bl	34f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5502:	f030 0302 	bics.w	r3, r0, #2
    5506:	d1b5      	bne.n	5474 <event_adv+0x10>
}
    5508:	bd70      	pop	{r4, r5, r6, pc}
    550a:	bf00      	nop
    550c:	20000280 	.word	0x20000280
    5510:	20000298 	.word	0x20000298
    5514:	00004791 	.word	0x00004791

00005518 <connection_configure>:
{
    5518:	b510      	push	{r4, lr}
    551a:	4604      	mov	r4, r0
	radio_reset();
    551c:	f003 f99e 	bl	885c <radio_reset>
	radio_tx_power_set(0);
    5520:	2000      	movs	r0, #0
    5522:	f003 f9c5 	bl	88b0 <radio_tx_power_set>
	radio_isr_set(isr);
    5526:	480a      	ldr	r0, [pc, #40]	; (5550 <connection_configure+0x38>)
    5528:	f003 f962 	bl	87f0 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    552c:	f104 0010 	add.w	r0, r4, #16
    5530:	f003 f9dc 	bl	88ec <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    5534:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    5536:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    5538:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    553a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    553e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5540:	f240 605b 	movw	r0, #1627	; 0x65b
    5544:	4319      	orrs	r1, r3
}
    5546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    554a:	f003 ba77 	b.w	8a3c <radio_crc_configure>
    554e:	bf00      	nop
    5550:	00005f39 	.word	0x00005f39

00005554 <event_slave>:
{
    5554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5558:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    555a:	4b58      	ldr	r3, [pc, #352]	; (56bc <event_slave+0x168>)
    555c:	7cda      	ldrb	r2, [r3, #19]
{
    555e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    5560:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    5564:	461d      	mov	r5, r3
    5566:	b12a      	cbz	r2, 5574 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5568:	4040      	eors	r0, r0
    556a:	f380 8811 	msr	BASEPRI, r0
    556e:	f04f 0004 	mov.w	r0, #4
    5572:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    5574:	7c1a      	ldrb	r2, [r3, #16]
    5576:	8c23      	ldrh	r3, [r4, #32]
    5578:	b2d2      	uxtb	r2, r2
    557a:	3307      	adds	r3, #7
    557c:	429a      	cmp	r2, r3
    557e:	d1f3      	bne.n	5568 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
    5580:	2303      	movs	r3, #3
    5582:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    5584:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	_radio.state = STATE_RX;
    5588:	2301      	movs	r3, #1
    558a:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    558c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    558e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    5592:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    5594:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    5596:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    5598:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    559a:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    559c:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    559e:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    55a0:	f7ff ffba 	bl	5518 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    55a4:	2096      	movs	r0, #150	; 0x96
    55a6:	f003 faf7 	bl	8b98 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    55aa:	4633      	mov	r3, r6
    55ac:	4632      	mov	r2, r6
    55ae:	4631      	mov	r1, r6
    55b0:	4630      	mov	r0, r6
    55b2:	f003 fa6d 	bl	8a90 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    55b6:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
    55ba:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    55be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    55c2:	4620      	mov	r0, r4
    55c4:	3108      	adds	r1, #8
    55c6:	f7ff f979 	bl	48bc <rx_packet_set>
	if (conn->data_chan_sel) {
    55ca:	7f63      	ldrb	r3, [r4, #29]
    55cc:	0658      	lsls	r0, r3, #25
    55ce:	f104 0217 	add.w	r2, r4, #23
    55d2:	d54a      	bpl.n	566a <event_slave+0x116>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    55d4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    55d6:	8be1      	ldrh	r1, [r4, #30]
    55d8:	3801      	subs	r0, #1
    55da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    55de:	b280      	uxth	r0, r0
    55e0:	f7ff feda 	bl	5398 <chan_sel_2>
	chan_set(data_chan_use);
    55e4:	f7ff faa4 	bl	4b30 <chan_set>
	conn->slave.window_widening_event_us +=
    55e8:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    55ec:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    55ee:	2200      	movs	r2, #0
    55f0:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    55f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    55f4:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    55f6:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    55f8:	bf88      	it	hi
    55fa:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    55fc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    5600:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    5602:	4413      	add	r3, r2
    5604:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    5606:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    5608:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    560a:	f107 0109 	add.w	r1, r7, #9
    560e:	4630      	mov	r0, r6
    5610:	f003 face 	bl	8bb0 <radio_tmr_start>
    5614:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    5616:	f003 fb67 	bl	8ce8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    561a:	4630      	mov	r0, r6
    561c:	f003 fb86 	bl	8d2c <radio_tmr_aa_save>
    5620:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    5622:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5624:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    5626:	4631      	mov	r1, r6
    5628:	4630      	mov	r0, r6
    562a:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    562e:	f003 f9b6 	bl	899e <radio_rx_ready_delay_get>
    5632:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    5634:	4631      	mov	r1, r6
    5636:	4480      	add	r8, r0
    5638:	4630      	mov	r0, r6
    563a:	f003 f9b2 	bl	89a2 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    563e:	4440      	add	r0, r8
    5640:	f003 fb34 	bl	8cac <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    5644:	f894 1020 	ldrb.w	r1, [r4, #32]
    5648:	3107      	adds	r1, #7
    564a:	463a      	mov	r2, r7
    564c:	b2c9      	uxtb	r1, r1
    564e:	4620      	mov	r0, r4
    5650:	f7ff fee6 	bl	5420 <preempt_calc>
    5654:	4603      	mov	r3, r0
    5656:	b340      	cbz	r0, 56aa <event_slave+0x156>
		_radio.state = STATE_STOP;
    5658:	2304      	movs	r3, #4
    565a:	752b      	strb	r3, [r5, #20]
		radio_disable();
    565c:	f003 f9b2 	bl	89c4 <radio_disable>
	packet_tx_enqueue(2);
    5660:	2002      	movs	r0, #2
}
    5662:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    5666:	f7ff b96f 	b.w	4948 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    566a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    566c:	7fa6      	ldrb	r6, [r4, #30]
    566e:	fb01 6606 	mla	r6, r1, r6, r6
    5672:	7fe1      	ldrb	r1, [r4, #31]
    5674:	2025      	movs	r0, #37	; 0x25
    5676:	440e      	add	r6, r1
    5678:	fb96 f1f0 	sdiv	r1, r6, r0
    567c:	fb00 6611 	mls	r6, r0, r1, r6
    5680:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5682:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    5684:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5686:	5c51      	ldrb	r1, [r2, r1]
    5688:	f006 0607 	and.w	r6, r6, #7
    568c:	fa41 f606 	asr.w	r6, r1, r6
    5690:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    5692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5696:	d4a5      	bmi.n	55e4 <event_slave+0x90>
		chan_index = chan_next % chan_count;
    5698:	fbb0 f1f3 	udiv	r1, r0, r3
    569c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    56a0:	b2c9      	uxtb	r1, r1
    56a2:	4610      	mov	r0, r2
    56a4:	f7fe fd8c 	bl	41c0 <chan_sel_remap>
    56a8:	e79c      	b.n	55e4 <event_slave+0x90>
		ticker_status =
    56aa:	4a05      	ldr	r2, [pc, #20]	; (56c0 <event_slave+0x16c>)
    56ac:	4601      	mov	r1, r0
    56ae:	f7fd ff21 	bl	34f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    56b2:	f030 0302 	bics.w	r3, r0, #2
    56b6:	f47f af57 	bne.w	5568 <event_slave+0x14>
    56ba:	e7d1      	b.n	5660 <event_slave+0x10c>
    56bc:	20000280 	.word	0x20000280
    56c0:	00004791 	.word	0x00004791

000056c4 <ctrl_tx_enqueue>:
{
    56c4:	b510      	push	{r4, lr}
	    !conn->empty &&
    56c6:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    56ca:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    56ce:	f014 0f80 	tst.w	r4, #128	; 0x80
    56d2:	d118      	bne.n	5706 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    56d4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    56d8:	b1ab      	cbz	r3, 5706 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    56da:	0724      	lsls	r4, r4, #28
    56dc:	d413      	bmi.n	5706 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    56de:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    56e2:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    56e4:	bf04      	itt	eq
    56e6:	681c      	ldreq	r4, [r3, #0]
    56e8:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    56ec:	b992      	cbnz	r2, 5714 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    56ee:	681a      	ldr	r2, [r3, #0]
    56f0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    56f2:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    56f4:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    56f8:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    56fc:	680b      	ldr	r3, [r1, #0]
    56fe:	b90b      	cbnz	r3, 5704 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    5700:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
}
    5704:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    5706:	b92a      	cbnz	r2, 5714 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    5708:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    570c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    570e:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    5712:	e7ef      	b.n	56f4 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    5714:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5718:	681a      	ldr	r2, [r3, #0]
    571a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    571c:	6019      	str	r1, [r3, #0]
    571e:	e7eb      	b.n	56f8 <ctrl_tx_enqueue+0x34>

00005720 <ctrl_tx_sec_enqueue>:
{
    5720:	b410      	push	{r4}
	if (conn->pause_tx) {
    5722:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    5726:	0724      	lsls	r4, r4, #28
{
    5728:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    572a:	d50f      	bpl.n	574c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    572c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    5730:	b931      	cbnz	r1, 5740 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    5732:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    5736:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    5738:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    573c:	bc10      	pop	{r4}
    573e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    5740:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5744:	6819      	ldr	r1, [r3, #0]
    5746:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    5748:	601a      	str	r2, [r3, #0]
    574a:	e7f7      	b.n	573c <ctrl_tx_sec_enqueue+0x1c>
}
    574c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    574e:	f7ff bfb9 	b.w	56c4 <ctrl_tx_enqueue>
	...

00005754 <feature_rsp_send>:
{
    5754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5756:	4f21      	ldr	r7, [pc, #132]	; (57dc <feature_rsp_send+0x88>)
{
    5758:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    575a:	f507 70aa 	add.w	r0, r7, #340	; 0x154
{
    575e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5760:	f7fc ff68 	bl	2634 <mem_acquire>
	if (!node_tx) {
    5764:	4604      	mov	r4, r0
    5766:	b3b0      	cbz	r0, 57d6 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    5768:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    576a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    576c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    5770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    5774:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    5778:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    577c:	f043 0310 	orr.w	r3, r3, #16
    5780:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    5784:	79b1      	ldrb	r1, [r6, #6]
    5786:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    578a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    578e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    5792:	400b      	ands	r3, r1
    5794:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    5798:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    579c:	f043 0320 	orr.w	r3, r3, #32
    57a0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    57a4:	7903      	ldrb	r3, [r0, #4]
    57a6:	f043 0303 	orr.w	r3, r3, #3
    57aa:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    57ac:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    57ae:	2309      	movs	r3, #9
    57b0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    57b2:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    57b4:	2100      	movs	r1, #0
    57b6:	4410      	add	r0, r2
    57b8:	f7fa ff3e 	bl	638 <memset>
		conn->llcp_features & 0xFF;
    57bc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    57c0:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    57c2:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    57c4:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    57c6:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    57c8:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    57ca:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    57cc:	4621      	mov	r1, r4
    57ce:	f7ff ffa7 	bl	5720 <ctrl_tx_sec_enqueue>
	return 0;
    57d2:	2000      	movs	r0, #0
}
    57d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    57d6:	2001      	movs	r0, #1
    57d8:	e7fc      	b.n	57d4 <feature_rsp_send+0x80>
    57da:	bf00      	nop
    57dc:	20000280 	.word	0x20000280

000057e0 <event_connection_prepare>:
{
    57e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    57e4:	4d6f      	ldr	r5, [pc, #444]	; (59a4 <event_connection_prepare+0x1c4>)
{
    57e6:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    57e8:	7c2b      	ldrb	r3, [r5, #16]
{
    57ea:	b08f      	sub	sp, #60	; 0x3c
    57ec:	4680      	mov	r8, r0
    57ee:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    57f0:	b12b      	cbz	r3, 57fe <event_connection_prepare+0x1e>
			LL_ASSERT(0);
    57f2:	4040      	eors	r0, r0
    57f4:	f380 8811 	msr	BASEPRI, r0
    57f8:	f04f 0004 	mov.w	r0, #4
    57fc:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    57fe:	f894 3020 	ldrb.w	r3, [r4, #32]
    5802:	3307      	adds	r3, #7
    5804:	b2db      	uxtb	r3, r3
    5806:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    5808:	f994 301d 	ldrsb.w	r3, [r4, #29]
    580c:	2b00      	cmp	r3, #0
    580e:	da09      	bge.n	5824 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    5810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    5812:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    5814:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    5818:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    581a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    581c:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    581e:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    5820:	bf88      	it	hi
    5822:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    5824:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    5826:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    582a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    582c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    582e:	b292      	uxth	r2, r2
    5830:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    5832:	4432      	add	r2, r6
    5834:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    5836:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    583a:	429a      	cmp	r2, r3
    583c:	d071      	beq.n	5922 <event_connection_prepare+0x142>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    583e:	2005      	movs	r0, #5
    5840:	f7ff fbee 	bl	5020 <event_stop.constprop.49>
		switch (conn->llcp_type) {
    5844:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    5848:	3b01      	subs	r3, #1
    584a:	2b03      	cmp	r3, #3
    584c:	d8d1      	bhi.n	57f2 <event_connection_prepare+0x12>
    584e:	e8df f013 	tbh	[pc, r3, lsl #1]
    5852:	0004      	.short	0x0004
    5854:	0270022e 	.word	0x0270022e
    5858:	02b9      	.short	0x02b9
	if (!conn_upd) {
    585a:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    585e:	b90b      	cbnz	r3, 5864 <event_connection_prepare+0x84>
		_radio.conn_upd = conn;
    5860:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    5864:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5868:	f013 0303 	ands.w	r3, r3, #3
    586c:	f000 80a6 	beq.w	59bc <event_connection_prepare+0x1dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5870:	484d      	ldr	r0, [pc, #308]	; (59a8 <event_connection_prepare+0x1c8>)
    5872:	f7fc fedf 	bl	2634 <mem_acquire>
		if (!node_tx) {
    5876:	4605      	mov	r5, r0
    5878:	2800      	cmp	r0, #0
    587a:	d052      	beq.n	5922 <event_connection_prepare+0x142>
		switch (conn->llcp.conn_upd.state) {
    587c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5880:	f003 0203 	and.w	r2, r3, #3
    5884:	2a01      	cmp	r2, #1
    5886:	d1b4      	bne.n	57f2 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    5888:	f36f 0301 	bfc	r3, #0, #2
    588c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    5890:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5892:	7902      	ldrb	r2, [r0, #4]
		event_counter + conn->latency + 6;
    5894:	3306      	adds	r3, #6
    5896:	4433      	add	r3, r6
    5898:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    589a:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
    589e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    58a2:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    58a4:	220c      	movs	r2, #12
    58a6:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    58a8:	2200      	movs	r2, #0
    58aa:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    58ac:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    58b0:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    58b2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    58b6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    58b8:	fbb2 f2f1 	udiv	r2, r2, r1
    58bc:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    58c0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    58c4:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    58c8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    58cc:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    58d0:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    58d4:	f8a0 200f 	strh.w	r2, [r0, #15]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    58d8:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    58da:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    58de:	2a00      	cmp	r2, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    58e0:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    58e4:	da0a      	bge.n	58fc <event_connection_prepare+0x11c>
			u32_t ticks_prepare_to_start =
    58e6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    58ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    58ee:	428b      	cmp	r3, r1
    58f0:	bf2c      	ite	cs
    58f2:	4443      	addcs	r3, r8
    58f4:	eb08 0301 	addcc.w	r3, r8, r1
    58f8:	1a9b      	subs	r3, r3, r2
    58fa:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    58fc:	f105 0309 	add.w	r3, r5, #9
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    5900:	4a2a      	ldr	r2, [pc, #168]	; (59ac <event_connection_prepare+0x1cc>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    5902:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    5904:	4b2a      	ldr	r3, [pc, #168]	; (59b0 <event_connection_prepare+0x1d0>)
		mayfly_sched_offset->param = (void *)conn;
    5906:	e9c3 4202 	strd	r4, r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    590a:	2201      	movs	r2, #1
    590c:	4611      	mov	r1, r2
    590e:	2000      	movs	r0, #0
    5910:	f7fc ff46 	bl	27a0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    5914:	2800      	cmp	r0, #0
    5916:	f47f af6c 	bne.w	57f2 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    591a:	4629      	mov	r1, r5
    591c:	4620      	mov	r0, r4
    591e:	f7ff fed1 	bl	56c4 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    5922:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    5926:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    592a:	429a      	cmp	r2, r3
    592c:	d01d      	beq.n	596a <event_connection_prepare+0x18a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    592e:	2005      	movs	r0, #5
    5930:	f7ff fb76 	bl	5020 <event_stop.constprop.49>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5934:	481c      	ldr	r0, [pc, #112]	; (59a8 <event_connection_prepare+0x1c8>)
    5936:	f7fc fe7d 	bl	2634 <mem_acquire>
		if (node_tx) {
    593a:	4601      	mov	r1, r0
    593c:	b1a8      	cbz	r0, 596a <event_connection_prepare+0x18a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    593e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    5942:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5946:	7903      	ldrb	r3, [r0, #4]
    5948:	f043 0303 	orr.w	r3, r3, #3
    594c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    594e:	2302      	movs	r3, #2
    5950:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5952:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    5954:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    5958:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    595a:	4620      	mov	r0, r4
    595c:	f7ff feb2 	bl	56c4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    5960:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    5962:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    5964:	bf98      	it	ls
    5966:	3301      	addls	r3, #1
    5968:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    596a:	f894 3020 	ldrb.w	r3, [r4, #32]
    596e:	f994 501d 	ldrsb.w	r5, [r4, #29]
    5972:	4810      	ldr	r0, [pc, #64]	; (59b4 <event_connection_prepare+0x1d4>)
    5974:	4910      	ldr	r1, [pc, #64]	; (59b8 <event_connection_prepare+0x1d8>)
    5976:	68a2      	ldr	r2, [r4, #8]
    5978:	3307      	adds	r3, #7
    597a:	ea31 0125 	bics.w	r1, r1, r5, asr #32
    597e:	bf28      	it	cs
    5980:	4601      	movcs	r1, r0
    5982:	b2db      	uxtb	r3, r3
    5984:	e9cd 2300 	strd	r2, r3, [sp]
    5988:	e9cd 1402 	strd	r1, r4, [sp, #8]
    598c:	1d23      	adds	r3, r4, #4
    598e:	4622      	mov	r2, r4
    5990:	4649      	mov	r1, r9
    5992:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    5994:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    5996:	f7ff fb51 	bl	503c <event_common_prepare>
	conn->event_counter = event_counter + 1;
    599a:	8466      	strh	r6, [r4, #34]	; 0x22
}
    599c:	b00f      	add	sp, #60	; 0x3c
    599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59a2:	bf00      	nop
    59a4:	20000280 	.word	0x20000280
    59a8:	200003d4 	.word	0x200003d4
    59ac:	00004c95 	.word	0x00004c95
    59b0:	20002aa8 	.word	0x20002aa8
    59b4:	00005555 	.word	0x00005555
    59b8:	00007649 	.word	0x00007649
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    59bc:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    59c0:	1bf7      	subs	r7, r6, r7
    59c2:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    59c4:	0438      	lsls	r0, r7, #16
    59c6:	d4ac      	bmi.n	5922 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    59c8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    59cc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    59d0:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0;
    59d4:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    59d6:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    59d8:	bf08      	it	eq
    59da:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		if ((conn->llcp.conn_upd.interval !=
    59de:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    59e0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    59e4:	429a      	cmp	r2, r3
    59e6:	d114      	bne.n	5a12 <event_connection_prepare+0x232>
		     conn->conn_interval) ||
    59e8:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    59ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    59ee:	4299      	cmp	r1, r3
    59f0:	d10f      	bne.n	5a12 <event_connection_prepare+0x232>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    59f2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    59f6:	435a      	muls	r2, r3
    59f8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    59fc:	f242 7110 	movw	r1, #10000	; 0x2710
    5a00:	fb01 2303 	mla	r3, r1, r3, r2
    5a04:	3b01      	subs	r3, #1
    5a06:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    5a0a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    5a0c:	b29b      	uxth	r3, r3
    5a0e:	429a      	cmp	r2, r3
    5a10:	d016      	beq.n	5a40 <event_connection_prepare+0x260>
			node_rx = packet_rx_reserve_get(2);
    5a12:	2002      	movs	r0, #2
    5a14:	f7fe fbf0 	bl	41f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    5a18:	2800      	cmp	r0, #0
    5a1a:	f43f aeea 	beq.w	57f2 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    5a1e:	8c23      	ldrh	r3, [r4, #32]
    5a20:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    5a22:	2308      	movs	r3, #8
    5a24:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    5a26:	2300      	movs	r3, #0
    5a28:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    5a2a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    5a2e:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    5a30:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    5a34:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    5a36:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    5a3a:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    5a3c:	f7ff f9fc 	bl	4e38 <packet_rx_enqueue>
    5a40:	e9d4 3600 	ldrd	r3, r6, [r4]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5a44:	2b00      	cmp	r3, #0
    5a46:	da09      	bge.n	5a5c <event_connection_prepare+0x27c>
			u32_t ticks_prepare_to_start =
    5a48:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5a4e:	4286      	cmp	r6, r0
    5a50:	bf2c      	ite	cs
    5a52:	44b0      	addcs	r8, r6
    5a54:	4480      	addcc	r8, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5a56:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5a58:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    5a5c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    5a5e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    5a62:	49cd      	ldr	r1, [pc, #820]	; (5d98 <event_connection_prepare+0x5b8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    5a64:	fb13 f307 	smulbb	r3, r3, r7
    5a68:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    5a6a:	fbb3 f2fa 	udiv	r2, r3, sl
    5a6e:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    5a72:	fb1a f009 	smulbb	r0, sl, r9
    5a76:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    5a78:	4283      	cmp	r3, r0
    5a7a:	f080 80f9 	bcs.w	5c70 <event_connection_prepare+0x490>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    5a7e:	1ac0      	subs	r0, r0, r3
    5a80:	f240 1223 	movw	r2, #291	; 0x123
    5a84:	ea4f 7ce0 	mov.w	ip, r0, asr #31
    5a88:	4342      	muls	r2, r0
    5a8a:	fb01 230c 	mla	r3, r1, ip, r2
    5a8e:	fba0 0101 	umull	r0, r1, r0, r1
    5a92:	4419      	add	r1, r3
    5a94:	a3be      	add	r3, pc, #760	; (adr r3, 5d90 <event_connection_prepare+0x5b0>)
    5a96:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a9a:	f7fa fbe5 	bl	268 <__aeabi_uldivmod>
    5a9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5aa2:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5aa6:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    5aa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5aaa:	f8df b314 	ldr.w	fp, [pc, #788]	; 5dc0 <event_connection_prepare+0x5e0>
    5aae:	1bdb      	subs	r3, r3, r7
    5ab0:	444b      	add	r3, r9
    5ab2:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    5ab4:	6823      	ldr	r3, [r4, #0]
    5ab6:	429e      	cmp	r6, r3
    5ab8:	bf38      	it	cc
    5aba:	461e      	movcc	r6, r3
    5abc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5abe:	930a      	str	r3, [sp, #40]	; 0x28
		if (conn->role) {
    5ac0:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    5ac4:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    5ac6:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    5aca:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    5acc:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    5ad0:	f280 80e0 	bge.w	5c94 <event_connection_prepare+0x4b4>
				conn->slave.window_widening_periodic_us *
    5ad4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    5ad6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5ad8:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    5adc:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    5ae0:	4aae      	ldr	r2, [pc, #696]	; (5d9c <event_connection_prepare+0x5bc>)
    5ae2:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    5ae6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    5aea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    5aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    5af2:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    5af6:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    5af8:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5afa:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    5afe:	4ba8      	ldr	r3, [pc, #672]	; (5da0 <event_connection_prepare+0x5c0>)
				conn->llcp.conn_upd.win_size * 1250;
    5b00:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5b04:	f205 253f 	addw	r5, r5, #575	; 0x23f
    5b08:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    5b0c:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    5b0e:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    5b12:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    5b14:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    5b16:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    5b18:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    5b1a:	429f      	cmp	r7, r3
    5b1c:	bf94      	ite	ls
    5b1e:	6467      	strls	r7, [r4, #68]	; 0x44
    5b20:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    5b22:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    5b24:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    5b26:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5b28:	fba0 010b 	umull	r0, r1, r0, fp
    5b2c:	a398      	add	r3, pc, #608	; (adr r3, 5d90 <event_connection_prepare+0x5b0>)
    5b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5b32:	f7fa fb99 	bl	268 <__aeabi_uldivmod>
    5b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b38:	1a1b      	subs	r3, r3, r0
    5b3a:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b3e:	fbb3 f0f8 	udiv	r0, r3, r8
    5b42:	fb08 f000 	mul.w	r0, r8, r0
    5b46:	a392      	add	r3, pc, #584	; (adr r3, 5d90 <event_connection_prepare+0x5b0>)
    5b48:	e9d3 2300 	ldrd	r2, r3, [r3]
    5b4c:	fba0 010b 	umull	r0, r1, r0, fp
    5b50:	f7fa fb8a 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    5b54:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5b56:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    5b5a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    5b5e:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5b60:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5b64:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5b68:	f242 7210 	movw	r2, #10000	; 0x2710
    5b6c:	fb02 6303 	mla	r3, r2, r3, r6
    5b70:	3b01      	subs	r3, #1
    5b72:	fbb3 f3f6 	udiv	r3, r3, r6
    5b76:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5b78:	4b8a      	ldr	r3, [pc, #552]	; (5da4 <event_connection_prepare+0x5c4>)
    5b7a:	4433      	add	r3, r6
    5b7c:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    5b80:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5b84:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    5b86:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    5b8a:	bf08      	it	eq
    5b8c:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    5b8e:	2101      	movs	r1, #1
    5b90:	2000      	movs	r0, #0
    5b92:	f003 f9b9 	bl	8f08 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5b96:	2200      	movs	r2, #0
    5b98:	2101      	movs	r1, #1
		mayfly_was_enabled =
    5b9a:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5b9c:	4610      	mov	r0, r2
    5b9e:	f7fc fdd7 	bl	2750 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ba2:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    5ba6:	f641 23a7 	movw	r3, #6823	; 0x1aa7
    5baa:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bac:	3207      	adds	r2, #7
		ticker_status =
    5bae:	9300      	str	r3, [sp, #0]
    5bb0:	b2d2      	uxtb	r2, r2
    5bb2:	4b7d      	ldr	r3, [pc, #500]	; (5da8 <event_connection_prepare+0x5c8>)
    5bb4:	4608      	mov	r0, r1
    5bb6:	f7fd fc25 	bl	3404 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5bba:	f030 0802 	bics.w	r8, r0, #2
    5bbe:	f47f ae18 	bne.w	57f2 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    5bc2:	fba5 ab0b 	umull	sl, fp, r5, fp
    5bc6:	a372      	add	r3, pc, #456	; (adr r3, 5d90 <event_connection_prepare+0x5b0>)
    5bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    5bcc:	4650      	mov	r0, sl
    5bce:	4659      	mov	r1, fp
    5bd0:	f7fa fb4a 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    5bd4:	2300      	movs	r3, #0
    5bd6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    5bda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    5bde:	990a      	ldr	r1, [sp, #40]	; 0x28
    5be0:	4a72      	ldr	r2, [pc, #456]	; (5dac <event_connection_prepare+0x5cc>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5be2:	f894 6020 	ldrb.w	r6, [r4, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    5be6:	2307      	movs	r3, #7
    5be8:	434b      	muls	r3, r1
    5bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5bec:	fb02 3301 	mla	r3, r2, r1, r3
    5bf0:	990a      	ldr	r1, [sp, #40]	; 0x28
    5bf2:	fba1 1202 	umull	r1, r2, r1, r2
    5bf6:	441a      	add	r2, r3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bf8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    5bfc:	4608      	mov	r0, r1
    5bfe:	ebba 0000 	subs.w	r0, sl, r0
    5c02:	4611      	mov	r1, r2
    5c04:	eb6b 0101 	sbc.w	r1, fp, r1
    5c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c0c:	2300      	movs	r3, #0
    5c0e:	f7fa fb2b 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c12:	68e3      	ldr	r3, [r4, #12]
    5c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5c16:	f994 c01d 	ldrsb.w	ip, [r4, #29]
    5c1a:	4965      	ldr	r1, [pc, #404]	; (5db0 <event_connection_prepare+0x5d0>)
    5c1c:	441a      	add	r2, r3
    5c1e:	4613      	mov	r3, r2
    5c20:	4a64      	ldr	r2, [pc, #400]	; (5db4 <event_connection_prepare+0x5d4>)
    5c22:	ea32 022c 	bics.w	r2, r2, ip, asr #32
    5c26:	bf28      	it	cs
    5c28:	460a      	movcs	r2, r1
		ticker_status =
    5c2a:	f641 21b7 	movw	r1, #6839	; 0x1ab7
    5c2e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c30:	3607      	adds	r6, #7
		ticker_status =
    5c32:	495d      	ldr	r1, [pc, #372]	; (5da8 <event_connection_prepare+0x5c8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c34:	b2f6      	uxtb	r6, r6
		ticker_status =
    5c36:	e9cd 3204 	strd	r3, r2, [sp, #16]
    5c3a:	e9cd 4106 	strd	r4, r1, [sp, #24]
    5c3e:	e9cd 0802 	strd	r0, r8, [sp, #8]
    5c42:	e9cd 7500 	strd	r7, r5, [sp]
    5c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c48:	4632      	mov	r2, r6
    5c4a:	4641      	mov	r1, r8
    5c4c:	4640      	mov	r0, r8
    5c4e:	f7fd fb45 	bl	32dc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c52:	f030 0002 	bics.w	r0, r0, #2
    5c56:	f47f adcc 	bne.w	57f2 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    5c5a:	f1b9 0f00 	cmp.w	r9, #0
    5c5e:	f43f ae9d 	beq.w	599c <event_connection_prepare+0x1bc>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5c62:	2201      	movs	r2, #1
    5c64:	4611      	mov	r1, r2
}
    5c66:	b00f      	add	sp, #60	; 0x3c
    5c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5c6c:	f7fc bd70 	b.w	2750 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5c70:	fb0a 3212 	mls	r2, sl, r2, r3
    5c74:	fa1f fb82 	uxth.w	fp, r2
    5c78:	fbab 0101 	umull	r0, r1, fp, r1
    5c7c:	f240 1323 	movw	r3, #291	; 0x123
    5c80:	fb03 110b 	mla	r1, r3, fp, r1
    5c84:	a342      	add	r3, pc, #264	; (adr r3, 5d90 <event_connection_prepare+0x5b0>)
    5c86:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c8a:	f7fa faed 	bl	268 <__aeabi_uldivmod>
    5c8e:	eba8 0300 	sub.w	r3, r8, r0
    5c92:	e708      	b.n	5aa6 <event_connection_prepare+0x2c6>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5c94:	990a      	ldr	r1, [sp, #40]	; 0x28
    5c96:	a33e      	add	r3, pc, #248	; (adr r3, 5d90 <event_connection_prepare+0x5b0>)
    5c98:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c9c:	fba1 010b 	umull	r0, r1, r1, fp
    5ca0:	f7fa fae2 	bl	268 <__aeabi_uldivmod>
    5ca4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    5ca8:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    5caa:	4635      	mov	r5, r6
    5cac:	e755      	b.n	5b5a <event_connection_prepare+0x37a>
	if (conn->llcp.chan_map.initiate) {
    5cae:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5cb2:	b30b      	cbz	r3, 5cf8 <event_connection_prepare+0x518>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5cb4:	4840      	ldr	r0, [pc, #256]	; (5db8 <event_connection_prepare+0x5d8>)
    5cb6:	f7fc fcbd 	bl	2634 <mem_acquire>
		if (node_tx) {
    5cba:	4605      	mov	r5, r0
    5cbc:	2800      	cmp	r0, #0
    5cbe:	f43f ae30 	beq.w	5922 <event_connection_prepare+0x142>
			conn->llcp.chan_map.initiate = 0;
    5cc2:	2300      	movs	r3, #0
    5cc4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    5cc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    5cca:	3306      	adds	r3, #6
    5ccc:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    5cce:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5cd2:	7903      	ldrb	r3, [r0, #4]
    5cd4:	f043 0303 	orr.w	r3, r3, #3
    5cd8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    5cda:	2308      	movs	r3, #8
    5cdc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5cde:	2301      	movs	r3, #1
    5ce0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    5ce2:	2205      	movs	r2, #5
    5ce4:	f104 0161 	add.w	r1, r4, #97	; 0x61
    5ce8:	3008      	adds	r0, #8
    5cea:	f7fa fc78 	bl	5de <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    5cee:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    5cf2:	f8a5 300d 	strh.w	r3, [r5, #13]
    5cf6:	e610      	b.n	591a <event_connection_prepare+0x13a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    5cf8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    5cfc:	1af3      	subs	r3, r6, r3
    5cfe:	0419      	lsls	r1, r3, #16
    5d00:	f53f ae0f 	bmi.w	5922 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    5d04:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5d08:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    5d0c:	f104 0517 	add.w	r5, r4, #23
    5d10:	2205      	movs	r2, #5
    5d12:	f104 0161 	add.w	r1, r4, #97	; 0x61
    5d16:	4628      	mov	r0, r5
    5d18:	f7fa fc61 	bl	5de <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    5d1c:	2105      	movs	r1, #5
    5d1e:	4628      	mov	r0, r5
    5d20:	f7fc fe1e 	bl	2960 <util_ones_count_get>
		conn->data_chan_count =
    5d24:	7f63      	ldrb	r3, [r4, #29]
    5d26:	f360 0305 	bfi	r3, r0, #0, #6
    5d2a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    5d2c:	2301      	movs	r3, #1
    5d2e:	7723      	strb	r3, [r4, #28]
    5d30:	e5f7      	b.n	5922 <event_connection_prepare+0x142>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5d32:	4821      	ldr	r0, [pc, #132]	; (5db8 <event_connection_prepare+0x5d8>)
    5d34:	f7fc fc7e 	bl	2634 <mem_acquire>
	if (node_tx) {
    5d38:	4605      	mov	r5, r0
    5d3a:	2800      	cmp	r0, #0
    5d3c:	f43f adf1 	beq.w	5922 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    5d40:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5d44:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    5d48:	4b1c      	ldr	r3, [pc, #112]	; (5dbc <event_connection_prepare+0x5dc>)
    5d4a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5d4e:	7903      	ldrb	r3, [r0, #4]
    5d50:	f043 0303 	orr.w	r3, r3, #3
    5d54:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    5d56:	2309      	movs	r3, #9
    5d58:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    5d5a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	bfb4      	ite	lt
    5d62:	230e      	movlt	r3, #14
    5d64:	2308      	movge	r3, #8
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5d66:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    5d68:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    5d6a:	2100      	movs	r1, #0
    5d6c:	4410      	add	r0, r2
    5d6e:	f7fa fc63 	bl	638 <memset>
			conn->llcp_features & 0xFF;
    5d72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    5d76:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    5d78:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    5d7a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    5d7c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    5d7e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    5d80:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    5d82:	4620      	mov	r0, r4
    5d84:	f7ff fc9e 	bl	56c4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    5d88:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5d8a:	86a3      	strh	r3, [r4, #52]	; 0x34
    5d8c:	e5c9      	b.n	5922 <event_connection_prepare+0x142>
    5d8e:	bf00      	nop
    5d90:	1afd498d 	.word	0x1afd498d
    5d94:	00000007 	.word	0x00000007
    5d98:	09ce5400 	.word	0x09ce5400
    5d9c:	0000a9a0 	.word	0x0000a9a0
    5da0:	000f4240 	.word	0x000f4240
    5da4:	026259ff 	.word	0x026259ff
    5da8:	000046f5 	.word	0x000046f5
    5dac:	1afd498d 	.word	0x1afd498d
    5db0:	00005e69 	.word	0x00005e69
    5db4:	00005e6d 	.word	0x00005e6d
    5db8:	200003d4 	.word	0x200003d4
    5dbc:	0001400c 	.word	0x0001400c
    5dc0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp_version.tx == 0) {
    5dc4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    5dc8:	07da      	lsls	r2, r3, #31
    5dca:	d424      	bmi.n	5e16 <event_connection_prepare+0x636>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5dcc:	4825      	ldr	r0, [pc, #148]	; (5e64 <event_connection_prepare+0x684>)
    5dce:	f7fc fc31 	bl	2634 <mem_acquire>
		if (node_tx) {
    5dd2:	4601      	mov	r1, r0
    5dd4:	2800      	cmp	r0, #0
    5dd6:	f43f ada4 	beq.w	5922 <event_connection_prepare+0x142>
			conn->llcp_ack = conn->llcp_req;
    5dda:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5dde:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    5de2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    5de6:	f043 0301 	orr.w	r3, r3, #1
    5dea:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5dee:	7903      	ldrb	r3, [r0, #4]
    5df0:	f043 0303 	orr.w	r3, r3, #3
    5df4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    5df6:	2306      	movs	r3, #6
    5df8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5dfa:	230c      	movs	r3, #12
    5dfc:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    5dfe:	2309      	movs	r3, #9
    5e00:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    5e02:	f06f 030e 	mvn.w	r3, #14
    5e06:	7243      	strb	r3, [r0, #9]
    5e08:	2305      	movs	r3, #5
    5e0a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    5e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e10:	72c3      	strb	r3, [r0, #11]
    5e12:	7303      	strb	r3, [r0, #12]
    5e14:	e7b5      	b.n	5d82 <event_connection_prepare+0x5a2>
	} else if (conn->llcp_version.rx != 0) {
    5e16:	079b      	lsls	r3, r3, #30
    5e18:	f57f aceb 	bpl.w	57f2 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    5e1c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    5e20:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    5e24:	2002      	movs	r0, #2
    5e26:	f7fe f9e7 	bl	41f8 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    5e2a:	2800      	cmp	r0, #0
    5e2c:	f43f ace1 	beq.w	57f2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    5e30:	8c23      	ldrh	r3, [r4, #32]
    5e32:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    5e34:	2301      	movs	r3, #1
    5e36:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5e38:	7a03      	ldrb	r3, [r0, #8]
    5e3a:	f043 0303 	orr.w	r3, r3, #3
    5e3e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    5e40:	2306      	movs	r3, #6
    5e42:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    5e44:	230c      	movs	r3, #12
    5e46:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    5e48:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    5e4c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    5e4e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    5e52:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    5e56:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    5e5a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    5e5e:	f7fe ffeb 	bl	4e38 <packet_rx_enqueue>
    5e62:	e55e      	b.n	5922 <event_connection_prepare+0x142>
    5e64:	200003d4 	.word	0x200003d4

00005e68 <event_slave_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    5e68:	f7ff bcba 	b.w	57e0 <event_connection_prepare>

00005e6c <event_master_prepare>:
    5e6c:	f7ff bcb8 	b.w	57e0 <event_connection_prepare>

00005e70 <prepare_pdu_data_tx>:
{
    5e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    5e72:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    5e76:	061a      	lsls	r2, r3, #24
{
    5e78:	4604      	mov	r4, r0
    5e7a:	460f      	mov	r7, r1
	if (/* empty packet */
    5e7c:	d408      	bmi.n	5e90 <prepare_pdu_data_tx+0x20>
	    !conn->pkt_tx_head ||
    5e7e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    5e82:	b12d      	cbz	r5, 5e90 <prepare_pdu_data_tx+0x20>
	    !conn->pkt_tx_head ||
    5e84:	071b      	lsls	r3, r3, #28
    5e86:	f8d0 c0f0 	ldr.w	ip, [r0, #240]	; 0xf0
    5e8a:	d522      	bpl.n	5ed2 <prepare_pdu_data_tx+0x62>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    5e8c:	4565      	cmp	r5, ip
    5e8e:	d020      	beq.n	5ed2 <prepare_pdu_data_tx+0x62>
	conn->empty = 1;
    5e90:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    5e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5e98:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    5e9c:	f002 fde4 	bl	8a68 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5ea0:	7803      	ldrb	r3, [r0, #0]
    5ea2:	2201      	movs	r2, #1
    5ea4:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    5ea8:	2200      	movs	r2, #0
    5eaa:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    5eac:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5eb0:	7003      	strb	r3, [r0, #0]
    5eb2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    5eb4:	b152      	cbz	r2, 5ecc <prepare_pdu_data_tx+0x5c>
		pdu_data_tx->md = 1;
    5eb6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    5eba:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    5ebc:	7803      	ldrb	r3, [r0, #0]
    5ebe:	f36f 1347 	bfc	r3, #5, #3
    5ec2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    5ec4:	2300      	movs	r3, #0
    5ec6:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    5ec8:	6038      	str	r0, [r7, #0]
}
    5eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    5ecc:	f362 1304 	bfi	r3, r2, #4, #1
    5ed0:	e7f3      	b.n	5eba <prepare_pdu_data_tx+0x4a>
					conn->packet_tx_head_offset);
    5ed2:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    5ed6:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    5eda:	1d2a      	adds	r2, r5, #4
    5edc:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    5ede:	b911      	cbnz	r1, 5ee6 <prepare_pdu_data_tx+0x76>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    5ee0:	7841      	ldrb	r1, [r0, #1]
    5ee2:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    5ee6:	b123      	cbz	r3, 5ef2 <prepare_pdu_data_tx+0x82>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5ee8:	5cd1      	ldrb	r1, [r2, r3]
    5eea:	2601      	movs	r6, #1
    5eec:	f366 0101 	bfi	r1, r6, #0, #2
    5ef0:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    5ef2:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    5ef6:	1af6      	subs	r6, r6, r3
    5ef8:	b2f6      	uxtb	r6, r6
    5efa:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    5efc:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    5efe:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    5f00:	f36f 1104 	bfc	r1, #4, #1
    5f04:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    5f06:	d905      	bls.n	5f14 <prepare_pdu_data_tx+0xa4>
			_pdu_data_tx->len = max_tx_octets;
    5f08:	211b      	movs	r1, #27
    5f0a:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    5f0c:	5cd1      	ldrb	r1, [r2, r3]
    5f0e:	f041 0110 	orr.w	r1, r1, #16
    5f12:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    5f14:	6829      	ldr	r1, [r5, #0]
    5f16:	b119      	cbz	r1, 5f20 <prepare_pdu_data_tx+0xb0>
			_pdu_data_tx->md = 1;
    5f18:	5cd1      	ldrb	r1, [r2, r3]
    5f1a:	f041 0110 	orr.w	r1, r1, #16
    5f1e:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    5f20:	f1bc 0f00 	cmp.w	ip, #0
    5f24:	d1ca      	bne.n	5ebc <prepare_pdu_data_tx+0x4c>
    5f26:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5f2a:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    5f2c:	bf18      	it	ne
    5f2e:	e9c4 553c 	strdne	r5, r5, [r4, #240]	; 0xf0
    5f32:	e7c3      	b.n	5ebc <prepare_pdu_data_tx+0x4c>
    5f34:	0000      	movs	r0, r0
	...

00005f38 <isr>:
{
    5f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f3c:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    5f3e:	f002 fd69 	bl	8a14 <radio_is_done>
    5f42:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    5f44:	b33e      	cbz	r6, 5f96 <isr+0x5e>
		crc_ok = radio_crc_is_valid();
    5f46:	f002 fd85 	bl	8a54 <radio_crc_is_valid>
    5f4a:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    5f4e:	f002 fe05 	bl	8b5c <radio_filter_has_match>
    5f52:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    5f54:	f002 fe0c 	bl	8b70 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    5f58:	f002 ffb4 	bl	8ec4 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    5f5c:	f002 ffa0 	bl	8ea0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    5f60:	f002 fdc6 	bl	8af0 <radio_rssi_is_ready>
    5f64:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    5f66:	f002 fd3f 	bl	89e8 <radio_status_reset>
	radio_tmr_status_reset();
    5f6a:	f002 fe07 	bl	8b7c <radio_tmr_status_reset>
	radio_filter_status_reset();
    5f6e:	f002 fded 	bl	8b4c <radio_filter_status_reset>
	radio_ar_status_reset();
    5f72:	f002 ff9b 	bl	8eac <radio_ar_status_reset>
	radio_rssi_status_reset();
    5f76:	f002 fdb3 	bl	8ae0 <radio_rssi_status_reset>
	switch (_radio.state) {
    5f7a:	486e      	ldr	r0, [pc, #440]	; (6134 <isr+0x1fc>)
    5f7c:	7d03      	ldrb	r3, [r0, #20]
    5f7e:	4683      	mov	fp, r0
    5f80:	2b05      	cmp	r3, #5
    5f82:	f201 8254 	bhi.w	742e <isr+0x14f6>
    5f86:	e8df f013 	tbh	[pc, r3, lsl #1]
    5f8a:	005f      	.short	0x005f
    5f8c:	000a0087 	.word	0x000a0087
    5f90:	08b108b1 	.word	0x08b108b1
    5f94:	08b1      	.short	0x08b1
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    5f96:	4635      	mov	r5, r6
    5f98:	4634      	mov	r4, r6
    5f9a:	46b0      	mov	r8, r6
    5f9c:	e7e3      	b.n	5f66 <isr+0x2e>
	_radio.state = STATE_RX;
    5f9e:	2301      	movs	r3, #1
    5fa0:	7503      	strb	r3, [r0, #20]
	hcto = radio_tmr_tifs_base_get()
    5fa2:	f002 feed 	bl	8d80 <radio_tmr_tifs_base_get>
    5fa6:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    5fa8:	2096      	movs	r0, #150	; 0x96
    5faa:	f002 fdf5 	bl	8b98 <radio_tmr_tifs_set>
	switch (_radio.role) {
    5fae:	f89b 3013 	ldrb.w	r3, [fp, #19]
    5fb2:	3b01      	subs	r3, #1
    5fb4:	34c3      	adds	r4, #195	; 0xc3
    5fb6:	2b03      	cmp	r3, #3
    5fb8:	d811      	bhi.n	5fde <isr+0xa6>
    5fba:	e8df f003 	tbb	[pc, r3]
    5fbe:	2402      	.short	0x2402
    5fc0:	4848      	.short	0x4848
		radio_switch_complete_and_tx(0, 0, 0, 0);
    5fc2:	2300      	movs	r3, #0
    5fc4:	461a      	mov	r2, r3
    5fc6:	4619      	mov	r1, r3
    5fc8:	4618      	mov	r0, r3
    5fca:	f002 fd61 	bl	8a90 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    5fce:	f002 fd4f 	bl	8a70 <radio_pkt_scratch_get>
    5fd2:	f002 fcd1 	bl	8978 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    5fd6:	f002 fd13 	bl	8a00 <radio_is_ready>
    5fda:	4605      	mov	r5, r0
    5fdc:	b128      	cbz	r0, 5fea <isr+0xb2>
	LL_ASSERT(!retval);
    5fde:	4040      	eors	r0, r0
    5fe0:	f380 8811 	msr	BASEPRI, r0
    5fe4:	f04f 0004 	mov.w	r0, #4
    5fe8:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    5fea:	4601      	mov	r1, r0
    5fec:	f002 fcd9 	bl	89a2 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    5ff0:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    5ff2:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5ff4:	4628      	mov	r0, r5
    5ff6:	f002 fcd0 	bl	899a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    5ffa:	1a20      	subs	r0, r4, r0
    5ffc:	f002 fe56 	bl	8cac <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    6000:	f002 fea6 	bl	8d50 <radio_tmr_end_capture>
    6004:	e020      	b.n	6048 <isr+0x110>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6006:	2300      	movs	r3, #0
    6008:	4619      	mov	r1, r3
    600a:	461a      	mov	r2, r3
    600c:	4618      	mov	r0, r3
    600e:	f002 fd3f 	bl	8a90 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    6012:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    6016:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		radio_pkt_rx_set(_radio.packet_rx
    601a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    601e:	3008      	adds	r0, #8
    6020:	f002 fcaa 	bl	8978 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6024:	f002 fcec 	bl	8a00 <radio_is_ready>
    6028:	4605      	mov	r5, r0
    602a:	2800      	cmp	r0, #0
    602c:	d1d7      	bne.n	5fde <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    602e:	4601      	mov	r1, r0
    6030:	f002 fcb7 	bl	89a2 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6034:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6036:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6038:	4628      	mov	r0, r5
    603a:	f002 fcae 	bl	899a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    603e:	1a20      	subs	r0, r4, r0
    6040:	f002 fe34 	bl	8cac <radio_tmr_hcto_configure>
		radio_rssi_measure();
    6044:	f002 fd3c 	bl	8ac0 <radio_rssi_measure>
}
    6048:	b00f      	add	sp, #60	; 0x3c
    604a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    604e:	2300      	movs	r3, #0
    6050:	461a      	mov	r2, r3
    6052:	4619      	mov	r1, r3
    6054:	4618      	mov	r0, r3
    6056:	f002 fd1b 	bl	8a90 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    605a:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    605e:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
    6062:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6066:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    606a:	3108      	adds	r1, #8
    606c:	f7fe fc26 	bl	48bc <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    6070:	f002 fcc6 	bl	8a00 <radio_is_ready>
    6074:	4605      	mov	r5, r0
    6076:	2800      	cmp	r0, #0
    6078:	d1b1      	bne.n	5fde <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    607a:	4601      	mov	r1, r0
    607c:	f002 fc91 	bl	89a2 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6080:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6082:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6084:	4628      	mov	r0, r5
    6086:	f002 fc88 	bl	899a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    608a:	1a20      	subs	r0, r4, r0
    608c:	f002 fe0e 	bl	8cac <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    6090:	2001      	movs	r0, #1
    6092:	f7fe fc59 	bl	4948 <packet_tx_enqueue>
    6096:	e7d7      	b.n	6048 <isr+0x110>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6098:	b92e      	cbnz	r6, 60a6 <isr+0x16e>
		_radio.state = STATE_CLOSE;
    609a:	2303      	movs	r3, #3
    609c:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    60a0:	f002 fc90 	bl	89c4 <radio_disable>
    60a4:	e7d0      	b.n	6048 <isr+0x110>
	switch (_radio.role) {
    60a6:	7cc3      	ldrb	r3, [r0, #19]
    60a8:	3b01      	subs	r3, #1
    60aa:	2b03      	cmp	r3, #3
    60ac:	d897      	bhi.n	5fde <isr+0xa6>
    60ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    60b2:	0004      	.short	0x0004
    60b4:	0471020f 	.word	0x0471020f
    60b8:	0471      	.short	0x0471
		if (crc_ok) {
    60ba:	f1b8 0f00 	cmp.w	r8, #0
    60be:	d0ec      	beq.n	609a <isr+0x162>
	pdu_adv = (void *)radio_pkt_scratch_get();
    60c0:	f002 fcd6 	bl	8a70 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    60c4:	f89b 2078 	ldrb.w	r2, [fp, #120]	; 0x78
    60c8:	232a      	movs	r3, #42	; 0x2a
    60ca:	f04f 0927 	mov.w	r9, #39	; 0x27
    60ce:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    60d2:	7802      	ldrb	r2, [r0, #0]
    60d4:	f002 030f 	and.w	r3, r2, #15
    60d8:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    60da:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    60dc:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    60e0:	d12a      	bne.n	6138 <isr+0x200>
    60e2:	7843      	ldrb	r3, [r0, #1]
    60e4:	2b0c      	cmp	r3, #12
    60e6:	d127      	bne.n	6138 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    60e8:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    60ec:	0659      	lsls	r1, r3, #25
    60ee:	d500      	bpl.n	60f2 <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    60f0:	b314      	cbz	r4, 6138 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
    60f2:	f81b 3009 	ldrb.w	r3, [fp, r9]
    60f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    60fa:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    60fe:	d11b      	bne.n	6138 <isr+0x200>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    6100:	2206      	movs	r2, #6
    6102:	f107 0108 	add.w	r1, r7, #8
    6106:	1ca8      	adds	r0, r5, #2
    6108:	f7fa fa59 	bl	5be <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    610c:	b9a0      	cbnz	r0, 6138 <isr+0x200>
		_radio.state = STATE_CLOSE;
    610e:	2303      	movs	r3, #3
    6110:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    6114:	f002 fcc6 	bl	8aa4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    6118:	f89b 00c8 	ldrb.w	r0, [fp, #200]	; 0xc8
    611c:	2327      	movs	r3, #39	; 0x27
    611e:	fb03 b000 	mla	r0, r3, r0, fp
    6122:	307a      	adds	r0, #122	; 0x7a
    6124:	f002 fc2e 	bl	8984 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6128:	f002 fc6a 	bl	8a00 <radio_is_ready>
    612c:	2800      	cmp	r0, #0
    612e:	d08b      	beq.n	6048 <isr+0x110>
    6130:	e755      	b.n	5fde <isr+0xa6>
    6132:	bf00      	nop
    6134:	20000280 	.word	0x20000280
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    6138:	783b      	ldrb	r3, [r7, #0]
    613a:	f003 030f 	and.w	r3, r3, #15
    613e:	2b05      	cmp	r3, #5
    6140:	d1ab      	bne.n	609a <isr+0x162>
    6142:	787b      	ldrb	r3, [r7, #1]
    6144:	2b22      	cmp	r3, #34	; 0x22
    6146:	d1a8      	bne.n	609a <isr+0x162>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6148:	f81b 3009 	ldrb.w	r3, [fp, r9]
    614c:	f003 030f 	and.w	r3, r3, #15
    6150:	2b01      	cmp	r3, #1
    6152:	f040 8196 	bne.w	6482 <isr+0x54a>
		       isr_adv_ci_adva_check(adv, ci) &&
    6156:	4639      	mov	r1, r7
    6158:	4628      	mov	r0, r5
    615a:	f7fe fa87 	bl	466c <isr_adv_ci_adva_check>
    615e:	b188      	cbz	r0, 6184 <isr+0x24c>
	return (adv->rx_addr == ci->tx_addr) &&
    6160:	783b      	ldrb	r3, [r7, #0]
    6162:	f81b 2009 	ldrb.w	r2, [fp, r9]
    6166:	f3c3 1380 	ubfx	r3, r3, #6, #1
    616a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    616e:	f040 8186 	bne.w	647e <isr+0x546>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    6172:	2206      	movs	r2, #6
    6174:	1cb9      	adds	r1, r7, #2
    6176:	f105 0008 	add.w	r0, r5, #8
    617a:	f7fa fa20 	bl	5be <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    617e:	fab0 f080 	clz	r0, r0
    6182:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    6184:	2800      	cmp	r0, #0
    6186:	d088      	beq.n	609a <isr+0x162>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    6188:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    618c:	b133      	cbz	r3, 619c <isr+0x264>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    618e:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    6192:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    6196:	429a      	cmp	r2, r3
    6198:	f47f af7f 	bne.w	609a <isr+0x162>
    619c:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
    61a0:	2b00      	cmp	r3, #0
    61a2:	f43f af7a 	beq.w	609a <isr+0x162>
			node_rx = packet_rx_reserve_get(4);
    61a6:	2004      	movs	r0, #4
    61a8:	f7fe f826 	bl	41f8 <packet_rx_reserve_get>
		if (!node_rx) {
    61ac:	4605      	mov	r5, r0
    61ae:	2800      	cmp	r0, #0
    61b0:	f43f af73 	beq.w	609a <isr+0x162>
		_radio.state = STATE_STOP;
    61b4:	f04f 0a04 	mov.w	sl, #4
    61b8:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    61bc:	f002 fc02 	bl	89c4 <radio_disable>
		conn = _radio.advertiser.conn;
    61c0:	f8db 40cc 	ldr.w	r4, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61c4:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    61c8:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61cc:	f44f 7282 	mov.w	r2, #260	; 0x104
    61d0:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    61d2:	f8cb 80cc 	str.w	r8, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61d6:	f7fc fa5e 	bl	2696 <mem_index_get>
		memcpy(&conn->crc_init[0],
    61da:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    61dc:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    61de:	f107 0112 	add.w	r1, r7, #18
    61e2:	f104 0014 	add.w	r0, r4, #20
    61e6:	f7fa f9fa 	bl	5de <memcpy>
		memcpy(&conn->access_addr[0],
    61ea:	f104 0310 	add.w	r3, r4, #16
    61ee:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    61f0:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    61f4:	4652      	mov	r2, sl
    61f6:	f107 010e 	add.w	r1, r7, #14
    61fa:	930a      	str	r3, [sp, #40]	; 0x28
    61fc:	f7fa f9ef 	bl	5de <memcpy>
		memcpy(&conn->data_chan_map[0],
    6200:	2205      	movs	r2, #5
    6202:	f107 011e 	add.w	r1, r7, #30
    6206:	4630      	mov	r0, r6
    6208:	f7fa f9e9 	bl	5de <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    620c:	2105      	movs	r1, #5
    620e:	4630      	mov	r0, r6
    6210:	f7fc fba6 	bl	2960 <util_ones_count_get>
		conn->data_chan_count =
    6214:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    6218:	f360 0205 	bfi	r2, r0, #0, #6
    621c:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    621e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    6222:	f3c2 0204 	ubfx	r2, r2, #0, #5
    6226:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    6228:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    622a:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval;
    622c:	b291      	uxth	r1, r2
			pdu_adv->connect_ind.interval * 1250;
    622e:	f240 46e2 	movw	r6, #1250	; 0x4e2
    6232:	434e      	muls	r6, r1
		conn->latency = pdu_adv->connect_ind.latency;
    6234:	7eba      	ldrb	r2, [r7, #26]
    6236:	7ef9      	ldrb	r1, [r7, #27]
    6238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    623c:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    623e:	4619      	mov	r1, r3
    6240:	4652      	mov	r2, sl
    6242:	f104 0054 	add.w	r0, r4, #84	; 0x54
    6246:	f7fa f9ca 	bl	5de <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    624a:	8bbb      	ldrh	r3, [r7, #28]
    624c:	f242 7210 	movw	r2, #10000	; 0x2710
    6250:	fb02 6303 	mla	r3, r2, r3, r6
    6254:	3b01      	subs	r3, #1
    6256:	fbb3 f3f6 	udiv	r3, r3, r6
    625a:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    625c:	4b94      	ldr	r3, [pc, #592]	; (64b0 <isr+0x578>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    625e:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6260:	4433      	add	r3, r6
    6262:	fbb3 f3f6 	udiv	r3, r3, r6
    6266:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    6268:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    626a:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    626e:	f04f 0801 	mov.w	r8, #1
    6272:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    6276:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6278:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    627c:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    627e:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6282:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6284:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6286:	f105 000e 	add.w	r0, r5, #14
    628a:	f7fa f9a8 	bl	5de <memcpy>
			pdu_adv->connect_ind.interval;
    628e:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    6290:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    6292:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    6294:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    6296:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    6298:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    629a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    629e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    62a2:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    62a4:	8c20      	ldrh	r0, [r4, #32]
    62a6:	f7fe fa05 	bl	46b4 <rx_fc_lock>
		packet_rx_enqueue();
    62aa:	f7fe fdc5 	bl	4e38 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    62ae:	2003      	movs	r0, #3
    62b0:	f7fd ffa2 	bl	41f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    62b4:	2800      	cmp	r0, #0
    62b6:	f43f ae92 	beq.w	5fde <isr+0xa6>
			node_rx->hdr.handle = conn->handle;
    62ba:	8c23      	ldrh	r3, [r4, #32]
    62bc:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    62be:	230a      	movs	r3, #10
    62c0:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    62c2:	783b      	ldrb	r3, [r7, #0]
    62c4:	f013 0320 	ands.w	r3, r3, #32
    62c8:	f000 80e9 	beq.w	649e <isr+0x566>
					((u16_t)conn->access_addr[1] << 8) |
    62cc:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    62ce:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    62d0:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    62d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    62d6:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    62d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    62dc:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    62de:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    62e0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    62e4:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    62e6:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    62e8:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    62ec:	f7fe fda4 	bl	4e38 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    62f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    62f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    62f8:	496e      	ldr	r1, [pc, #440]	; (64b4 <isr+0x57c>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    62fa:	0952      	lsrs	r2, r2, #5
    62fc:	f362 0384 	bfi	r3, r2, #2, #3
    6300:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    6304:	f89b 3120 	ldrb.w	r3, [fp, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    6308:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    630c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6310:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    6312:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    6314:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    6318:	4a67      	ldr	r2, [pc, #412]	; (64b8 <isr+0x580>)
    631a:	f203 233f 	addw	r3, r3, #575	; 0x23f
    631e:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    6322:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    6324:	0873      	lsrs	r3, r6, #1
    6326:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    6328:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    632a:	7d7b      	ldrb	r3, [r7, #21]
    632c:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    6330:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    6334:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    6338:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    633a:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    633c:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6340:	4640      	mov	r0, r8
    6342:	f002 fb2c 	bl	899e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6346:	495d      	ldr	r1, [pc, #372]	; (64bc <isr+0x584>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6348:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    634a:	f200 4052 	addw	r0, r0, #1106	; 0x452
    634e:	a356      	add	r3, pc, #344	; (adr r3, 64a8 <isr+0x570>)
    6350:	e9d3 2300 	ldrd	r2, r3, [r3]
    6354:	fba0 0101 	umull	r0, r1, r0, r1
    6358:	f7f9 ff86 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    635c:	f8db 517c 	ldr.w	r5, [fp, #380]	; 0x17c
    6360:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    6362:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    6364:	429d      	cmp	r5, r3
    6366:	bf38      	it	cc
    6368:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    636a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    636e:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    6370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    6372:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    6374:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    6378:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    637a:	f002 fcfb 	bl	8d74 <radio_tmr_end_get>
    637e:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    6380:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6382:	4641      	mov	r1, r8
		conn_offset_us +=
    6384:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6388:	4640      	mov	r0, r8
    638a:	f002 fb06 	bl	899a <radio_tx_chain_delay_get>
    638e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6390:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    6394:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    6396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6398:	ebaa 0a00 	sub.w	sl, sl, r0
    639c:	ebaa 0303 	sub.w	r3, sl, r3
    63a0:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63a2:	f240 4385 	movw	r3, #1157	; 0x485
    63a6:	9300      	str	r3, [sp, #0]
    63a8:	2205      	movs	r2, #5
    63aa:	4b45      	ldr	r3, [pc, #276]	; (64c0 <isr+0x588>)
    63ac:	f8df a10c 	ldr.w	sl, [pc, #268]	; 64bc <isr+0x584>
    63b0:	4641      	mov	r1, r8
    63b2:	4640      	mov	r0, r8
    63b4:	f7fd f826 	bl	3404 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    63b8:	f240 4186 	movw	r1, #1158	; 0x486
    63bc:	f7fe f9a0 	bl	4700 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    63c0:	f81b 3009 	ldrb.w	r3, [fp, r9]
    63c4:	f003 030f 	and.w	r3, r3, #15
    63c8:	2b01      	cmp	r3, #1
    63ca:	d107      	bne.n	63dc <isr+0x4a4>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63cc:	f8cd 8000 	str.w	r8, [sp]
    63d0:	4643      	mov	r3, r8
    63d2:	2203      	movs	r2, #3
    63d4:	4641      	mov	r1, r8
    63d6:	4640      	mov	r0, r8
    63d8:	f7fd f814 	bl	3404 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    63dc:	fba6 670a 	umull	r6, r7, r6, sl
    63e0:	a331      	add	r3, pc, #196	; (adr r3, 64a8 <isr+0x570>)
    63e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    63e6:	4630      	mov	r0, r6
    63e8:	4639      	mov	r1, r7
    63ea:	f7f9 ff3d 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    63ee:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    63f2:	4a34      	ldr	r2, [pc, #208]	; (64c4 <isr+0x58c>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    63f4:	eba3 0b05 	sub.w	fp, r3, r5
    63f8:	f894 3020 	ldrb.w	r3, [r4, #32]
    63fc:	3307      	adds	r3, #7
    63fe:	b2db      	uxtb	r3, r3
    6400:	930b      	str	r3, [sp, #44]	; 0x2c
    6402:	f240 439d 	movw	r3, #1181	; 0x49d
    6406:	9308      	str	r3, [sp, #32]
    6408:	4b2f      	ldr	r3, [pc, #188]	; (64c8 <isr+0x590>)
    640a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    640e:	4b2f      	ldr	r3, [pc, #188]	; (64cc <isr+0x594>)
    6410:	9305      	str	r3, [sp, #20]
    6412:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6414:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6416:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6418:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    641c:	2307      	movs	r3, #7
    641e:	2100      	movs	r1, #0
    6420:	4343      	muls	r3, r0
    6422:	fb02 3301 	mla	r3, r2, r1, r3
    6426:	fba0 1202 	umull	r1, r2, r0, r2
    642a:	441a      	add	r2, r3
    642c:	4608      	mov	r0, r1
    642e:	1a30      	subs	r0, r6, r0
    6430:	4611      	mov	r1, r2
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6432:	f04f 0400 	mov.w	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    643a:	f04f 0300 	mov.w	r3, #0
    643e:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6442:	9504      	str	r5, [sp, #16]
    6444:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6446:	f7f9 ff0f 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    644a:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    644c:	9002      	str	r0, [sp, #8]
    644e:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    6452:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    6454:	fba1 010a 	umull	r0, r1, r1, sl
    6458:	a313      	add	r3, pc, #76	; (adr r3, 64a8 <isr+0x570>)
    645a:	e9d3 2300 	ldrd	r2, r3, [r3]
    645e:	f7f9 ff03 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6464:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6468:	9000      	str	r0, [sp, #0]
    646a:	465b      	mov	r3, fp
    646c:	4621      	mov	r1, r4
		ticker_status =
    646e:	4608      	mov	r0, r1
    6470:	f7fc ff34 	bl	32dc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6474:	f030 0302 	bics.w	r3, r0, #2
    6478:	f47f adb1 	bne.w	5fde <isr+0xa6>
    647c:	e5e4      	b.n	6048 <isr+0x110>
	return (adv->rx_addr == ci->tx_addr) &&
    647e:	2000      	movs	r0, #0
    6480:	e680      	b.n	6184 <isr+0x24c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    6482:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    6486:	09db      	lsrs	r3, r3, #7
    6488:	d000      	beq.n	648c <isr+0x554>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    648a:	b134      	cbz	r4, 649a <isr+0x562>
	       isr_adv_ci_adva_check(adv, ci);
    648c:	4639      	mov	r1, r7
    648e:	4628      	mov	r0, r5
    6490:	f7fe f8ec 	bl	466c <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    6494:	f000 0001 	and.w	r0, r0, #1
    6498:	e674      	b.n	6184 <isr+0x24c>
    649a:	4620      	mov	r0, r4
    649c:	e7fa      	b.n	6494 <isr+0x55c>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    649e:	72c3      	strb	r3, [r0, #11]
    64a0:	e724      	b.n	62ec <isr+0x3b4>
    64a2:	bf00      	nop
    64a4:	f3af 8000 	nop.w
    64a8:	1afd498d 	.word	0x1afd498d
    64ac:	00000007 	.word	0x00000007
    64b0:	026259ff 	.word	0x026259ff
    64b4:	0000a9a0 	.word	0x0000a9a0
    64b8:	000f4240 	.word	0x000f4240
    64bc:	3b9aca00 	.word	0x3b9aca00
    64c0:	00004701 	.word	0x00004701
    64c4:	1afd498d 	.word	0x1afd498d
    64c8:	000046f5 	.word	0x000046f5
    64cc:	00005e69 	.word	0x00005e69
		if (crc_ok &&
    64d0:	f1b8 0f00 	cmp.w	r8, #0
    64d4:	f000 821a 	beq.w	690c <isr+0x9d4>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    64d8:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
    64dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
    64e0:	b113      	cbz	r3, 64e8 <isr+0x5b0>
		if (crc_ok &&
    64e2:	2c00      	cmp	r4, #0
    64e4:	f000 8212 	beq.w	690c <isr+0x9d4>
	bool dir_report = false;
    64e8:	2200      	movs	r2, #0
    64ea:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    64ee:	f89b 1139 	ldrb.w	r1, [fp, #313]	; 0x139
    64f2:	f8db 2134 	ldr.w	r2, [fp, #308]	; 0x134
    64f6:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    64fa:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    64fe:	f107 0408 	add.w	r4, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    6502:	b1da      	cbz	r2, 653c <isr+0x604>
    6504:	f89b 217a 	ldrb.w	r2, [fp, #378]	; 0x17a
    6508:	b12a      	cbz	r2, 6516 <isr+0x5de>
				      (_radio.fc_req == _radio.fc_ack)) &&
    650a:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    650e:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    6512:	4291      	cmp	r1, r2
    6514:	d112      	bne.n	653c <isr+0x604>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    6516:	2b00      	cmp	r3, #0
    6518:	d15f      	bne.n	65da <isr+0x6a2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    651a:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    651e:	7a3b      	ldrb	r3, [r7, #8]
    6520:	f3c2 1280 	ubfx	r2, r2, #6, #1
    6524:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6528:	429a      	cmp	r2, r3
    652a:	d107      	bne.n	653c <isr+0x604>
		(memcmp(&_radio.scanner.adv_addr[0],
    652c:	2206      	movs	r2, #6
    652e:	f107 010a 	add.w	r1, r7, #10
    6532:	48df      	ldr	r0, [pc, #892]	; (68b0 <isr+0x978>)
    6534:	f7fa f843 	bl	5be <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    6538:	2800      	cmp	r0, #0
    653a:	d04e      	beq.n	65da <isr+0x6a2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    653c:	7a3b      	ldrb	r3, [r7, #8]
    653e:	f013 030f 	ands.w	r3, r3, #15
    6542:	d002      	beq.n	654a <isr+0x612>
    6544:	2b06      	cmp	r3, #6
    6546:	f040 81ee 	bne.w	6926 <isr+0x9ee>
		 (_radio.scanner.type != 0) &&
    654a:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    654e:	0712      	lsls	r2, r2, #28
    6550:	f140 81d8 	bpl.w	6904 <isr+0x9cc>
		 (_radio.scanner.type != 0) &&
    6554:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
    6558:	2a00      	cmp	r2, #0
    655a:	f040 81d3 	bne.w	6904 <isr+0x9cc>
		err = isr_rx_scan_report(rssi_ready,
    655e:	4628      	mov	r0, r5
    6560:	f7fe fce0 	bl	4f24 <isr_rx_scan_report.isra.38>
		if (err) {
    6564:	4605      	mov	r5, r0
    6566:	2800      	cmp	r0, #0
    6568:	f040 81d0 	bne.w	690c <isr+0x9d4>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    656c:	f002 fa80 	bl	8a70 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    6570:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6572:	49d0      	ldr	r1, [pc, #832]	; (68b4 <isr+0x97c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    6574:	2203      	movs	r2, #3
    6576:	f362 0303 	bfi	r3, r2, #0, #4
    657a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    657c:	7a3a      	ldrb	r2, [r7, #8]
    657e:	b2db      	uxtb	r3, r3
    6580:	f3c2 1280 	ubfx	r2, r2, #6, #1
    6584:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    6588:	220c      	movs	r2, #12
    658a:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    658c:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    6590:	09d2      	lsrs	r2, r2, #7
    6592:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6596:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6598:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    659a:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    659e:	f7fa f81e 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    65a2:	2206      	movs	r2, #6
    65a4:	f107 010a 	add.w	r1, r7, #10
    65a8:	f104 0008 	add.w	r0, r4, #8
    65ac:	f7fa f817 	bl	5de <memcpy>
		_radio.scanner.state = 1;
    65b0:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    65b4:	f043 0302 	orr.w	r3, r3, #2
    65b8:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    65bc:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    65be:	2302      	movs	r3, #2
    65c0:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    65c4:	f002 fae8 	bl	8b98 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    65c8:	4628      	mov	r0, r5
    65ca:	f002 fa55 	bl	8a78 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    65ce:	4620      	mov	r0, r4
    65d0:	f002 f9d8 	bl	8984 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    65d4:	f002 fbbc 	bl	8d50 <radio_tmr_end_capture>
    65d8:	e5a6      	b.n	6128 <isr+0x1f0>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    65da:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    65dc:	f013 030f 	ands.w	r3, r3, #15
    65e0:	f040 8174 	bne.w	68cc <isr+0x994>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    65e4:	f002 fbc6 	bl	8d74 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    65e8:	f8db 30dc 	ldr.w	r3, [fp, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    65ec:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    65f0:	48b1      	ldr	r0, [pc, #708]	; (68b8 <isr+0x980>)
    65f2:	2207      	movs	r2, #7
    65f4:	fba3 0100 	umull	r0, r1, r3, r0
    65f8:	fb02 1103 	mla	r1, r2, r3, r1
    65fc:	a3a8      	add	r3, pc, #672	; (adr r3, 68a0 <isr+0x968>)
    65fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    6602:	f7f9 fe31 	bl	268 <__aeabi_uldivmod>
    6606:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    660a:	4286      	cmp	r6, r0
    660c:	d296      	bcs.n	653c <isr+0x604>
			node_rx = packet_rx_reserve_get(4);
    660e:	2004      	movs	r0, #4
    6610:	f7fd fdf2 	bl	41f8 <packet_rx_reserve_get>
		if (node_rx == 0) {
    6614:	4682      	mov	sl, r0
    6616:	2800      	cmp	r0, #0
    6618:	f000 8178 	beq.w	690c <isr+0x9d4>
		_radio.state = STATE_STOP;
    661c:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    661e:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    6620:	f8db 4100 	ldr.w	r4, [fp, #256]	; 0x100
		_radio.state = STATE_STOP;
    6624:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    6628:	f8cb 3100 	str.w	r3, [fp, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    662c:	f002 fa20 	bl	8a70 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    6630:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    6632:	49a0      	ldr	r1, [pc, #640]	; (68b4 <isr+0x97c>)
			pdu_adv_tx->chan_sel = 1;
    6634:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    6638:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    663c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    663e:	7a3a      	ldrb	r2, [r7, #8]
    6640:	b2db      	uxtb	r3, r3
    6642:	f3c2 1280 	ubfx	r2, r2, #6, #1
    6646:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    664a:	2222      	movs	r2, #34	; 0x22
    664c:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    664e:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    6652:	09d2      	lsrs	r2, r2, #7
    6654:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6658:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    665a:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    665c:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    6660:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    6664:	f7f9 ffbb 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    6668:	2206      	movs	r2, #6
    666a:	f107 010a 	add.w	r1, r7, #10
    666e:	4648      	mov	r0, r9
    6670:	f7f9 ffb5 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    6674:	4632      	mov	r2, r6
    6676:	f104 0110 	add.w	r1, r4, #16
    667a:	f105 000e 	add.w	r0, r5, #14
    667e:	f7f9 ffae 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    6682:	2203      	movs	r2, #3
    6684:	f104 0114 	add.w	r1, r4, #20
    6688:	f105 0012 	add.w	r0, r5, #18
    668c:	f7f9 ffa7 	bl	5de <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    6690:	2301      	movs	r3, #1
    6692:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    6694:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
		conn_interval_us =
    6698:	f240 46e2 	movw	r6, #1250	; 0x4e2
    669c:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    669e:	f002 fb69 	bl	8d74 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    66a2:	f8db 200c 	ldr.w	r2, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    66a6:	f8db 8104 	ldr.w	r8, [fp, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    66aa:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    66ac:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    66b0:	bfd8      	it	le
    66b2:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    66b6:	f1b8 0f00 	cmp.w	r8, #0
    66ba:	f040 8113 	bne.w	68e4 <isr+0x9ac>
			pdu_adv_tx->connect_ind.win_offset = 0;
    66be:	f885 8016 	strb.w	r8, [r5, #22]
    66c2:	f885 8017 	strb.w	r8, [r5, #23]
    66c6:	4698      	mov	r8, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    66c8:	2100      	movs	r1, #0
    66ca:	4608      	mov	r0, r1
    66cc:	f002 f960 	bl	8990 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    66d0:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    66d2:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    66d6:	4608      	mov	r0, r1
    66d8:	f002 f95f 	bl	899a <radio_tx_chain_delay_get>
    66dc:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    66e0:	f100 031e 	add.w	r3, r0, #30
    66e4:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    66e6:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    66ea:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    66ec:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    66f0:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    66f2:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    66f6:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    66f8:	f104 0117 	add.w	r1, r4, #23
    66fc:	2205      	movs	r2, #5
    66fe:	f105 001e 	add.w	r0, r5, #30
    6702:	f7f9 ff6c 	bl	5de <memcpy>
		pdu_adv_tx->connect_ind.hop =
    6706:	7fa2      	ldrb	r2, [r4, #30]
    6708:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    670c:	f362 0304 	bfi	r3, r2, #0, #5
    6710:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    6714:	f89b 2120 	ldrb.w	r2, [fp, #288]	; 0x120
    6718:	f362 1347 	bfi	r3, r2, #5, #3
    671c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    6720:	f002 f9c0 	bl	8aa4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    6724:	4628      	mov	r0, r5
    6726:	f002 f92d 	bl	8984 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    672a:	f002 f969 	bl	8a00 <radio_is_ready>
    672e:	4680      	mov	r8, r0
    6730:	2800      	cmp	r0, #0
    6732:	f47f ac54 	bne.w	5fde <isr+0xa6>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6736:	f44f 7282 	mov.w	r2, #260	; 0x104
    673a:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
    673e:	4620      	mov	r0, r4
    6740:	f7fb ffa9 	bl	2696 <mem_index_get>
    6744:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    6746:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    674a:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    674e:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    6750:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6754:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    6756:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    675a:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    675e:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    6760:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6764:	f10a 000e 	add.w	r0, sl, #14
    6768:	f7f9 ff39 	bl	5de <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    676c:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    6770:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    6774:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    6778:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    677c:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    6780:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    6784:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    6788:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    678c:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    6790:	8c20      	ldrh	r0, [r4, #32]
    6792:	f7fd ff8f 	bl	46b4 <rx_fc_lock>
		packet_rx_enqueue();
    6796:	f7fe fb4f 	bl	4e38 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    679a:	2003      	movs	r0, #3
    679c:	f7fd fd2c 	bl	41f8 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    67a0:	2800      	cmp	r0, #0
    67a2:	f43f ac1c 	beq.w	5fde <isr+0xa6>
			node_rx->hdr.handle = conn->handle;
    67a6:	8c23      	ldrh	r3, [r4, #32]
    67a8:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    67aa:	230a      	movs	r3, #10
    67ac:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    67ae:	7a3b      	ldrb	r3, [r7, #8]
    67b0:	f013 0320 	ands.w	r3, r3, #32
    67b4:	d00e      	beq.n	67d4 <isr+0x89c>
					((u16_t)conn->access_addr[1] << 8) |
    67b6:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    67b8:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    67ba:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    67bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    67c0:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    67c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    67c6:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    67c8:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    67ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    67ce:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    67d0:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    67d2:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    67d4:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    67d6:	f7fe fb2f 	bl	4e38 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    67da:	f8db 317c 	ldr.w	r3, [fp, #380]	; 0x17c
    67de:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    67e0:	2b27      	cmp	r3, #39	; 0x27
    67e2:	bf38      	it	cc
    67e4:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    67e6:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    67e8:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    67ea:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    67ec:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    67ee:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
    67f2:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67f4:	f240 633c 	movw	r3, #1596	; 0x63c
    67f8:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    67fa:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67fc:	4629      	mov	r1, r5
    67fe:	9300      	str	r3, [sp, #0]
    6800:	4628      	mov	r0, r5
    6802:	4b2e      	ldr	r3, [pc, #184]	; (68bc <isr+0x984>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6804:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 68c8 <isr+0x990>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6808:	f7fc fdfc 	bl	3404 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    680c:	f240 613d 	movw	r1, #1597	; 0x63d
    6810:	f7fd ff8e 	bl	4730 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6814:	462b      	mov	r3, r5
    6816:	2204      	movs	r2, #4
    6818:	4629      	mov	r1, r5
    681a:	9500      	str	r5, [sp, #0]
    681c:	4628      	mov	r0, r5
    681e:	f7fc fdf1 	bl	3404 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6822:	f8db 3008 	ldr.w	r3, [fp, #8]
    6826:	f894 9020 	ldrb.w	r9, [r4, #32]
    682a:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    682e:	f240 6354 	movw	r3, #1620	; 0x654
    6832:	9308      	str	r3, [sp, #32]
    6834:	4b22      	ldr	r3, [pc, #136]	; (68c0 <isr+0x988>)
    6836:	e9cd 4306 	strd	r4, r3, [sp, #24]
    683a:	4b22      	ldr	r3, [pc, #136]	; (68c4 <isr+0x98c>)
    683c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    683e:	68e3      	ldr	r3, [r4, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6840:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6844:	4443      	add	r3, r8
		ticker_status =
    6846:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    684a:	4630      	mov	r0, r6
    684c:	a316      	add	r3, pc, #88	; (adr r3, 68a8 <isr+0x970>)
    684e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6852:	4639      	mov	r1, r7
    6854:	f7f9 fd08 	bl	268 <__aeabi_uldivmod>
    6858:	4610      	mov	r0, r2
    685a:	4619      	mov	r1, r3
    685c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6860:	2300      	movs	r3, #0
    6862:	f7f9 fd01 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6866:	a310      	add	r3, pc, #64	; (adr r3, 68a8 <isr+0x970>)
    6868:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    686c:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    686e:	4639      	mov	r1, r7
    6870:	4630      	mov	r0, r6
    6872:	f7f9 fcf9 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    6876:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6878:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    687a:	a30b      	add	r3, pc, #44	; (adr r3, 68a8 <isr+0x970>)
    687c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6880:	fba1 010a 	umull	r0, r1, r1, sl
    6884:	f7f9 fcf0 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6888:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
    688c:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6890:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    6894:	9000      	str	r0, [sp, #0]
    6896:	465b      	mov	r3, fp
    6898:	464a      	mov	r2, r9
    689a:	4629      	mov	r1, r5
    689c:	e5e7      	b.n	646e <isr+0x536>
    689e:	bf00      	nop
    68a0:	3b9aca00 	.word	0x3b9aca00
    68a4:	00000000 	.word	0x00000000
    68a8:	1afd498d 	.word	0x1afd498d
    68ac:	00000007 	.word	0x00000007
    68b0:	20000368 	.word	0x20000368
    68b4:	20000362 	.word	0x20000362
    68b8:	1afd498d 	.word	0x1afd498d
    68bc:	00004731 	.word	0x00004731
    68c0:	000046f5 	.word	0x000046f5
    68c4:	00005e6d 	.word	0x00005e6d
    68c8:	3b9aca00 	.word	0x3b9aca00
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    68cc:	2b01      	cmp	r3, #1
    68ce:	f47f ae35 	bne.w	653c <isr+0x604>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    68d2:	2100      	movs	r1, #0
    68d4:	4620      	mov	r0, r4
    68d6:	f7fe fa7f 	bl	4dd8 <isr_scan_tgta_check.isra.31>
				      (_radio.fc_req == _radio.fc_ack)) &&
    68da:	2800      	cmp	r0, #0
    68dc:	f47f ae82 	bne.w	65e4 <isr+0x6ac>
    68e0:	e62c      	b.n	653c <isr+0x604>
				conn_space_us += conn_interval_us;
    68e2:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    68e4:	f1b8 0f00 	cmp.w	r8, #0
    68e8:	dbfb      	blt.n	68e2 <isr+0x9aa>
    68ea:	4598      	cmp	r8, r3
    68ec:	d3f9      	bcc.n	68e2 <isr+0x9aa>
				(conn_space_us - conn_offset_us) / 1250;
    68ee:	eba8 0303 	sub.w	r3, r8, r3
			pdu_adv_tx->connect_ind.win_offset =
    68f2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    68f6:	fbb3 f3f2 	udiv	r3, r3, r2
    68fa:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    68fc:	7d6b      	ldrb	r3, [r5, #21]
    68fe:	3301      	adds	r3, #1
    6900:	756b      	strb	r3, [r5, #21]
    6902:	e6e1      	b.n	66c8 <isr+0x790>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6904:	b97b      	cbnz	r3, 6926 <isr+0x9ee>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    6906:	7a7b      	ldrb	r3, [r7, #9]
    6908:	2b00      	cmp	r3, #0
    690a:	d13b      	bne.n	6984 <isr+0xa4c>
			_radio.state = STATE_CLOSE;
    690c:	2303      	movs	r3, #3
    690e:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    6912:	f002 f857 	bl	89c4 <radio_disable>
			_radio.scanner.state = 0;
    6916:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    691a:	f36f 0341 	bfc	r3, #1, #1
    691e:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
    6922:	f7ff bb91 	b.w	6048 <isr+0x110>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6926:	2b01      	cmp	r3, #1
    6928:	d00d      	beq.n	6946 <isr+0xa0e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    692a:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    692c:	f003 020b 	and.w	r2, r3, #11
    6930:	2a02      	cmp	r2, #2
    6932:	d0e8      	beq.n	6906 <isr+0x9ce>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    6934:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    6938:	2b07      	cmp	r3, #7
    693a:	d10b      	bne.n	6954 <isr+0xa1c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    693c:	f89b 30e1 	ldrb.w	r3, [fp, #225]	; 0xe1
    6940:	075b      	lsls	r3, r3, #29
    6942:	d1e0      	bne.n	6906 <isr+0x9ce>
    6944:	e7e2      	b.n	690c <isr+0x9d4>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    6946:	a90d      	add	r1, sp, #52	; 0x34
    6948:	4620      	mov	r0, r4
    694a:	f7fe fa45 	bl	4dd8 <isr_scan_tgta_check.isra.31>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    694e:	2800      	cmp	r0, #0
    6950:	d1d9      	bne.n	6906 <isr+0x9ce>
    6952:	e7ea      	b.n	692a <isr+0x9f2>
		   (_radio.scanner.phy)) ||
    6954:	2b04      	cmp	r3, #4
    6956:	d1d9      	bne.n	690c <isr+0x9d4>
		   (_radio.scanner.state != 0) &&
    6958:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    695c:	079e      	lsls	r6, r3, #30
    695e:	d5d5      	bpl.n	690c <isr+0x9d4>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    6960:	f002 f886 	bl	8a70 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    6964:	7a3b      	ldrb	r3, [r7, #8]
    6966:	7802      	ldrb	r2, [r0, #0]
    6968:	f3c3 1380 	ubfx	r3, r3, #6, #1
    696c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6970:	d1cc      	bne.n	690c <isr+0x9d4>
		(memcmp(&sreq->scan_req.adv_addr[0],
    6972:	2206      	movs	r2, #6
    6974:	f107 010a 	add.w	r1, r7, #10
    6978:	3008      	adds	r0, #8
    697a:	f7f9 fe20 	bl	5be <memcmp>
		   (_radio.scanner.state != 0) &&
    697e:	2800      	cmp	r0, #0
    6980:	d0c1      	beq.n	6906 <isr+0x9ce>
    6982:	e7c3      	b.n	690c <isr+0x9d4>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    6984:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    6988:	2b00      	cmp	r3, #0
    698a:	d1bf      	bne.n	690c <isr+0x9d4>
		err = isr_rx_scan_report(rssi_ready,
    698c:	4628      	mov	r0, r5
    698e:	f7fe fac9 	bl	4f24 <isr_rx_scan_report.isra.38>
    6992:	e7bb      	b.n	690c <isr+0x9d4>
	_radio.packet_counter++;
    6994:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6998:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
	_radio.packet_counter++;
    699c:	3301      	adds	r3, #1
    699e:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    69a2:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    69a6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    69aa:	2301      	movs	r3, #1
    69ac:	7133      	strb	r3, [r6, #4]
    69ae:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	if (crc_ok) {
    69b2:	f1b8 0f00 	cmp.w	r8, #0
    69b6:	f000 832c 	beq.w	7012 <isr+0x10da>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    69ba:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    69be:	7a30      	ldrb	r0, [r6, #8]
    69c0:	f002 0101 	and.w	r1, r2, #1
    69c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    69c8:	4288      	cmp	r0, r1
    69ca:	f000 80a8 	beq.w	6b1e <isr+0xbe6>
		_radio.conn_curr->sn++;
    69ce:	f081 0101 	eor.w	r1, r1, #1
    69d2:	f361 0200 	bfi	r2, r1, #0, #1
    69d6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    69da:	f89b 2013 	ldrb.w	r2, [fp, #19]
    69de:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    69e0:	bf02      	ittt	eq
    69e2:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    69e6:	f042 0201 	orreq.w	r2, r2, #1
    69ea:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    69ee:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    69f2:	0614      	lsls	r4, r2, #24
    69f4:	f100 808f 	bmi.w	6b16 <isr+0xbde>
			node_tx = _radio.conn_curr->pkt_tx_head;
    69f8:	f8d3 70ec 	ldr.w	r7, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    69fc:	f893 c101 	ldrb.w	ip, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    6a00:	f107 0e04 	add.w	lr, r7, #4
    6a04:	eb0e 050c 	add.w	r5, lr, ip
			pdu_data_tx_len = pdu_data_tx->len;
    6a08:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    6a0a:	b90c      	cbnz	r4, 6a10 <isr+0xad8>
	u8_t terminate = 0;
    6a0c:	2500      	movs	r5, #0
    6a0e:	e028      	b.n	6a62 <isr+0xb2a>
				if (_radio.conn_curr->enc_tx) {
    6a10:	0690      	lsls	r0, r2, #26
    6a12:	d50b      	bpl.n	6a2c <isr+0xaf4>
					_radio.conn_curr->ccm_tx.counter++;
    6a14:	f8d3 90da 	ldr.w	r9, [r3, #218]	; 0xda
    6a18:	f8d3 a0de 	ldr.w	sl, [r3, #222]	; 0xde
    6a1c:	f119 0001 	adds.w	r0, r9, #1
    6a20:	f14a 0100 	adc.w	r1, sl, #0
    6a24:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    6a28:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    6a2c:	f81e 300c 	ldrb.w	r3, [lr, ip]
    6a30:	f003 0303 	and.w	r3, r3, #3
    6a34:	2b03      	cmp	r3, #3
    6a36:	d1e9      	bne.n	6a0c <isr+0xad4>
	switch (pdu_data_tx->llctrl.opcode) {
    6a38:	78ea      	ldrb	r2, [r5, #3]
    6a3a:	2a02      	cmp	r2, #2
    6a3c:	d1e6      	bne.n	6a0c <isr+0xad4>
		_radio.state = STATE_CLOSE;
    6a3e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    6a42:	f001 ffbf 	bl	89c4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    6a46:	f001 ffdb 	bl	8a00 <radio_is_ready>
    6a4a:	2800      	cmp	r0, #0
    6a4c:	f47f aac7 	bne.w	5fde <isr+0xa6>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    6a50:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    6a52:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6a56:	2913      	cmp	r1, #19
    6a58:	bf08      	it	eq
    6a5a:	2116      	moveq	r1, #22
    6a5c:	f7fe fa34 	bl	4ec8 <terminate_ind_rx_enqueue>
		terminate = 1;
    6a60:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6a62:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    6a66:	f892 3101 	ldrb.w	r3, [r2, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    6a6a:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6a6e:	4423      	add	r3, r4
    6a70:	b2db      	uxtb	r3, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    6a72:	4299      	cmp	r1, r3
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6a74:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    6a78:	d02a      	beq.n	6ad0 <isr+0xb98>
	return NULL;
    6a7a:	2700      	movs	r7, #0
	if (terminate) {
    6a7c:	2d00      	cmp	r5, #0
    6a7e:	d04f      	beq.n	6b20 <isr+0xbe8>
		connection_release(_radio.conn_curr);
    6a80:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6a84:	f7fd ffb0 	bl	49e8 <connection_release>
		_radio.conn_curr = NULL;
    6a88:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    6a8a:	f8cb 5114 	str.w	r5, [fp, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    6a8e:	f002 f953 	bl	8d38 <radio_tmr_aa_restore>
    6a92:	b918      	cbnz	r0, 6a9c <isr+0xb64>
		radio_tmr_aa_save(radio_tmr_aa_get());
    6a94:	f002 f944 	bl	8d20 <radio_tmr_aa_get>
    6a98:	f002 f948 	bl	8d2c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    6a9c:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	f43f aad1 	beq.w	6048 <isr+0x110>
	if (tx_release) {
    6aa6:	b11f      	cbz	r7, 6ab0 <isr+0xb78>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    6aa8:	4639      	mov	r1, r7
    6aaa:	8c18      	ldrh	r0, [r3, #32]
    6aac:	f7fd ff28 	bl	4900 <pdu_node_tx_release>
	if (rx_enqueue) {
    6ab0:	2d00      	cmp	r5, #0
    6ab2:	f43f aac9 	beq.w	6048 <isr+0x110>
		rx_fc_lock(_radio.conn_curr->handle);
    6ab6:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    6aba:	8c18      	ldrh	r0, [r3, #32]
    6abc:	f7fd fdfa 	bl	46b4 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    6ac0:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    6ac4:	8c1b      	ldrh	r3, [r3, #32]
    6ac6:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    6ac8:	f7fe f9b6 	bl	4e38 <packet_rx_enqueue>
    6acc:	f7ff babc 	b.w	6048 <isr+0x110>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6ad0:	e9d2 313b 	ldrd	r3, r1, [r2, #236]	; 0xec
	conn->packet_tx_head_len = 0;
    6ad4:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6ad6:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    6ad8:	f8a2 0100 	strh.w	r0, [r2, #256]	; 0x100
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    6adc:	d111      	bne.n	6b02 <isr+0xbca>
		if (node_tx) {
    6ade:	2f00      	cmp	r7, #0
    6ae0:	d0cb      	beq.n	6a7a <isr+0xb42>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6ae2:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    6ae6:	681c      	ldr	r4, [r3, #0]
    6ae8:	f8c2 40ec 	str.w	r4, [r2, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    6aec:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl_last = NULL;
    6aee:	bf0c      	ite	eq
    6af0:	e9c2 003c 	strdeq	r0, r0, [r2, #240]	; 0xf0
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    6af4:	f8c2 40f0 	strne.w	r4, [r2, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    6af8:	49c3      	ldr	r1, [pc, #780]	; (6e08 <isr+0xed0>)
    6afa:	4638      	mov	r0, r7
    6afc:	f7fb fdb3 	bl	2666 <mem_release>
    6b00:	e7bb      	b.n	6a7a <isr+0xb42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6b02:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
    6b06:	6818      	ldr	r0, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6b08:	f8c2 00ec 	str.w	r0, [r2, #236]	; 0xec
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6b0c:	428b      	cmp	r3, r1
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6b0e:	bf08      	it	eq
    6b10:	f8c2 00f8 	streq.w	r0, [r2, #248]	; 0xf8
    6b14:	e7b2      	b.n	6a7c <isr+0xb44>
			_radio.conn_curr->empty = 0;
    6b16:	f36f 12c7 	bfc	r2, #7, #1
    6b1a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	struct radio_pdu_node_tx *tx_release = NULL;
    6b1e:	2700      	movs	r7, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6b20:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    6b24:	7a32      	ldrb	r2, [r6, #8]
    6b26:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    6b2a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    6b2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    6b32:	429a      	cmp	r2, r3
    6b34:	f040 818f 	bne.w	6e56 <isr+0xf1e>
	    (packet_rx_reserve_get(3) != 0) &&
    6b38:	2003      	movs	r0, #3
    6b3a:	f7fd fb5d 	bl	41f8 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6b3e:	2800      	cmp	r0, #0
    6b40:	f000 8189 	beq.w	6e56 <isr+0xf1e>
	    (packet_rx_reserve_get(3) != 0) &&
    6b44:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    6b48:	b383      	cbz	r3, 6bac <isr+0xc74>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6b4a:	f8db 3144 	ldr.w	r3, [fp, #324]	; 0x144
    6b4e:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    6b52:	4293      	cmp	r3, r2
    6b54:	d105      	bne.n	6b62 <isr+0xc2a>
	      (_radio.fc_req == _radio.fc_ack)) ||
    6b56:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6b5a:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    6b5e:	4291      	cmp	r1, r2
    6b60:	d024      	beq.n	6bac <isr+0xc74>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6b62:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    6b66:	4293      	cmp	r3, r2
    6b68:	f000 8175 	beq.w	6e56 <isr+0xf1e>
	      (_radio.fc_req != _radio.fc_ack) &&
    6b6c:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6b70:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    6b74:	429a      	cmp	r2, r3
    6b76:	f000 816e 	beq.w	6e56 <isr+0xf1e>
		(((_radio.fc_req == 0) &&
    6b7a:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    6b7e:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    6b82:	b923      	cbnz	r3, 6b8e <isr+0xc56>
		(((_radio.fc_req == 0) &&
    6b84:	f8bb 1176 	ldrh.w	r1, [fp, #374]	; 0x176
    6b88:	8c13      	ldrh	r3, [r2, #32]
    6b8a:	4299      	cmp	r1, r3
    6b8c:	d00e      	beq.n	6bac <isr+0xc74>
		 ((_radio.fc_req != 0) &&
    6b8e:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    6b92:	2b00      	cmp	r3, #0
    6b94:	f000 815f 	beq.w	6e56 <isr+0xf1e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6b98:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    6b9c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    6ba0:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    6ba4:	8c13      	ldrh	r3, [r2, #32]
    6ba6:	4299      	cmp	r1, r3
    6ba8:	f040 8155 	bne.w	6e56 <isr+0xf1e>
		if (pdu_data_rx->len != 0) {
    6bac:	f896 9009 	ldrb.w	r9, [r6, #9]
    6bb0:	f1b9 0f00 	cmp.w	r9, #0
    6bb4:	f000 8131 	beq.w	6e1a <isr+0xee2>
			if (_radio.conn_curr->enc_rx) {
    6bb8:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    6bbc:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    6bc0:	f019 0910 	ands.w	r9, r9, #16
    6bc4:	d006      	beq.n	6bd4 <isr+0xc9c>
				done = radio_ccm_is_done();
    6bc6:	f002 f943 	bl	8e50 <radio_ccm_is_done>
				LL_ASSERT(done);
    6bca:	2800      	cmp	r0, #0
    6bcc:	f43f aa07 	beq.w	5fde <isr+0xa6>
				ccm_rx_increment = 1;
    6bd0:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    6bd4:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    6bd8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    6bdc:	06d9      	lsls	r1, r3, #27
    6bde:	d40f      	bmi.n	6c00 <isr+0xcc8>
			    (_radio.conn_curr->pause_rx &&
    6be0:	f8db 4114 	ldr.w	r4, [fp, #276]	; 0x114
    6be4:	7a33      	ldrb	r3, [r6, #8]
    6be6:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    6bea:	f012 0f04 	tst.w	r2, #4
    6bee:	d120      	bne.n	6c32 <isr+0xcfa>
			switch (pdu_data_rx->ll_id) {
    6bf0:	f013 0303 	ands.w	r3, r3, #3
    6bf4:	f000 8111 	beq.w	6e1a <isr+0xee2>
    6bf8:	2b02      	cmp	r3, #2
    6bfa:	d847      	bhi.n	6c8c <isr+0xd54>
				*rx_enqueue = 1;
    6bfc:	2501      	movs	r5, #1
    6bfe:	e0b3      	b.n	6d68 <isr+0xe30>
			     !radio_ccm_mic_is_valid()) ||
    6c00:	f002 f944 	bl	8e8c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    6c04:	2800      	cmp	r0, #0
    6c06:	d1eb      	bne.n	6be0 <isr+0xca8>
				_radio.state = STATE_CLOSE;
    6c08:	2303      	movs	r3, #3
    6c0a:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    6c0e:	f001 fed9 	bl	89c4 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    6c12:	f001 fef5 	bl	8a00 <radio_is_ready>
    6c16:	4605      	mov	r5, r0
    6c18:	2800      	cmp	r0, #0
    6c1a:	f47f a9e0 	bne.w	5fde <isr+0xa6>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    6c1e:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6c22:	213d      	movs	r1, #61	; 0x3d
    6c24:	f7fe f950 	bl	4ec8 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    6c28:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    6c2c:	f7fd fedc 	bl	49e8 <connection_release>
    6c30:	e72b      	b.n	6a8a <isr+0xb52>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    6c32:	f003 0103 	and.w	r1, r3, #3
    6c36:	2903      	cmp	r1, #3
    6c38:	d1e6      	bne.n	6c08 <isr+0xcd0>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6c3a:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    6c3e:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    6c40:	2800      	cmp	r0, #0
    6c42:	f002 0240 	and.w	r2, r2, #64	; 0x40
    6c46:	db15      	blt.n	6c74 <isr+0xd3c>
	       (!conn->role &&
    6c48:	b922      	cbnz	r2, 6c54 <isr+0xd1c>
		((!conn->refresh &&
    6c4a:	2902      	cmp	r1, #2
    6c4c:	d0d0      	beq.n	6bf0 <isr+0xcb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6c4e:	2911      	cmp	r1, #17
    6c50:	d8da      	bhi.n	6c08 <isr+0xcd0>
    6c52:	e009      	b.n	6c68 <isr+0xd30>
		 (conn->refresh &&
    6c54:	1e8a      	subs	r2, r1, #2
    6c56:	b2d2      	uxtb	r2, r2
    6c58:	2a09      	cmp	r2, #9
    6c5a:	d8f8      	bhi.n	6c4e <isr+0xd16>
    6c5c:	f240 2005 	movw	r0, #517	; 0x205
    6c60:	fa20 f202 	lsr.w	r2, r0, r2
    6c64:	07d2      	lsls	r2, r2, #31
    6c66:	d4c3      	bmi.n	6bf0 <isr+0xcb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6c68:	4a68      	ldr	r2, [pc, #416]	; (6e0c <isr+0xed4>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6c6a:	fa22 f101 	lsr.w	r1, r2, r1
    6c6e:	07cd      	lsls	r5, r1, #31
    6c70:	d5ca      	bpl.n	6c08 <isr+0xcd0>
    6c72:	e7bd      	b.n	6bf0 <isr+0xcb8>
	       (conn->role &&
    6c74:	b92a      	cbnz	r2, 6c82 <isr+0xd4a>
		((!conn->refresh &&
    6c76:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6c78:	d0ba      	beq.n	6bf0 <isr+0xcb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    6c7a:	2911      	cmp	r1, #17
    6c7c:	d8c4      	bhi.n	6c08 <isr+0xcd0>
    6c7e:	4a64      	ldr	r2, [pc, #400]	; (6e10 <isr+0xed8>)
    6c80:	e7f3      	b.n	6c6a <isr+0xd32>
		 (conn->refresh &&
    6c82:	1e8a      	subs	r2, r1, #2
    6c84:	2a01      	cmp	r2, #1
    6c86:	d9b3      	bls.n	6bf0 <isr+0xcb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    6c88:	290b      	cmp	r1, #11
    6c8a:	e7f5      	b.n	6c78 <isr+0xd40>
	switch (pdu_data_rx->llctrl.opcode) {
    6c8c:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    6c8e:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    6c92:	2d19      	cmp	r5, #25
    6c94:	f200 817a 	bhi.w	6f8c <isr+0x1054>
    6c98:	e8df f015 	tbh	[pc, r5, lsl #1]
    6c9c:	0084001a 	.word	0x0084001a
    6ca0:	017800c1 	.word	0x017800c1
    6ca4:	01780178 	.word	0x01780178
    6ca8:	018c0178 	.word	0x018c0178
    6cac:	00e700ca 	.word	0x00e700ca
    6cb0:	01780178 	.word	0x01780178
    6cb4:	0178010d 	.word	0x0178010d
    6cb8:	017800df 	.word	0x017800df
    6cbc:	01710178 	.word	0x01710178
    6cc0:	01780178 	.word	0x01780178
    6cc4:	01780178 	.word	0x01780178
    6cc8:	01780178 	.word	0x01780178
    6ccc:	01930178 	.word	0x01930178
		if (!_radio.conn_curr->role ||
    6cd0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	f280 8159 	bge.w	6f8c <isr+0x1054>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    6cda:	7a71      	ldrb	r1, [r6, #9]
    6cdc:	2000      	movs	r0, #0
    6cde:	f7fd fa43 	bl	4168 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    6ce2:	2800      	cmp	r0, #0
    6ce4:	f000 8152 	beq.w	6f8c <isr+0x1054>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6ce8:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    6cec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    6cee:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    6cf0:	0418      	lsls	r0, r3, #16
    6cf2:	f100 808f 	bmi.w	6e14 <isr+0xedc>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    6cf6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6cfa:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    6cfe:	429a      	cmp	r2, r3
    6d00:	f47f a96d 	bne.w	5fde <isr+0xa6>
	if (_radio.conn_upd == 0) {
    6d04:	f8db 2180 	ldr.w	r2, [fp, #384]	; 0x180
    6d08:	b90a      	cbnz	r2, 6d0e <isr+0xdd6>
		_radio.conn_upd = conn;
    6d0a:	f8cb 4180 	str.w	r4, [fp, #384]	; 0x180
	conn->llcp.conn_upd.win_size =
    6d0e:	7b32      	ldrb	r2, [r6, #12]
    6d10:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    6d14:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    6d18:	f240 42e2 	movw	r2, #1250	; 0x4e2
    6d1c:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    6d1e:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    6d20:	7c30      	ldrb	r0, [r6, #16]
    6d22:	7bf2      	ldrb	r2, [r6, #15]
    6d24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    6d28:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    6d2c:	7cb0      	ldrb	r0, [r6, #18]
    6d2e:	7c72      	ldrb	r2, [r6, #17]
    6d30:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    6d34:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    6d38:	7cf2      	ldrb	r2, [r6, #19]
    6d3a:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    6d3c:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    6d40:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    6d44:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6d48:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    6d4c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    6d50:	f36f 0282 	bfc	r2, #2, #1
    6d54:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    6d58:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    6d5a:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    6d5c:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    6d5e:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    6d62:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    6d66:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    6d68:	f8db 1114 	ldr.w	r1, [fp, #276]	; 0x114
    6d6c:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    6d70:	f083 0302 	eor.w	r3, r3, #2
    6d74:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    6d78:	f1b9 0f00 	cmp.w	r9, #0
    6d7c:	d00b      	beq.n	6d96 <isr+0xe5e>
				_radio.conn_curr->ccm_rx.counter++;
    6d7e:	f8d1 90b9 	ldr.w	r9, [r1, #185]	; 0xb9
    6d82:	f8d1 a0bd 	ldr.w	sl, [r1, #189]	; 0xbd
    6d86:	f119 0201 	adds.w	r2, r9, #1
    6d8a:	f14a 0300 	adc.w	r3, sl, #0
    6d8e:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    6d92:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
		_radio.conn_curr->supervision_expire = 0;
    6d96:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
		_radio.crc_expire = 0;
    6d9a:	2400      	movs	r4, #0
    6d9c:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0;
    6da0:	861c      	strh	r4, [r3, #48]	; 0x30
    6da2:	e14b      	b.n	703c <isr+0x1104>
		if (!_radio.conn_curr->role ||
    6da4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6da8:	2b00      	cmp	r3, #0
    6daa:	f280 80ef 	bge.w	6f8c <isr+0x1054>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    6dae:	7a71      	ldrb	r1, [r6, #9]
    6db0:	2001      	movs	r0, #1
    6db2:	f7fd f9d9 	bl	4168 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    6db6:	2800      	cmp	r0, #0
    6db8:	f000 80e8 	beq.w	6f8c <isr+0x1054>
	      conn->event_counter) & 0xffff) > 0x7fff) {
    6dbc:	8c62      	ldrh	r2, [r4, #34]	; 0x22
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    6dbe:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    6dc2:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    6dc4:	041a      	lsls	r2, r3, #16
    6dc6:	d425      	bmi.n	6e14 <isr+0xedc>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    6dc8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    6dcc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    6dd0:	429a      	cmp	r2, r3
    6dd2:	f47f a904 	bne.w	5fde <isr+0xa6>
	memcpy(&conn->llcp.chan_map.chm[0],
    6dd6:	2205      	movs	r2, #5
    6dd8:	f106 010c 	add.w	r1, r6, #12
    6ddc:	f104 0061 	add.w	r0, r4, #97	; 0x61
    6de0:	f7f9 fbfd 	bl	5de <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    6de4:	7c73      	ldrb	r3, [r6, #17]
    6de6:	7cb2      	ldrb	r2, [r6, #18]
    6de8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    6dec:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    6df0:	2302      	movs	r3, #2
    6df2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    6df6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    6dfa:	2500      	movs	r5, #0
	conn->llcp_ack--;
    6dfc:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    6dfe:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    6e02:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    6e06:	e7af      	b.n	6d68 <isr+0xe30>
    6e08:	200003d4 	.word	0x200003d4
    6e0c:	00022060 	.word	0x00022060
    6e10:	00022040 	.word	0x00022040
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    6e14:	2328      	movs	r3, #40	; 0x28
		_radio.conn_curr->llcp_terminate.reason_peer =
    6e16:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
	u8_t rx_enqueue = 0;
    6e1a:	2500      	movs	r5, #0
    6e1c:	e7a4      	b.n	6d68 <isr+0xe30>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    6e1e:	7a71      	ldrb	r1, [r6, #9]
    6e20:	2002      	movs	r0, #2
    6e22:	f7fd f9a1 	bl	4168 <pdu_len_cmp>
    6e26:	2800      	cmp	r0, #0
    6e28:	f000 80b0 	beq.w	6f8c <isr+0x1054>
		_radio.conn_curr->llcp_terminate.reason_peer =
    6e2c:	7b33      	ldrb	r3, [r6, #12]
    6e2e:	e7f2      	b.n	6e16 <isr+0xede>
		if (!_radio.conn_curr->role ||
    6e30:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6e34:	2b00      	cmp	r3, #0
    6e36:	f280 80a9 	bge.w	6f8c <isr+0x1054>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    6e3a:	7a71      	ldrb	r1, [r6, #9]
    6e3c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    6e3e:	f7fd f993 	bl	4168 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    6e42:	2800      	cmp	r0, #0
    6e44:	f000 80a2 	beq.w	6f8c <isr+0x1054>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    6e48:	4651      	mov	r1, sl
    6e4a:	4620      	mov	r0, r4
    6e4c:	f7fe fc82 	bl	5754 <feature_rsp_send>
    6e50:	4605      	mov	r5, r0
		if (!nack) {
    6e52:	2800      	cmp	r0, #0
    6e54:	d088      	beq.n	6d68 <isr+0xe30>
	u8_t rx_enqueue = 0;
    6e56:	2500      	movs	r5, #0
    6e58:	e79d      	b.n	6d96 <isr+0xe5e>
		if (_radio.conn_curr->role ||
    6e5a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6e5e:	2b00      	cmp	r3, #0
    6e60:	f2c0 8094 	blt.w	6f8c <isr+0x1054>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    6e64:	7a71      	ldrb	r1, [r6, #9]
    6e66:	200e      	movs	r0, #14
    6e68:	e7e9      	b.n	6e3e <isr+0xf06>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    6e6a:	7a71      	ldrb	r1, [r6, #9]
    6e6c:	2009      	movs	r0, #9
    6e6e:	f7fd f97b 	bl	4168 <pdu_len_cmp>
    6e72:	2800      	cmp	r0, #0
    6e74:	f000 808a 	beq.w	6f8c <isr+0x1054>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6e78:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    6e7a:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6e80:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    6e84:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    6e88:	f043 0310 	orr.w	r3, r3, #16
    6e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    6e90:	7bb2      	ldrb	r2, [r6, #14]
    6e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    6e96:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    6e9a:	f3c2 0210 	ubfx	r2, r2, #0, #17
    6e9e:	4013      	ands	r3, r2
    6ea0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    6ea4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    6ea8:	f043 0320 	orr.w	r3, r3, #32
    6eac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    6eb0:	2300      	movs	r3, #0
    6eb2:	86a3      	strh	r3, [r4, #52]	; 0x34
    6eb4:	e6a2      	b.n	6bfc <isr+0xcc4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    6eb6:	7a71      	ldrb	r1, [r6, #9]
    6eb8:	200c      	movs	r0, #12
    6eba:	f7fd f955 	bl	4168 <pdu_len_cmp>
    6ebe:	2800      	cmp	r0, #0
    6ec0:	d064      	beq.n	6f8c <isr+0x1054>
	if (!conn->llcp_version.tx) {
    6ec2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6ec6:	f013 0501 	ands.w	r5, r3, #1
    6eca:	d151      	bne.n	6f70 <isr+0x1038>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6ecc:	48c4      	ldr	r0, [pc, #784]	; (71e0 <isr+0x12a8>)
    6ece:	f7fb fbb1 	bl	2634 <mem_acquire>
		if (!node_tx) {
    6ed2:	4601      	mov	r1, r0
    6ed4:	2800      	cmp	r0, #0
    6ed6:	d0be      	beq.n	6e56 <isr+0xf1e>
		conn->llcp_version.tx = 1;
    6ed8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6edc:	f043 0301 	orr.w	r3, r3, #1
    6ee0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6ee4:	7903      	ldrb	r3, [r0, #4]
    6ee6:	f043 0303 	orr.w	r3, r3, #3
    6eea:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    6eec:	2306      	movs	r3, #6
    6eee:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    6ef0:	230c      	movs	r3, #12
    6ef2:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    6ef4:	2309      	movs	r3, #9
    6ef6:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    6ef8:	f06f 030e 	mvn.w	r3, #14
    6efc:	7243      	strb	r3, [r0, #9]
    6efe:	2305      	movs	r3, #5
    6f00:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    6f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f06:	72c3      	strb	r3, [r0, #11]
    6f08:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    6f0a:	4620      	mov	r0, r4
    6f0c:	f7fe fc08 	bl	5720 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    6f10:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    6f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6f18:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6f1c:	f001 fda4 	bl	8a68 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6f20:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    6f22:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6f24:	2201      	movs	r2, #1
    6f26:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    6f2a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6f2e:	7003      	strb	r3, [r0, #0]
    6f30:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    6f32:	b1c2      	cbz	r2, 6f66 <isr+0x102e>
		pdu_data_tx->md = 1;
    6f34:	f043 0310 	orr.w	r3, r3, #16
    6f38:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    6f3a:	7b33      	ldrb	r3, [r6, #12]
    6f3c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    6f40:	7bb2      	ldrb	r2, [r6, #14]
    6f42:	7b73      	ldrb	r3, [r6, #13]
    6f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6f48:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    6f4c:	7bf3      	ldrb	r3, [r6, #15]
    6f4e:	7c32      	ldrb	r2, [r6, #16]
    6f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6f54:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    6f58:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6f5c:	f043 0302 	orr.w	r3, r3, #2
    6f60:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    6f64:	e700      	b.n	6d68 <isr+0xe30>
		pdu_data_tx->md = 0;
    6f66:	f362 1304 	bfi	r3, r2, #4, #1
    6f6a:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    6f6c:	4615      	mov	r5, r2
    6f6e:	e7e4      	b.n	6f3a <isr+0x1002>
	} else if (!conn->llcp_version.rx) {
    6f70:	f013 0302 	ands.w	r3, r3, #2
    6f74:	f47f af51 	bne.w	6e1a <isr+0xee2>
		conn->procedure_expire = 0;
    6f78:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    6f7a:	2501      	movs	r5, #1
    6f7c:	e7dd      	b.n	6f3a <isr+0x1002>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    6f7e:	7a71      	ldrb	r1, [r6, #9]
    6f80:	2011      	movs	r0, #17
    6f82:	f7fd f8f1 	bl	4168 <pdu_len_cmp>
    6f86:	2800      	cmp	r0, #0
    6f88:	f47f af47 	bne.w	6e1a <isr+0xee2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f8c:	4894      	ldr	r0, [pc, #592]	; (71e0 <isr+0x12a8>)
    6f8e:	f7fb fb51 	bl	2634 <mem_acquire>
	if (!node_tx) {
    6f92:	4601      	mov	r1, r0
    6f94:	2800      	cmp	r0, #0
    6f96:	f43f af5e 	beq.w	6e56 <isr+0xf1e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f9a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    6f9c:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f9e:	f043 0303 	orr.w	r3, r3, #3
    6fa2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    6fa4:	2302      	movs	r3, #2
    6fa6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    6fa8:	2307      	movs	r3, #7
    6faa:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    6fac:	4620      	mov	r0, r4
    6fae:	f7fe fb89 	bl	56c4 <ctrl_tx_enqueue>
    6fb2:	e732      	b.n	6e1a <isr+0xee2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    6fb4:	7a71      	ldrb	r1, [r6, #9]
    6fb6:	2007      	movs	r0, #7
    6fb8:	f7fd f8d6 	bl	4168 <pdu_len_cmp>
    6fbc:	2800      	cmp	r0, #0
    6fbe:	d0e5      	beq.n	6f8c <isr+0x1054>
    6fc0:	e776      	b.n	6eb0 <isr+0xf78>
		if (_radio.conn_curr->role ||
    6fc2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	dbe0      	blt.n	6f8c <isr+0x1054>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    6fca:	7a71      	ldrb	r1, [r6, #9]
    6fcc:	2019      	movs	r0, #25
    6fce:	f7fd f8cb 	bl	4168 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d0da      	beq.n	6f8c <isr+0x1054>
			if (!(p->phys & 0x01)) {
    6fd6:	7b35      	ldrb	r5, [r6, #12]
    6fd8:	f015 0501 	ands.w	r5, r5, #1
    6fdc:	f43f aec4 	beq.w	6d68 <isr+0xe30>
			if (conn->llcp_req != conn->llcp_ack) {
    6fe0:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    6fe4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    6fe8:	429a      	cmp	r2, r3
    6fea:	f47f af16 	bne.w	6e1a <isr+0xee2>
			memcpy(&conn->llcp.chan_map.chm[0],
    6fee:	2205      	movs	r2, #5
    6ff0:	497c      	ldr	r1, [pc, #496]	; (71e4 <isr+0x12ac>)
    6ff2:	f104 0061 	add.w	r0, r4, #97	; 0x61
    6ff6:	f7f9 faf2 	bl	5de <memcpy>
			conn->llcp.chan_map.initiate = 1;
    6ffa:	2301      	movs	r3, #1
    6ffc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    7000:	2302      	movs	r3, #2
    7002:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    7006:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    700a:	3b01      	subs	r3, #1
    700c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    7010:	e703      	b.n	6e1a <isr+0xee2>
		if (_radio.crc_expire == 0) {
    7012:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    7016:	b912      	cbnz	r2, 701e <isr+0x10e6>
			_radio.crc_expire = 2;
    7018:	2202      	movs	r2, #2
    701a:	f880 2119 	strb.w	r2, [r0, #281]	; 0x119
		_radio.crc_expire--;
    701e:	f89b 4119 	ldrb.w	r4, [fp, #281]	; 0x119
    7022:	3c01      	subs	r4, #1
    7024:	b2e4      	uxtb	r4, r4
    7026:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    702a:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    702c:	fab4 f484 	clz	r4, r4
    7030:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    7032:	2d00      	cmp	r5, #0
    7034:	d143      	bne.n	70be <isr+0x1186>
			_radio.conn_curr->supervision_expire =
    7036:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7038:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    703a:	462f      	mov	r7, r5
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    703c:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    7040:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7042:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    7046:	f7fe ff13 	bl	5e70 <prepare_pdu_data_tx>
			STATE_CLOSE : STATE_TX;
    704a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    704e:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7050:	ea4f 19d9 	mov.w	r9, r9, lsr #7
			STATE_CLOSE : STATE_TX;
    7054:	d038      	beq.n	70c8 <isr+0x1190>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7056:	bba4      	cbnz	r4, 70c2 <isr+0x118a>
    7058:	f1b8 0f00 	cmp.w	r8, #0
    705c:	d005      	beq.n	706a <isr+0x1132>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    705e:	7a33      	ldrb	r3, [r6, #8]
    7060:	06db      	lsls	r3, r3, #27
    7062:	d402      	bmi.n	706a <isr+0x1132>
			 (pdu_data_tx->len == 0)) ||
    7064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    7066:	785b      	ldrb	r3, [r3, #1]
    7068:	b35b      	cbz	r3, 70c2 <isr+0x118a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    706a:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    706e:	f893 409b 	ldrb.w	r4, [r3, #155]	; 0x9b
    7072:	bb34      	cbnz	r4, 70c2 <isr+0x118a>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7074:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    7076:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7078:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    707c:	f001 fd8c 	bl	8b98 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7080:	4620      	mov	r0, r4
    7082:	f001 fcf9 	bl	8a78 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    7086:	f001 fe63 	bl	8d50 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    708a:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    708e:	990d      	ldr	r1, [sp, #52]	; 0x34
    7090:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    7094:	780b      	ldrb	r3, [r1, #0]
    7096:	f3c2 0200 	ubfx	r2, r2, #0, #1
    709a:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    709e:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    70a2:	f3c2 0240 	ubfx	r2, r2, #1, #1
    70a6:	f362 0382 	bfi	r3, r2, #2, #1
    70aa:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    70ac:	f7fd fd20 	bl	4af0 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    70b0:	f001 fca6 	bl	8a00 <radio_is_ready>
    70b4:	2800      	cmp	r0, #0
    70b6:	f43f acea 	beq.w	6a8e <isr+0xb56>
    70ba:	f7fe bf90 	b.w	5fde <isr+0xa6>
	u8_t rx_enqueue = 0;
    70be:	2500      	movs	r5, #0
    70c0:	e7bb      	b.n	703a <isr+0x1102>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    70c2:	2303      	movs	r3, #3
    70c4:	f88b 3014 	strb.w	r3, [fp, #20]
		if (_radio.role == ROLE_MASTER) {
    70c8:	f89b 3013 	ldrb.w	r3, [fp, #19]
    70cc:	2b04      	cmp	r3, #4
    70ce:	d10a      	bne.n	70e6 <isr+0x11ae>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    70d0:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    70d4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    70d8:	f369 12c7 	bfi	r2, r9, #7, #1
    70dc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    70e0:	f001 fc70 	bl	89c4 <radio_disable>
    70e4:	e4d3      	b.n	6a8e <isr+0xb56>
			radio_switch_complete_and_disable();
    70e6:	f001 fcdd 	bl	8aa4 <radio_switch_complete_and_disable>
    70ea:	e7ce      	b.n	708a <isr+0x1152>
	switch (_radio.role) {
    70ec:	7cc2      	ldrb	r2, [r0, #19]
    70ee:	2a04      	cmp	r2, #4
    70f0:	f63e af75 	bhi.w	5fde <isr+0xa6>
    70f4:	e8df f012 	tbh	[pc, r2, lsl #1]
    70f8:	00050193 	.word	0x00050193
    70fc:	00a90052 	.word	0x00a90052
    7100:	00a9      	.short	0x00a9
	if ((_radio.state == STATE_CLOSE) &&
    7102:	2b03      	cmp	r3, #3
    7104:	d109      	bne.n	711a <isr+0x11e2>
	    (_radio.advertiser.chan_map_current != 0)) {
    7106:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    710a:	075d      	lsls	r5, r3, #29
    710c:	d005      	beq.n	711a <isr+0x11e2>
		adv_setup();
    710e:	f7fd fd2f 	bl	4b70 <adv_setup>
		radio_tx_enable();
    7112:	f001 fc51 	bl	89b8 <radio_tx_enable>
    7116:	f7fe bf73 	b.w	6000 <isr+0xc8>
		radio_filter_disable();
    711a:	f001 fd0d 	bl	8b38 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    711e:	f89b 3014 	ldrb.w	r3, [fp, #20]
    7122:	2b03      	cmp	r3, #3
    7124:	d171      	bne.n	720a <isr+0x12d2>
		    (!_radio.advertiser.is_hdcd)) {
    7126:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    712a:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    712e:	d16c      	bne.n	720a <isr+0x12d2>
			entropy_get_entropy_isr(_radio.entropy, &random_delay,
    7130:	2201      	movs	r2, #1
    7132:	a90d      	add	r1, sp, #52	; 0x34
    7134:	f8db 0004 	ldr.w	r0, [fp, #4]
    7138:	f7fa fd1e 	bl	1b78 <entropy_get_entropy_isr>
			random_delay %= 10;
    713c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    7140:	4829      	ldr	r0, [pc, #164]	; (71e8 <isr+0x12b0>)
			random_delay %= 10;
    7142:	230a      	movs	r3, #10
    7144:	fbb1 f2f3 	udiv	r2, r1, r3
    7148:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    714c:	3201      	adds	r2, #1
    714e:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    7150:	b2d5      	uxtb	r5, r2
    7152:	fba5 0100 	umull	r0, r1, r5, r0
    7156:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    7158:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    715c:	fb03 1105 	mla	r1, r3, r5, r1
    7160:	a31d      	add	r3, pc, #116	; (adr r3, 71d8 <isr+0x12a0>)
    7162:	e9d3 2300 	ldrd	r2, r3, [r3]
    7166:	f7f9 f87f 	bl	268 <__aeabi_uldivmod>
			ticker_status =
    716a:	f640 734e 	movw	r3, #3918	; 0xf4e
    716e:	9306      	str	r3, [sp, #24]
    7170:	4b1e      	ldr	r3, [pc, #120]	; (71ec <isr+0x12b4>)
    7172:	e9cd 4402 	strd	r4, r4, [sp, #8]
    7176:	e9cd 4304 	strd	r4, r3, [sp, #16]
    717a:	e9cd 4400 	strd	r4, r4, [sp]
    717e:	b283      	uxth	r3, r0
    7180:	2205      	movs	r2, #5
    7182:	4621      	mov	r1, r4
    7184:	4620      	mov	r0, r4
    7186:	f7fc f8f3 	bl	3370 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    718a:	f030 0302 	bics.w	r3, r0, #2
    718e:	d03c      	beq.n	720a <isr+0x12d2>
    7190:	f89b 3012 	ldrb.w	r3, [fp, #18]
    7194:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7196:	d038      	beq.n	720a <isr+0x12d2>
    7198:	f7fe bf21 	b.w	5fde <isr+0xa6>
	if (_radio.state == STATE_CLOSE) {
    719c:	2b03      	cmp	r3, #3
    719e:	d127      	bne.n	71f0 <isr+0x12b8>
		radio_tmr_tifs_set(RADIO_TIFS);
    71a0:	2096      	movs	r0, #150	; 0x96
    71a2:	f001 fcf9 	bl	8b98 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    71a6:	2300      	movs	r3, #0
    71a8:	4619      	mov	r1, r3
    71aa:	461a      	mov	r2, r3
    71ac:	4618      	mov	r0, r3
    71ae:	f001 fc6f 	bl	8a90 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    71b2:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
    71b6:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
		radio_pkt_rx_set(_radio.packet_rx
    71ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    71be:	3008      	adds	r0, #8
    71c0:	f001 fbda 	bl	8978 <radio_pkt_rx_set>
		radio_rssi_measure();
    71c4:	f001 fc7c 	bl	8ac0 <radio_rssi_measure>
		_radio.state = STATE_RX;
    71c8:	2301      	movs	r3, #1
    71ca:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    71ce:	f001 fbed 	bl	89ac <radio_rx_enable>
    71d2:	f7fe bf15 	b.w	6000 <isr+0xc8>
    71d6:	bf00      	nop
    71d8:	1afd498d 	.word	0x1afd498d
    71dc:	00000007 	.word	0x00000007
    71e0:	200003d4 	.word	0x200003d4
    71e4:	2000039a 	.word	0x2000039a
    71e8:	d4a51000 	.word	0xd4a51000
    71ec:	00004761 	.word	0x00004761
		radio_filter_disable();
    71f0:	f001 fca2 	bl	8b38 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    71f4:	f89b 3014 	ldrb.w	r3, [fp, #20]
    71f8:	2b05      	cmp	r3, #5
    71fa:	d106      	bne.n	720a <isr+0x12d2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    71fc:	2300      	movs	r3, #0
    71fe:	9300      	str	r3, [sp, #0]
    7200:	2204      	movs	r2, #4
    7202:	4619      	mov	r1, r3
    7204:	4618      	mov	r0, r3
    7206:	f7fc f8fd 	bl	3404 <ticker_stop>
	_radio.role = ROLE_NONE;
    720a:	2400      	movs	r4, #0
    720c:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    7210:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    7214:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    7218:	f001 fd3c 	bl	8c94 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    721c:	4622      	mov	r2, r4
    721e:	4621      	mov	r1, r4
    7220:	4620      	mov	r0, r4
    7222:	4b87      	ldr	r3, [pc, #540]	; (7440 <isr+0x1508>)
    7224:	f7fb fabc 	bl	27a0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    7228:	4604      	mov	r4, r0
    722a:	2800      	cmp	r0, #0
    722c:	f47e aed7 	bne.w	5fde <isr+0xa6>
	clock_control_off(_radio.hf_clock, NULL);
    7230:	f8db 0000 	ldr.w	r0, [fp]
    7234:	6843      	ldr	r3, [r0, #4]
    7236:	4621      	mov	r1, r4
    7238:	685b      	ldr	r3, [r3, #4]
    723a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    723c:	2201      	movs	r2, #1
    723e:	4611      	mov	r1, r2
    7240:	4620      	mov	r0, r4
    7242:	f7fb fa85 	bl	2750 <mayfly_enable>
    7246:	f7fe beff 	b.w	6048 <isr+0x110>
	if (_radio.conn_curr == 0) {
    724a:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    724e:	2800      	cmp	r0, #0
    7250:	d0db      	beq.n	720a <isr+0x12d2>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    7252:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    7256:	b189      	cbz	r1, 727c <isr+0x1344>
    7258:	f89b 3013 	ldrb.w	r3, [fp, #19]
    725c:	2b03      	cmp	r3, #3
    725e:	d003      	beq.n	7268 <isr+0x1330>
    7260:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    7264:	07dc      	lsls	r4, r3, #31
    7266:	d509      	bpl.n	727c <isr+0x1344>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    7268:	f7fd fe2e 	bl	4ec8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    726c:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    7270:	f7fd fbba 	bl	49e8 <connection_release>
			_radio.conn_curr = NULL;
    7274:	2300      	movs	r3, #0
    7276:	f8cb 3114 	str.w	r3, [fp, #276]	; 0x114
    727a:	e7c6      	b.n	720a <isr+0x12d2>
	latency_event = _radio.conn_curr->latency_event;
    727c:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    727e:	f89b 7118 	ldrb.w	r7, [fp, #280]	; 0x118
	elapsed_event = latency_event + 1;
    7282:	1c75      	adds	r5, r6, #1
    7284:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    7286:	2f00      	cmp	r7, #0
    7288:	d06b      	beq.n	7362 <isr+0x142a>
		if (_radio.role == ROLE_SLAVE) {
    728a:	f89b 3013 	ldrb.w	r3, [fp, #19]
    728e:	2b03      	cmp	r3, #3
    7290:	d15b      	bne.n	734a <isr+0x1412>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    7292:	f001 fd51 	bl	8d38 <radio_tmr_aa_restore>
    7296:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    7298:	f001 fd54 	bl	8d44 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    729c:	f8db 7114 	ldr.w	r7, [fp, #276]	; 0x114
    72a0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 7448 <isr+0x1510>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    72a4:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    72a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    72aa:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    72ae:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    72b0:	a361      	add	r3, pc, #388	; (adr r3, 7438 <isr+0x1500>)
    72b2:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    72b6:	d83b      	bhi.n	7330 <isr+0x13f8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    72b8:	fba0 0109 	umull	r0, r1, r0, r9
    72bc:	f7f8 ffd4 	bl	268 <__aeabi_uldivmod>
    72c0:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    72c2:	ebaa 0008 	sub.w	r0, sl, r8
    72c6:	a35c      	add	r3, pc, #368	; (adr r3, 7438 <isr+0x1500>)
    72c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    72cc:	fba0 0109 	umull	r0, r1, r0, r9
    72d0:	f7f8 ffca 	bl	268 <__aeabi_uldivmod>
    72d4:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    72d6:	2200      	movs	r2, #0
    72d8:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    72da:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    72dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    72e0:	b36a      	cbz	r2, 733e <isr+0x1406>
				if (pdu_data_tx->len ||
    72e2:	7952      	ldrb	r2, [r2, #5]
    72e4:	b912      	cbnz	r2, 72ec <isr+0x13b4>
    72e6:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    72ea:	b10a      	cbz	r2, 72f0 <isr+0x13b8>
					_radio.conn_curr->latency_event = 0;
    72ec:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    72ee:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    72f0:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    72f4:	2100      	movs	r1, #0
    72f6:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    72f8:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    72fc:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    72fe:	b1aa      	cbz	r2, 732c <isr+0x13f4>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    7300:	4295      	cmp	r5, r2
    7302:	f080 8084 	bcs.w	740e <isr+0x14d6>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    7306:	1b52      	subs	r2, r2, r5
    7308:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    730a:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    730c:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    730e:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    7310:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    7312:	d97e      	bls.n	7412 <isr+0x14da>
			else if (_radio.role == ROLE_SLAVE) {
    7314:	f89b 2013 	ldrb.w	r2, [fp, #19]
    7318:	2a03      	cmp	r2, #3
    731a:	d107      	bne.n	732c <isr+0x13f4>
				if (latency_event != 0) {
    731c:	2e00      	cmp	r6, #0
    731e:	d178      	bne.n	7412 <isr+0x14da>
					force = _radio.conn_curr->slave.force & 0x01;
    7320:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    7322:	087a      	lsrs	r2, r7, #1
					if (force) {
    7324:	f017 0701 	ands.w	r7, r7, #1
    7328:	d135      	bne.n	7396 <isr+0x145e>
					_radio.conn_curr->slave.force >>= 1;
    732a:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    732c:	2700      	movs	r7, #0
    732e:	e035      	b.n	739c <isr+0x1464>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7330:	fba8 0109 	umull	r0, r1, r8, r9
    7334:	f7f8 ff98 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    7338:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    733a:	b284      	uxth	r4, r0
    733c:	e7cb      	b.n	72d6 <isr+0x139e>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    733e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    7342:	07d2      	lsls	r2, r2, #31
    7344:	d5d4      	bpl.n	72f0 <isr+0x13b8>
				_radio.conn_curr->latency_event =
    7346:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7348:	e7d1      	b.n	72ee <isr+0x13b6>
		} else if (reason_peer) {
    734a:	b141      	cbz	r1, 735e <isr+0x1426>
			_radio.conn_curr->master.terminate_ack = 1;
    734c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    7350:	f043 0301 	orr.w	r3, r3, #1
    7354:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    7358:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    735a:	461c      	mov	r4, r3
    735c:	e7c8      	b.n	72f0 <isr+0x13b8>
	ticks_drift_minus = 0;
    735e:	460b      	mov	r3, r1
    7360:	e7fb      	b.n	735a <isr+0x1422>
	else if (_radio.conn_curr->connect_expire) {
    7362:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    7364:	b184      	cbz	r4, 7388 <isr+0x1450>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    7366:	42a5      	cmp	r5, r4
    7368:	d204      	bcs.n	7374 <isr+0x143c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    736a:	1b64      	subs	r4, r4, r5
    736c:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    736e:	463c      	mov	r4, r7
    7370:	4623      	mov	r3, r4
    7372:	e7c1      	b.n	72f8 <isr+0x13c0>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    7374:	213e      	movs	r1, #62	; 0x3e
    7376:	f7fd fda7 	bl	4ec8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    737a:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    737e:	f7fd fb33 	bl	49e8 <connection_release>
			_radio.conn_curr = NULL;
    7382:	f8cb 7114 	str.w	r7, [fp, #276]	; 0x114
    7386:	e740      	b.n	720a <isr+0x12d2>
		if (!_radio.conn_curr->supervision_expire) {
    7388:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    738a:	2b00      	cmp	r3, #0
    738c:	d1f0      	bne.n	7370 <isr+0x1438>
			_radio.conn_curr->supervision_expire =
    738e:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    7390:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    7392:	461c      	mov	r4, r3
    7394:	e7b0      	b.n	72f8 <isr+0x13c0>
						_radio.conn_curr->slave.force |=
    7396:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    739a:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    739c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    739e:	b11a      	cbz	r2, 73a8 <isr+0x1470>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    73a0:	4295      	cmp	r5, r2
    73a2:	d238      	bcs.n	7416 <isr+0x14de>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    73a4:	1b55      	subs	r5, r2, r5
    73a6:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    73a8:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    73ac:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    73b0:	4291      	cmp	r1, r2
    73b2:	d006      	beq.n	73c2 <isr+0x148a>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    73b4:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    73b8:	3a01      	subs	r2, #1
    73ba:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    73bc:	bf9c      	itt	ls
    73be:	2200      	movls	r2, #0
    73c0:	8542      	strhls	r2, [r0, #42]	; 0x2a
    73c2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    73c4:	b90f      	cbnz	r7, 73ca <isr+0x1492>
    73c6:	428e      	cmp	r6, r1
    73c8:	d027      	beq.n	741a <isr+0x14e2>
		lazy = _radio.conn_curr->latency_event + 1;
    73ca:	3101      	adds	r1, #1
    73cc:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    73ce:	b924      	cbnz	r4, 73da <isr+0x14a2>
    73d0:	b91b      	cbnz	r3, 73da <isr+0x14a2>
    73d2:	b911      	cbnz	r1, 73da <isr+0x14a2>
	    (lazy != 0) || (force != 0)) {
    73d4:	2f00      	cmp	r7, #0
    73d6:	f43f af18 	beq.w	720a <isr+0x12d2>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    73da:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    73de:	4a19      	ldr	r2, [pc, #100]	; (7444 <isr+0x150c>)
    73e0:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    73e2:	3507      	adds	r5, #7
		ticker_status =
    73e4:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    73e6:	b2ed      	uxtb	r5, r5
		ticker_status =
    73e8:	e9cd 7204 	strd	r7, r2, [sp, #16]
    73ec:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    73ee:	9506      	str	r5, [sp, #24]
		ticker_status =
    73f0:	4623      	mov	r3, r4
    73f2:	e9cd 1101 	strd	r1, r1, [sp, #4]
    73f6:	462a      	mov	r2, r5
    73f8:	4608      	mov	r0, r1
    73fa:	f7fb ffb9 	bl	3370 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    73fe:	f030 0302 	bics.w	r3, r0, #2
    7402:	f43f af02 	beq.w	720a <isr+0x12d2>
    7406:	f89b 3012 	ldrb.w	r3, [fp, #18]
    740a:	429d      	cmp	r5, r3
    740c:	e6c3      	b.n	7196 <isr+0x125e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    740e:	2108      	movs	r1, #8
    7410:	e72a      	b.n	7268 <isr+0x1330>
				force = 1;
    7412:	2701      	movs	r7, #1
    7414:	e7c2      	b.n	739c <isr+0x1464>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    7416:	2122      	movs	r1, #34	; 0x22
    7418:	e726      	b.n	7268 <isr+0x1330>
	lazy = 0;
    741a:	4639      	mov	r1, r7
    741c:	e7d7      	b.n	73ce <isr+0x1496>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    741e:	3b04      	subs	r3, #4
    7420:	2b01      	cmp	r3, #1
    7422:	f63e addc 	bhi.w	5fde <isr+0xa6>
		_radio.state = STATE_NONE;
    7426:	2300      	movs	r3, #0
    7428:	7503      	strb	r3, [r0, #20]
    742a:	f7fe be0d 	b.w	6048 <isr+0x110>
    742e:	f7fd fd73 	bl	4f18 <isr.part.45>
    7432:	bf00      	nop
    7434:	f3af 8000 	nop.w
    7438:	1afd498d 	.word	0x1afd498d
    743c:	00000007 	.word	0x00000007
    7440:	20002a48 	.word	0x20002a48
    7444:	00004779 	.word	0x00004779
    7448:	3b9aca00 	.word	0x3b9aca00
    744c:	00000000 	.word	0x00000000

00007450 <mayfly_xtal_stop_calc>:
{
    7450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7454:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7456:	2302      	movs	r3, #2
    7458:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
    745a:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
    745c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	ticker_id_next = 0xff;
    7460:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    7462:	4e73      	ldr	r6, [pc, #460]	; (7630 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    7464:	4d73      	ldr	r5, [pc, #460]	; (7634 <mayfly_xtal_stop_calc+0x1e4>)
	ticker_id_next = 0xff;
    7466:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
{
    746a:	4604      	mov	r4, r0
	ticks_to_expire = 0;
    746c:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    746e:	ab09      	add	r3, sp, #36	; 0x24
    7470:	e9cd 6301 	strd	r6, r3, [sp, #4]
    7474:	ab0c      	add	r3, sp, #48	; 0x30
    7476:	9300      	str	r3, [sp, #0]
    7478:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    747c:	ab0d      	add	r3, sp, #52	; 0x34
    747e:	2101      	movs	r1, #1
    7480:	2000      	movs	r0, #0
    7482:	f7fb fff9 	bl	3478 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    7486:	2802      	cmp	r0, #2
    7488:	d00b      	beq.n	74a2 <mayfly_xtal_stop_calc+0x52>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    748a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    748c:	b16b      	cbz	r3, 74aa <mayfly_xtal_stop_calc+0x5a>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    748e:	4040      	eors	r0, r0
    7490:	f380 8811 	msr	BASEPRI, r0
    7494:	f04f 0004 	mov.w	r0, #4
    7498:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    749a:	2101      	movs	r1, #1
    749c:	2000      	movs	r0, #0
    749e:	f7fc f863 	bl	3568 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    74a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74a4:	2b02      	cmp	r3, #2
    74a6:	d0f8      	beq.n	749a <mayfly_xtal_stop_calc+0x4a>
    74a8:	e7ef      	b.n	748a <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
    74aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    74ae:	2bff      	cmp	r3, #255	; 0xff
    74b0:	d004      	beq.n	74bc <mayfly_xtal_stop_calc+0x6c>
    74b2:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    74b6:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    74b8:	4293      	cmp	r3, r2
    74ba:	dad8      	bge.n	746e <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    74bc:	1f5a      	subs	r2, r3, #5
    74be:	b2d2      	uxtb	r2, r2
    74c0:	2af9      	cmp	r2, #249	; 0xf9
    74c2:	4f5d      	ldr	r7, [pc, #372]	; (7638 <mayfly_xtal_stop_calc+0x1e8>)
    74c4:	d805      	bhi.n	74d2 <mayfly_xtal_stop_calc+0x82>
				_radio.connection_count))) {
    74c6:	4a5b      	ldr	r2, [pc, #364]	; (7634 <mayfly_xtal_stop_calc+0x1e4>)
    74c8:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    74cc:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    74ce:	4293      	cmp	r3, r2
    74d0:	db07      	blt.n	74e2 <mayfly_xtal_stop_calc+0x92>
		if (s_xtal_retained) {
    74d2:	783b      	ldrb	r3, [r7, #0]
    74d4:	b113      	cbz	r3, 74dc <mayfly_xtal_stop_calc+0x8c>
    74d6:	2001      	movs	r0, #1
    74d8:	f7fd f984 	bl	47e4 <mayfly_xtal_retain.part.16>
}
    74dc:	b00e      	add	sp, #56	; 0x38
    74de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    74e2:	a90a      	add	r1, sp, #40	; 0x28
    74e4:	b2e0      	uxtb	r0, r4
    74e6:	f7fd f95f 	bl	47a8 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    74ea:	2800      	cmp	r0, #0
    74ec:	d0cf      	beq.n	748e <mayfly_xtal_stop_calc+0x3e>
    74ee:	e9d0 3400 	ldrd	r3, r4, [r0]
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    74f2:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    74f4:	bfb8      	it	lt
    74f6:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    74f8:	429c      	cmp	r4, r3
    74fa:	bf38      	it	cc
    74fc:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    74fe:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7500:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    7504:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    7506:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7508:	f7fd f94e 	bl	47a8 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    750c:	4605      	mov	r5, r0
    750e:	2800      	cmp	r0, #0
    7510:	d0bd      	beq.n	748e <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7512:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7516:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7518:	429e      	cmp	r6, r3
    751a:	bf38      	it	cc
    751c:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    751e:	2a00      	cmp	r2, #0
    7520:	da05      	bge.n	752e <mayfly_xtal_stop_calc+0xde>
		ticks_to_expire -=
    7522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    7524:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    7528:	4433      	add	r3, r6
    752a:	1a9b      	subs	r3, r3, r2
    752c:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    752e:	990c      	ldr	r1, [sp, #48]	; 0x30
    7530:	783a      	ldrb	r2, [r7, #0]
	    (ticks_slot_abs +
    7532:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    7536:	428b      	cmp	r3, r1
    7538:	d20a      	bcs.n	7550 <mayfly_xtal_stop_calc+0x100>
		if (s_xtal_retained) {
    753a:	b112      	cbz	r2, 7542 <mayfly_xtal_stop_calc+0xf2>
    753c:	2001      	movs	r0, #1
    753e:	f7fd f951 	bl	47e4 <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    7542:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7546:	2101      	movs	r1, #1
    7548:	4628      	mov	r0, r5
    754a:	f7fd fd1b 	bl	4f84 <prepare_normal_set>
    754e:	e7c5      	b.n	74dc <mayfly_xtal_stop_calc+0x8c>
		if (!s_xtal_retained) {
    7550:	b93a      	cbnz	r2, 7562 <mayfly_xtal_stop_calc+0x112>
			s_xtal_retained = 1;
    7552:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    7554:	4b39      	ldr	r3, [pc, #228]	; (763c <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    7556:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    7558:	4611      	mov	r1, r2
    755a:	f7fb f921 	bl	27a0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    755e:	2800      	cmp	r0, #0
    7560:	d195      	bne.n	748e <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    7562:	682b      	ldr	r3, [r5, #0]
    7564:	2b00      	cmp	r3, #0
    7566:	db15      	blt.n	7594 <mayfly_xtal_stop_calc+0x144>
    7568:	42b3      	cmp	r3, r6
    756a:	d913      	bls.n	7594 <mayfly_xtal_stop_calc+0x144>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    756c:	1b9b      	subs	r3, r3, r6
			ticker_status =
    756e:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    7570:	b29b      	uxth	r3, r3
			ticker_status =
    7572:	4933      	ldr	r1, [pc, #204]	; (7640 <mayfly_xtal_stop_calc+0x1f0>)
    7574:	9105      	str	r1, [sp, #20]
    7576:	e9cd 0301 	strd	r0, r3, [sp, #4]
    757a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    757e:	9506      	str	r5, [sp, #24]
    7580:	e9cd 0003 	strd	r0, r0, [sp, #12]
    7584:	9000      	str	r0, [sp, #0]
    7586:	2101      	movs	r1, #1
    7588:	f7fb fef2 	bl	3370 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    758c:	f030 0302 	bics.w	r3, r0, #2
    7590:	f47f af7d 	bne.w	748e <mayfly_xtal_stop_calc+0x3e>
		if (!conn_curr || !conn_next) {
    7594:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7596:	2e00      	cmp	r6, #0
    7598:	d0a0      	beq.n	74dc <mayfly_xtal_stop_calc+0x8c>
    759a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    759c:	2d00      	cmp	r5, #0
    759e:	d09d      	beq.n	74dc <mayfly_xtal_stop_calc+0x8c>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    75a0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    75a2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    75a4:	429a      	cmp	r2, r3
    75a6:	d199      	bne.n	74dc <mayfly_xtal_stop_calc+0x8c>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    75a8:	4826      	ldr	r0, [pc, #152]	; (7644 <mayfly_xtal_stop_calc+0x1f4>)
    75aa:	b297      	uxth	r7, r2
    75ac:	fba7 0100 	umull	r0, r1, r7, r0
    75b0:	f240 1323 	movw	r3, #291	; 0x123
    75b4:	fb03 1107 	mla	r1, r3, r7, r1
    75b8:	a31b      	add	r3, pc, #108	; (adr r3, 7628 <mayfly_xtal_stop_calc+0x1d8>)
    75ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    75be:	f7f8 fe53 	bl	268 <__aeabi_uldivmod>
    75c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    75c8:	2200      	movs	r2, #0
    75ca:	4283      	cmp	r3, r0
    75cc:	d818      	bhi.n	7600 <mayfly_xtal_stop_calc+0x1b0>
    75ce:	b102      	cbz	r2, 75d2 <mayfly_xtal_stop_calc+0x182>
    75d0:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    75d2:	f996 101d 	ldrsb.w	r1, [r6, #29]
    75d6:	f995 201d 	ldrsb.w	r2, [r5, #29]
    75da:	2900      	cmp	r1, #0
    75dc:	da13      	bge.n	7606 <mayfly_xtal_stop_calc+0x1b6>
    75de:	2a00      	cmp	r2, #0
    75e0:	f6ff af7c 	blt.w	74dc <mayfly_xtal_stop_calc+0x8c>
			     (ticks_slot_abs +
    75e4:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    75e6:	42a3      	cmp	r3, r4
    75e8:	f4bf af78 	bcs.w	74dc <mayfly_xtal_stop_calc+0x8c>
				status = conn_update_req(conn_curr);
    75ec:	4630      	mov	r0, r6
    75ee:	f7fc fe1f 	bl	4230 <conn_update_req>
				if (status == 2) {
    75f2:	2802      	cmp	r0, #2
    75f4:	f47f af72 	bne.w	74dc <mayfly_xtal_stop_calc+0x8c>
					conn_update_req(conn_next);
    75f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    75fa:	f7fc fe19 	bl	4230 <conn_update_req>
    75fe:	e76d      	b.n	74dc <mayfly_xtal_stop_calc+0x8c>
				ticks_to_expire -= ticks_conn_interval;
    7600:	1a1b      	subs	r3, r3, r0
    7602:	2201      	movs	r2, #1
    7604:	e7e1      	b.n	75ca <mayfly_xtal_stop_calc+0x17a>
			} else if (!conn_curr->role && conn_next->role &&
    7606:	2a00      	cmp	r2, #0
    7608:	f6bf af68 	bge.w	74dc <mayfly_xtal_stop_calc+0x8c>
				    (ticks_slot_abs +
    760c:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    760e:	42a3      	cmp	r3, r4
    7610:	f4bf af64 	bcs.w	74dc <mayfly_xtal_stop_calc+0x8c>
				status = conn_update_req(conn_next);
    7614:	4628      	mov	r0, r5
    7616:	f7fc fe0b 	bl	4230 <conn_update_req>
				if (status == 2) {
    761a:	2802      	cmp	r0, #2
    761c:	f47f af5e 	bne.w	74dc <mayfly_xtal_stop_calc+0x8c>
					conn_update_req(conn_curr);
    7620:	980a      	ldr	r0, [sp, #40]	; 0x28
    7622:	e7ea      	b.n	75fa <mayfly_xtal_stop_calc+0x1aa>
    7624:	f3af 8000 	nop.w
    7628:	1afd498d 	.word	0x1afd498d
    762c:	00000007 	.word	0x00000007
    7630:	000041a5 	.word	0x000041a5
    7634:	20000280 	.word	0x20000280
    7638:	20000488 	.word	0x20000488
    763c:	20002ac8 	.word	0x20002ac8
    7640:	000041a9 	.word	0x000041a9
    7644:	09ce5400 	.word	0x09ce5400

00007648 <event_master>:
{
    7648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    764a:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    764c:	4b49      	ldr	r3, [pc, #292]	; (7774 <event_master+0x12c>)
    764e:	7cda      	ldrb	r2, [r3, #19]
{
    7650:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7652:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7656:	461d      	mov	r5, r3
    7658:	b12a      	cbz	r2, 7666 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    765a:	4040      	eors	r0, r0
    765c:	f380 8811 	msr	BASEPRI, r0
    7660:	f04f 0004 	mov.w	r0, #4
    7664:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    7666:	7c1b      	ldrb	r3, [r3, #16]
    7668:	8c22      	ldrh	r2, [r4, #32]
    766a:	b2db      	uxtb	r3, r3
    766c:	3207      	adds	r2, #7
    766e:	4293      	cmp	r3, r2
    7670:	d1f3      	bne.n	765a <event_master+0x12>
	_radio.role = ROLE_MASTER;
    7672:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    7674:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7678:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    767a:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    767c:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    767e:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    7680:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7682:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    7686:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    7688:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    768a:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    768c:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    768e:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    7690:	f7fd f95a 	bl	4948 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    7694:	a901      	add	r1, sp, #4
    7696:	4620      	mov	r0, r4
    7698:	f7fe fbea 	bl	5e70 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    769c:	9901      	ldr	r1, [sp, #4]
    769e:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    76a2:	780b      	ldrb	r3, [r1, #0]
    76a4:	f3c2 0200 	ubfx	r2, r2, #0, #1
    76a8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    76ac:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    76b0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    76b4:	f362 0382 	bfi	r3, r2, #2, #1
    76b8:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    76ba:	4620      	mov	r0, r4
    76bc:	f7fd ff2c 	bl	5518 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    76c0:	2096      	movs	r0, #150	; 0x96
    76c2:	f001 fa69 	bl	8b98 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    76c6:	4630      	mov	r0, r6
    76c8:	f001 f9d6 	bl	8a78 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    76cc:	4620      	mov	r0, r4
    76ce:	9901      	ldr	r1, [sp, #4]
    76d0:	f7fd fa0e 	bl	4af0 <tx_packet_set>
	if (conn->data_chan_sel) {
    76d4:	7f63      	ldrb	r3, [r4, #29]
    76d6:	0658      	lsls	r0, r3, #25
    76d8:	f104 0217 	add.w	r2, r4, #23
    76dc:	d521      	bpl.n	7722 <event_master+0xda>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    76de:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    76e0:	8be1      	ldrh	r1, [r4, #30]
    76e2:	3801      	subs	r0, #1
    76e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    76e8:	b280      	uxth	r0, r0
    76ea:	f7fd fe55 	bl	5398 <chan_sel_2>
	chan_set(data_chan_use);
    76ee:	f7fd fa1f 	bl	4b30 <chan_set>
		remainder_us = radio_tmr_start(1,
    76f2:	68ea      	ldr	r2, [r5, #12]
    76f4:	f107 0109 	add.w	r1, r7, #9
    76f8:	2001      	movs	r0, #1
    76fa:	f001 fa59 	bl	8bb0 <radio_tmr_start>
		radio_tmr_end_capture();
    76fe:	f001 fb27 	bl	8d50 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7702:	f894 1020 	ldrb.w	r1, [r4, #32]
    7706:	3107      	adds	r1, #7
    7708:	463a      	mov	r2, r7
    770a:	b2c9      	uxtb	r1, r1
    770c:	4620      	mov	r0, r4
    770e:	f7fd fe87 	bl	5420 <preempt_calc>
	if (0 !=
    7712:	4603      	mov	r3, r0
    7714:	b328      	cbz	r0, 7762 <event_master+0x11a>
		_radio.state = STATE_STOP;
    7716:	2304      	movs	r3, #4
    7718:	752b      	strb	r3, [r5, #20]
		radio_disable();
    771a:	f001 f953 	bl	89c4 <radio_disable>
}
    771e:	b003      	add	sp, #12
    7720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7722:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    7724:	7fa6      	ldrb	r6, [r4, #30]
    7726:	fb01 6606 	mla	r6, r1, r6, r6
    772a:	7fe1      	ldrb	r1, [r4, #31]
    772c:	2025      	movs	r0, #37	; 0x25
    772e:	440e      	add	r6, r1
    7730:	fb96 f1f0 	sdiv	r1, r6, r0
    7734:	fb00 6611 	mls	r6, r0, r1, r6
    7738:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    773a:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    773c:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    773e:	5c51      	ldrb	r1, [r2, r1]
    7740:	f006 0607 	and.w	r6, r6, #7
    7744:	fa41 f606 	asr.w	r6, r1, r6
    7748:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    774a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    774e:	d4ce      	bmi.n	76ee <event_master+0xa6>
		chan_index = chan_next % chan_count;
    7750:	fbb0 f1f3 	udiv	r1, r0, r3
    7754:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    7758:	b2c9      	uxtb	r1, r1
    775a:	4610      	mov	r0, r2
    775c:	f7fc fd30 	bl	41c0 <chan_sel_remap>
    7760:	e7c5      	b.n	76ee <event_master+0xa6>
		ticker_status =
    7762:	4a05      	ldr	r2, [pc, #20]	; (7778 <event_master+0x130>)
    7764:	4601      	mov	r1, r0
    7766:	f7fb fec5 	bl	34f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    776a:	f030 0302 	bics.w	r3, r0, #2
    776e:	f47f af74 	bne.w	765a <event_master+0x12>
    7772:	e7d4      	b.n	771e <event_master+0xd6>
    7774:	20000280 	.word	0x20000280
    7778:	00004791 	.word	0x00004791

0000777c <radio_init>:
{
    777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    7780:	4e3c      	ldr	r6, [pc, #240]	; (7874 <radio_init+0xf8>)
{
    7782:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7784:	f89d 801c 	ldrb.w	r8, [sp, #28]
    7788:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    778c:	f8bd e020 	ldrh.w	lr, [sp, #32]
    7790:	f89d c018 	ldrb.w	ip, [sp, #24]
	_radio.hf_clock = hf_clock;
    7794:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7796:	f44f 7082 	mov.w	r0, #260	; 0x104
    779a:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    779e:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    77a2:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    77a6:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    77a8:	f108 0401 	add.w	r4, r8, #1
    77ac:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    77ae:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    77b0:	f10e 0403 	add.w	r4, lr, #3
	rx_count_max += 3;
    77b4:	f10c 0203 	add.w	r2, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    77b8:	2c28      	cmp	r4, #40	; 0x28
	rx_count_max += 3;
    77ba:	b2d2      	uxtb	r2, r2
	_radio.packet_data_octets_max = packet_data_octets_max;
    77bc:	f8a6 e12c 	strh.w	lr, [r6, #300]	; 0x12c
	_radio.link_rx_data_quota = rx_count_max;
    77c0:	f886 214c 	strb.w	r2, [r6, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
    77c4:	bf88      	it	hi
    77c6:	f10e 0e0e 	addhi.w	lr, lr, #14
    77ca:	b292      	uxth	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    77cc:	bf94      	ite	ls
    77ce:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
		_radio.packet_rx_data_pool_size =
    77d2:	f02e 0e03 	bichi.w	lr, lr, #3
	_radio.packet_rx_count = (rx_count_max + 1);
    77d6:	f10c 0c04 	add.w	ip, ip, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    77da:	f108 0802 	add.w	r8, r8, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    77de:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    77e2:	bf8c      	ite	hi
    77e4:	fb1e f202 	smulbbhi	r2, lr, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    77e8:	0112      	lslls	r2, r2, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    77ea:	fa5f f888 	uxtb.w	r8, r8
		_radio.packet_rx_data_pool_size =
    77ee:	f8a6 212e 	strh.w	r2, [r6, #302]	; 0x12e
	_radio.packet_tx_count = (tx_count_max + 1);
    77f2:	f886 816c 	strb.w	r8, [r6, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
    77f6:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    77fa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	mem_radio +=
    77fe:	eb00 008c 	add.w	r0, r0, ip, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7802:	f8b6 412e 	ldrh.w	r4, [r6, #302]	; 0x12e
	_radio.pkt_tx = (void *)mem_radio;
    7806:	f8c6 0164 	str.w	r0, [r6, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    780a:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    780c:	2230      	movs	r2, #48	; 0x30
	_radio.pkt_release = (void *)mem_radio;
    780e:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7812:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7814:	f8a6 2130 	strh.w	r2, [r6, #304]	; 0x130
	_radio.pkt_rx_data_pool = mem_radio;
    7818:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    781c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    7820:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7822:	eb0c 0403 	add.w	r4, ip, r3
	_radio.link_rx_pool = mem_radio;
    7826:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    782a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    782e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    7832:	f8c6 0150 	str.w	r0, [r6, #336]	; 0x150
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7836:	340a      	adds	r4, #10
    7838:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    783c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    783e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    7840:	f8a6 4160 	strh.w	r4, [r6, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    7844:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    7848:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    784a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    784e:	f886 c138 	strb.w	ip, [r6, #312]	; 0x138
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7852:	f886 2132 	strb.w	r2, [r6, #306]	; 0x132
	_radio.pkt_tx_data_pool = mem_radio;
    7856:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	if (retcode) {
    785a:	d003      	beq.n	7864 <radio_init+0xe8>
		return (retcode + mem_size);
    785c:	442c      	add	r4, r5
}
    785e:	4620      	mov	r0, r4
    7860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    7864:	2301      	movs	r3, #1
    7866:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	common_init();
    786a:	f7fd fd1f 	bl	52ac <common_init>
	radio_setup();
    786e:	f000 ffd3 	bl	8818 <radio_setup>
	return retcode;
    7872:	e7f4      	b.n	785e <radio_init+0xe2>
    7874:	20000280 	.word	0x20000280

00007878 <ll_reset>:
{
    7878:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    787a:	2103      	movs	r1, #3
    787c:	2005      	movs	r0, #5
    787e:	f7fc fd6b 	bl	4358 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    7882:	2104      	movs	r1, #4
    7884:	2006      	movs	r0, #6
    7886:	f7fc fd67 	bl	4358 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    788a:	4c21      	ldr	r4, [pc, #132]	; (7910 <ll_reset+0x98>)
    788c:	2500      	movs	r5, #0
    788e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    7892:	b2ab      	uxth	r3, r5
    7894:	429a      	cmp	r2, r3
    7896:	f105 0501 	add.w	r5, r5, #1
    789a:	d832      	bhi.n	7902 <ll_reset+0x8a>
	_radio.advertiser.is_enabled = 0;
    789c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    78a0:	f36f 13c7 	bfc	r3, #7, #1
    78a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    78a8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    78ac:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    78ae:	f360 0300 	bfi	r3, r0, #0, #1
    78b2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    78b6:	2230      	movs	r2, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    78b8:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    78bc:	fbb3 f3f2 	udiv	r3, r3, r2
    78c0:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    78c4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0;
    78c8:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    78cc:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    78ce:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0;
    78d2:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    78d6:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
    78da:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
    78de:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    78e2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    78e6:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0;
    78ea:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0;
    78ee:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
	_radio.fc_ack = _radio.fc_req;
    78f2:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
    78f6:	f000 fe61 	bl	85bc <ll_filter_reset>
}
    78fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    78fe:	f7fd bcd5 	b.w	52ac <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    7902:	1da8      	adds	r0, r5, #6
    7904:	21ff      	movs	r1, #255	; 0xff
    7906:	b2c0      	uxtb	r0, r0
    7908:	f7fc fd26 	bl	4358 <role_disable>
    790c:	e7bf      	b.n	788e <ll_reset+0x16>
    790e:	bf00      	nop
    7910:	20000280 	.word	0x20000280

00007914 <radio_adv_data_get>:
}
    7914:	4800      	ldr	r0, [pc, #0]	; (7918 <radio_adv_data_get+0x4>)
    7916:	4770      	bx	lr
    7918:	200002aa 	.word	0x200002aa

0000791c <radio_scan_data_get>:
}
    791c:	4800      	ldr	r0, [pc, #0]	; (7920 <radio_scan_data_get+0x4>)
    791e:	4770      	bx	lr
    7920:	200002fa 	.word	0x200002fa

00007924 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    7924:	4b02      	ldr	r3, [pc, #8]	; (7930 <ll_adv_is_enabled+0xc>)
    7926:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    792a:	09c0      	lsrs	r0, r0, #7
    792c:	4770      	bx	lr
    792e:	bf00      	nop
    7930:	20000280 	.word	0x20000280

00007934 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    7934:	4b04      	ldr	r3, [pc, #16]	; (7948 <radio_adv_filter_pol_get+0x14>)
    7936:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    793a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    793c:	bfba      	itte	lt
    793e:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    7942:	0980      	lsrlt	r0, r0, #6
	return 0;
    7944:	2000      	movge	r0, #0
}
    7946:	4770      	bx	lr
    7948:	20000280 	.word	0x20000280

0000794c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    794c:	4a09      	ldr	r2, [pc, #36]	; (7974 <ll_scan_is_enabled+0x28>)
    794e:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    7952:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    7956:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    795a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    795e:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    7960:	f003 0301 	and.w	r3, r3, #1
    7964:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    7968:	bf14      	ite	ne
    796a:	2004      	movne	r0, #4
    796c:	2000      	moveq	r0, #0
}
    796e:	4318      	orrs	r0, r3
    7970:	4770      	bx	lr
    7972:	bf00      	nop
    7974:	20000280 	.word	0x20000280

00007978 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    7978:	4b05      	ldr	r3, [pc, #20]	; (7990 <radio_scan_filter_pol_get+0x18>)
    797a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    797e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    7982:	bf1c      	itt	ne
    7984:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    7988:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    798c:	4770      	bx	lr
    798e:	bf00      	nop
    7990:	20000280 	.word	0x20000280

00007994 <ll_tx_pwr_lvl_get>:
{
    7994:	b510      	push	{r4, lr}
    7996:	4614      	mov	r4, r2
	conn = connection_get(handle);
    7998:	f7fc fcc8 	bl	432c <connection_get>
	if (!conn) {
    799c:	b110      	cbz	r0, 79a4 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    799e:	2000      	movs	r0, #0
    79a0:	7020      	strb	r0, [r4, #0]
}
    79a2:	bd10      	pop	{r4, pc}
		return 1;
    79a4:	2001      	movs	r0, #1
    79a6:	e7fc      	b.n	79a2 <ll_tx_pwr_lvl_get+0xe>

000079a8 <ll_rx_get>:
{
    79a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    79ac:	4605      	mov	r5, r0
    79ae:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    79b0:	4918      	ldr	r1, [pc, #96]	; (7a14 <ll_rx_get+0x6c>)
    79b2:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
    79b6:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    79ba:	4293      	cmp	r3, r2
    79bc:	460f      	mov	r7, r1
    79be:	d01f      	beq.n	7a00 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    79c0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    79c4:	f201 116f 	addw	r1, r1, #367	; 0x16f
    79c8:	f898 2000 	ldrb.w	r2, [r8]
    79cc:	f7fc fc64 	bl	4298 <tx_cmplt_get>
		if (!cmplt) {
    79d0:	4604      	mov	r4, r0
    79d2:	b9e0      	cbnz	r0, 7a0e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    79d4:	ae02      	add	r6, sp, #8
    79d6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
    79da:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    79de:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
    79e2:	4631      	mov	r1, r6
    79e4:	f10d 0006 	add.w	r0, sp, #6
    79e8:	f7fc fc56 	bl	4298 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    79ec:	b934      	cbnz	r4, 79fc <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    79ee:	b928      	cbnz	r0, 79fc <ll_rx_get+0x54>
			*node_rx = _node_rx;
    79f0:	f8c5 8000 	str.w	r8, [r5]
}
    79f4:	4620      	mov	r0, r4
    79f6:	b002      	add	sp, #8
    79f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    79fc:	4604      	mov	r4, r0
    79fe:	e7ee      	b.n	79de <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7a00:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
    7a04:	f201 116f 	addw	r1, r1, #367	; 0x16f
    7a08:	f7fc fc46 	bl	4298 <tx_cmplt_get>
    7a0c:	4604      	mov	r4, r0
		*node_rx = NULL;
    7a0e:	2300      	movs	r3, #0
    7a10:	602b      	str	r3, [r5, #0]
    7a12:	e7ef      	b.n	79f4 <ll_rx_get+0x4c>
    7a14:	20000280 	.word	0x20000280

00007a18 <ll_rx_mem_release>:
{
    7a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    7a1c:	4c16      	ldr	r4, [pc, #88]	; (7a78 <ll_rx_mem_release+0x60>)
{
    7a1e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    7a20:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7a22:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
    7a26:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    7a2a:	b920      	cbnz	r0, 7a36 <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    7a2c:	6028      	str	r0, [r5, #0]
}
    7a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    7a32:	f7fd bbf1 	b.w	5218 <packet_rx_allocate.constprop.50>
		switch (_node_rx_free->hdr.type) {
    7a36:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    7a38:	f8d0 8000 	ldr.w	r8, [r0]
    7a3c:	2a0a      	cmp	r2, #10
    7a3e:	d807      	bhi.n	7a50 <ll_rx_mem_release+0x38>
    7a40:	2301      	movs	r3, #1
    7a42:	4093      	lsls	r3, r2
    7a44:	f240 727e 	movw	r2, #1918	; 0x77e
    7a48:	4213      	tst	r3, r2
    7a4a:	d107      	bne.n	7a5c <ll_rx_mem_release+0x44>
    7a4c:	061b      	lsls	r3, r3, #24
    7a4e:	d40a      	bmi.n	7a66 <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
    7a50:	4040      	eors	r0, r0
    7a52:	f380 8811 	msr	BASEPRI, r0
    7a56:	f04f 0004 	mov.w	r0, #4
    7a5a:	df02      	svc	2
			mem_release(_node_rx_free,
    7a5c:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    7a5e:	f7fa fe02 	bl	2666 <mem_release>
{
    7a62:	4640      	mov	r0, r8
    7a64:	e7e1      	b.n	7a2a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7a66:	88c2      	ldrh	r2, [r0, #6]
    7a68:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    7a6c:	f44f 7182 	mov.w	r1, #260	; 0x104
    7a70:	f7fa fe0e 	bl	2690 <mem_get>
			mem_release(conn, &_radio.conn_free);
    7a74:	4639      	mov	r1, r7
    7a76:	e7f2      	b.n	7a5e <ll_rx_mem_release+0x46>
    7a78:	200003a8 	.word	0x200003a8

00007a7c <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    7a7c:	4291      	cmp	r1, r2
{
    7a7e:	b510      	push	{r4, lr}
    7a80:	4b14      	ldr	r3, [pc, #80]	; (7ad4 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    7a82:	d119      	bne.n	7ab8 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7a84:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    7a88:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
    7a8c:	4294      	cmp	r4, r2
    7a8e:	d111      	bne.n	7ab4 <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    7a90:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    7a92:	bf14      	ite	ne
    7a94:	460a      	movne	r2, r1
    7a96:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    7a98:	3a01      	subs	r2, #1
    7a9a:	b2d2      	uxtb	r2, r2
    7a9c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    7aa0:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    7aa4:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
    7aa8:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
			if (req != _radio.fc_req) {
    7aac:	4291      	cmp	r1, r2
    7aae:	d00f      	beq.n	7ad0 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    7ab0:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179

				return 1;
			}
		} else {
			return 1;
    7ab4:	2001      	movs	r0, #1
    7ab6:	e005      	b.n	7ac4 <do_radio_rx_fc_set+0x48>
		}
	} else if (((req == 0) &&
    7ab8:	b929      	cbnz	r1, 7ac6 <do_radio_rx_fc_set+0x4a>
    7aba:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
				return 1;
    7abe:	1a18      	subs	r0, r3, r0
    7ac0:	bf18      	it	ne
    7ac2:	2001      	movne	r0, #1
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
    7ac4:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    7ac6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    7aca:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
    7ace:	e7f6      	b.n	7abe <do_radio_rx_fc_set+0x42>
	return 0;
    7ad0:	2000      	movs	r0, #0
    7ad2:	e7f7      	b.n	7ac4 <do_radio_rx_fc_set+0x48>
    7ad4:	20000280 	.word	0x20000280

00007ad8 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    7ad8:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    7ada:	4b14      	ldr	r3, [pc, #80]	; (7b2c <radio_rx_fc_set+0x54>)
    7adc:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
{
    7ae0:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    7ae2:	b302      	cbz	r2, 7b26 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    7ae4:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
    7ae8:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    7aea:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179

		if (fc) {
    7aee:	b135      	cbz	r5, 7afe <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    7af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7af4:	4298      	cmp	r0, r3
    7af6:	d016      	beq.n	7b26 <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    7af8:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    7afa:	f7ff bfbf 	b.w	7a7c <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7afe:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    7b02:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    7b06:	42a0      	cmp	r0, r4
    7b08:	d10d      	bne.n	7b26 <radio_rx_fc_set+0x4e>
    7b0a:	4291      	cmp	r1, r2
    7b0c:	d00b      	beq.n	7b26 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7b0e:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
    7b12:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7b16:	42a0      	cmp	r0, r4
    7b18:	d005      	beq.n	7b26 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    7b1a:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7b1e:	4288      	cmp	r0, r1
				_radio.fc_ack = ack;
    7b20:	bf08      	it	eq
    7b22:	f883 2179 	strbeq.w	r2, [r3, #377]	; 0x179
}
    7b26:	2000      	movs	r0, #0
    7b28:	bc30      	pop	{r4, r5}
    7b2a:	4770      	bx	lr
    7b2c:	20000280 	.word	0x20000280

00007b30 <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    7b30:	4770      	bx	lr
    7b32:	0000      	movs	r0, r0
    7b34:	0000      	movs	r0, r0
	...

00007b38 <radio_adv_enable>:
{
    7b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    7b3c:	4fa0      	ldr	r7, [pc, #640]	; (7dc0 <radio_adv_enable+0x288>)
{
    7b3e:	b08f      	sub	sp, #60	; 0x3c
    7b40:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7b42:	2302      	movs	r3, #2
    7b44:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    7b46:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    7b4a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    7b4e:	2b00      	cmp	r3, #0
{
    7b50:	4683      	mov	fp, r0
    7b52:	4688      	mov	r8, r1
    7b54:	463d      	mov	r5, r7
	if (_radio.advertiser.is_enabled) {
    7b56:	da01      	bge.n	7b5c <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    7b58:	200c      	movs	r0, #12
    7b5a:	e12a      	b.n	7db2 <radio_adv_enable+0x27a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7b5c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    7b60:	232a      	movs	r3, #42	; 0x2a
    7b62:	f04f 0927 	mov.w	r9, #39	; 0x27
    7b66:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7b6a:	f817 3009 	ldrb.w	r3, [r7, r9]
    7b6e:	f003 030f 	and.w	r3, r3, #15
    7b72:	2b01      	cmp	r3, #1
    7b74:	f200 80d6 	bhi.w	7d24 <radio_adv_enable+0x1ec>
		if (_radio.advertiser.conn) {
    7b78:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
    7b7c:	2e00      	cmp	r6, #0
    7b7e:	d1eb      	bne.n	7b58 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    7b80:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    7b84:	f7fa fd56 	bl	2634 <mem_acquire>
		if (!link) {
    7b88:	900a      	str	r0, [sp, #40]	; 0x28
    7b8a:	b158      	cbz	r0, 7ba4 <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    7b8c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    7b90:	f7fa fd50 	bl	2634 <mem_acquire>
		if (!conn) {
    7b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7b96:	4604      	mov	r4, r0
    7b98:	b930      	cbnz	r0, 7ba8 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
    7b9a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
    7b9e:	4610      	mov	r0, r2
    7ba0:	f7fa fd61 	bl	2666 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    7ba4:	2007      	movs	r0, #7
    7ba6:	e104      	b.n	7db2 <radio_adv_enable+0x27a>
		conn->handle = 0xFFFF;
    7ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7bac:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    7bae:	4b85      	ldr	r3, [pc, #532]	; (7dc4 <radio_adv_enable+0x28c>)
    7bb0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    7bb4:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    7bb6:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    7bb8:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    7bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7bc0:	7743      	strb	r3, [r0, #29]
		conn->latency_event = 0;
    7bc2:	2306      	movs	r3, #6
    7bc4:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    7bc6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    7bca:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    7bcc:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    7bd0:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    7bd4:	f366 0341 	bfi	r3, r6, #1, #1
    7bd8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    7bdc:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    7be0:	6286      	str	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    7be2:	f366 0300 	bfi	r3, r6, #0, #1
		conn->pkt_tx_head = NULL;
    7be6:	e9c0 663b 	strd	r6, r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl_last = NULL;
    7bea:	e9c0 663d 	strd	r6, r6, [r0, #244]	; 0xf4
		conn->llcp_version.rx = 0;
    7bee:	f366 0341 	bfi	r3, r6, #1, #1
		conn->slave.window_widening_event_us = 0;
    7bf2:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
		conn->supervision_expire = 0;
    7bf6:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    7bf8:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->slave.ticks_to_offset = 0;
    7bfa:	6586      	str	r6, [r0, #88]	; 0x58
    7bfc:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
		conn->llcp_version.rx = 0;
    7c00:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    7c04:	f8a0 6098 	strh.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.reason_peer = 0;
    7c08:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7c0c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->sn = 0;
    7c10:	f880 60a8 	strb.w	r6, [r0, #168]	; 0xa8
		conn->pkt_tx_data = NULL;
    7c14:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->pkt_tx_last = NULL;
    7c18:	f8a0 6100 	strh.w	r6, [r0, #256]	; 0x100
		_radio.advertiser.conn = conn;
    7c1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    7c20:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    7c22:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    7c26:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    7c2a:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
    7c2e:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    7c32:	f36a 1387 	bfi	r3, sl, #6, #2
    7c36:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    7c3a:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    7c3e:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    7c40:	2327      	movs	r3, #39	; 0x27
    7c42:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7c44:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    7c46:	2300      	movs	r3, #0
    7c48:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    7c4a:	f7fa fe89 	bl	2960 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7c4e:	f817 6009 	ldrb.w	r6, [r7, r9]
    7c52:	f006 060f 	and.w	r6, r6, #15
    7c56:	2e01      	cmp	r6, #1
    7c58:	d166      	bne.n	7d28 <radio_adv_enable+0x1f0>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    7c5a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    7c5e:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    7c60:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7c64:	4958      	ldr	r1, [pc, #352]	; (7dc8 <radio_adv_enable+0x290>)
    7c66:	a354      	add	r3, pc, #336	; (adr r3, 7db8 <radio_adv_enable+0x280>)
    7c68:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c6c:	fba0 0101 	umull	r0, r1, r0, r1
    7c70:	f7f8 fafa 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    7c74:	e9d5 3706 	ldrd	r3, r7, [r5, #24]
    7c78:	429f      	cmp	r7, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    7c7a:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    7c7c:	bf38      	it	cc
    7c7e:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    7c80:	f1b8 0f00 	cmp.w	r8, #0
    7c84:	d158      	bne.n	7d38 <radio_adv_enable+0x200>
    7c86:	1e72      	subs	r2, r6, #1
    7c88:	4253      	negs	r3, r2
    7c8a:	4153      	adcs	r3, r2
    7c8c:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    7c90:	f8df 9148 	ldr.w	r9, [pc, #328]	; 7ddc <radio_adv_enable+0x2a4>
    7c94:	f8df b148 	ldr.w	fp, [pc, #328]	; 7de0 <radio_adv_enable+0x2a8>
    7c98:	f363 1686 	bfi	r6, r3, #6, #1
    7c9c:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    7ca0:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    7ca4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    7ca8:	d04e      	beq.n	7d48 <radio_adv_enable+0x210>
		u32_t ticks_now = ticker_ticks_now_get();
    7caa:	f7fb fc73 	bl	3594 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		u32_t ticks_now = ticker_ticks_now_get();
    7cb0:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7cb2:	441f      	add	r7, r3
    7cb4:	2000      	movs	r0, #0
    7cb6:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    7cba:	e9cd b005 	strd	fp, r0, [sp, #20]
    7cbe:	e9cd 0703 	strd	r0, r7, [sp, #12]
    7cc2:	e9cd 7001 	strd	r7, r0, [sp, #4]
    7cc6:	9000      	str	r0, [sp, #0]
    7cc8:	4633      	mov	r3, r6
    7cca:	2205      	movs	r2, #5
    7ccc:	2103      	movs	r1, #3
    7cce:	f7fb fb05 	bl	32dc <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    7cd2:	2802      	cmp	r0, #2
    7cd4:	d034      	beq.n	7d40 <radio_adv_enable+0x208>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    7cd6:	980d      	ldr	r0, [sp, #52]	; 0x34
    7cd8:	b9b8      	cbnz	r0, 7d0a <radio_adv_enable+0x1d2>
		ret_cb = TICKER_STATUS_BUSY;
    7cda:	2302      	movs	r3, #2
    7cdc:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    7cde:	4b3b      	ldr	r3, [pc, #236]	; (7dcc <radio_adv_enable+0x294>)
    7ce0:	9006      	str	r0, [sp, #24]
    7ce2:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    7ce6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    7cea:	e9cd 0304 	strd	r0, r3, [sp, #16]
    7cee:	2203      	movs	r2, #3
    7cf0:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    7cf4:	9300      	str	r3, [sp, #0]
    7cf6:	9001      	str	r0, [sp, #4]
    7cf8:	4633      	mov	r3, r6
    7cfa:	4611      	mov	r1, r2
		ret =
    7cfc:	f7fb faee 	bl	32dc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    7d00:	2802      	cmp	r0, #2
    7d02:	d043      	beq.n	7d8c <radio_adv_enable+0x254>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    7d04:	980d      	ldr	r0, [sp, #52]	; 0x34
    7d06:	2800      	cmp	r0, #0
    7d08:	d044      	beq.n	7d94 <radio_adv_enable+0x25c>
	if (conn) {
    7d0a:	2c00      	cmp	r4, #0
    7d0c:	f43f af24 	beq.w	7b58 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    7d10:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    7d14:	492e      	ldr	r1, [pc, #184]	; (7dd0 <radio_adv_enable+0x298>)
    7d16:	f7fa fca6 	bl	2666 <mem_release>
		mem_release(conn, &_radio.conn_free);
    7d1a:	492e      	ldr	r1, [pc, #184]	; (7dd4 <radio_adv_enable+0x29c>)
    7d1c:	4620      	mov	r0, r4
    7d1e:	f7fa fca2 	bl	2666 <mem_release>
    7d22:	e719      	b.n	7b58 <radio_adv_enable+0x20>
		conn = NULL;
    7d24:	2400      	movs	r4, #0
    7d26:	e77b      	b.n	7c20 <radio_adv_enable+0xe8>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    7d28:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    7d2a:	bf0c      	ite	eq
    7d2c:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    7d30:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    7d34:	4358      	muls	r0, r3
    7d36:	e795      	b.n	7c64 <radio_adv_enable+0x12c>
	_radio.advertiser.is_hdcd = !interval &&
    7d38:	2300      	movs	r3, #0
    7d3a:	e7a7      	b.n	7c8c <radio_adv_enable+0x154>
				cpu_sleep();
    7d3c:	f7fc fa10 	bl	4160 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    7d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d42:	2b02      	cmp	r3, #2
    7d44:	d0fa      	beq.n	7d3c <radio_adv_enable+0x204>
    7d46:	e7c6      	b.n	7cd6 <radio_adv_enable+0x19e>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d48:	f7fb fc24 	bl	3594 <ticker_ticks_now_get>
		ret =
    7d4c:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    7d50:	e9cd b605 	strd	fp, r6, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d54:	900a      	str	r0, [sp, #40]	; 0x28
    7d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7d58:	481f      	ldr	r0, [pc, #124]	; (7dd8 <radio_adv_enable+0x2a0>)
		ret =
    7d5a:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7d5c:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d60:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7d62:	fba8 0100 	umull	r0, r1, r8, r0
    7d66:	2391      	movs	r3, #145	; 0x91
    7d68:	fb03 1108 	mla	r1, r3, r8, r1
    7d6c:	a312      	add	r3, pc, #72	; (adr r3, 7db8 <radio_adv_enable+0x280>)
    7d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    7d72:	e9cd 6703 	strd	r6, r7, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    7d76:	f7f8 fa77 	bl	268 <__aeabi_uldivmod>
		ret =
    7d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7d7c:	e9cd 6000 	strd	r6, r0, [sp]
    7d80:	2205      	movs	r2, #5
    7d82:	2103      	movs	r1, #3
    7d84:	4630      	mov	r0, r6
    7d86:	e7b9      	b.n	7cfc <radio_adv_enable+0x1c4>
			cpu_sleep();
    7d88:	f7fc f9ea 	bl	4160 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    7d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d8e:	2b02      	cmp	r3, #2
    7d90:	d0fa      	beq.n	7d88 <radio_adv_enable+0x250>
    7d92:	e7b7      	b.n	7d04 <radio_adv_enable+0x1cc>
		_radio.advertiser.is_enabled = 1;
    7d94:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    7d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7d9c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    7da0:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    7da4:	f013 0401 	ands.w	r4, r3, #1
    7da8:	d103      	bne.n	7db2 <radio_adv_enable+0x27a>
			ll_adv_scan_state_cb(BIT(0));
    7daa:	2001      	movs	r0, #1
    7dac:	f7ff fec0 	bl	7b30 <ll_adv_scan_state_cb>
		return 0;
    7db0:	4620      	mov	r0, r4
}
    7db2:	b00f      	add	sp, #60	; 0x3c
    7db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7db8:	1afd498d 	.word	0x1afd498d
    7dbc:	00000007 	.word	0x00000007
    7dc0:	20000280 	.word	0x20000280
    7dc4:	0001400c 	.word	0x0001400c
    7dc8:	3b9aca00 	.word	0x3b9aca00
    7dcc:	000051e9 	.word	0x000051e9
    7dd0:	200003c0 	.word	0x200003c0
    7dd4:	2000038c 	.word	0x2000038c
    7dd8:	84e72a00 	.word	0x84e72a00
    7ddc:	000041a5 	.word	0x000041a5
    7de0:	000051b1 	.word	0x000051b1

00007de4 <radio_adv_disable>:
{
    7de4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    7de6:	2103      	movs	r1, #3
    7de8:	2005      	movs	r0, #5
    7dea:	f7fc fab5 	bl	4358 <role_disable>
	if (!status) {
    7dee:	4605      	mov	r5, r0
    7df0:	b9e8      	cbnz	r0, 7e2e <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    7df2:	4c10      	ldr	r4, [pc, #64]	; (7e34 <radio_adv_disable+0x50>)
    7df4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    7df8:	f360 12c7 	bfi	r2, r0, #7, #1
    7dfc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    7e00:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    7e04:	07d3      	lsls	r3, r2, #31
    7e06:	d401      	bmi.n	7e0c <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    7e08:	f7ff fe92 	bl	7b30 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    7e0c:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
    7e10:	b15e      	cbz	r6, 7e2a <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    7e12:	2300      	movs	r3, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    7e14:	4908      	ldr	r1, [pc, #32]	; (7e38 <radio_adv_disable+0x54>)
    7e16:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
			_radio.advertiser.conn = NULL;
    7e1a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    7e1e:	f7fa fc22 	bl	2666 <mem_release>
			mem_release(conn, &_radio.conn_free);
    7e22:	4906      	ldr	r1, [pc, #24]	; (7e3c <radio_adv_disable+0x58>)
    7e24:	4630      	mov	r0, r6
    7e26:	f7fa fc1e 	bl	2666 <mem_release>
}
    7e2a:	4628      	mov	r0, r5
    7e2c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    7e2e:	250c      	movs	r5, #12
    7e30:	e7fb      	b.n	7e2a <radio_adv_disable+0x46>
    7e32:	bf00      	nop
    7e34:	20000280 	.word	0x20000280
    7e38:	200003c0 	.word	0x200003c0
    7e3c:	2000038c 	.word	0x2000038c

00007e40 <ll_rx_dequeue>:
{
    7e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    7e42:	4d34      	ldr	r5, [pc, #208]	; (7f14 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    7e44:	aa02      	add	r2, sp, #8
    7e46:	2300      	movs	r3, #0
    7e48:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    7e4c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
    7e50:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    7e54:	f7fa fc45 	bl	26e2 <memq_dequeue>
    7e58:	462c      	mov	r4, r5
	LL_ASSERT(link);
    7e5a:	b928      	cbnz	r0, 7e68 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    7e5c:	4040      	eors	r0, r0
    7e5e:	f380 8811 	msr	BASEPRI, r0
    7e62:	f04f 0004 	mov.w	r0, #4
    7e66:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    7e68:	f505 71a0 	add.w	r1, r5, #320	; 0x140
    7e6c:	f7fa fbfb 	bl	2666 <mem_release>
	switch (node_rx->hdr.type) {
    7e70:	9a01      	ldr	r2, [sp, #4]
    7e72:	7911      	ldrb	r1, [r2, #4]
    7e74:	290a      	cmp	r1, #10
    7e76:	d8f1      	bhi.n	7e5c <ll_rx_dequeue+0x1c>
    7e78:	2301      	movs	r3, #1
    7e7a:	408b      	lsls	r3, r1
    7e7c:	f240 707e 	movw	r0, #1918	; 0x77e
    7e80:	4203      	tst	r3, r0
    7e82:	d111      	bne.n	7ea8 <ll_rx_dequeue+0x68>
    7e84:	0618      	lsls	r0, r3, #24
    7e86:	d5e9      	bpl.n	7e5c <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    7e88:	2906      	cmp	r1, #6
    7e8a:	d135      	bne.n	7ef8 <ll_rx_dequeue+0xb8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    7e8c:	7ad3      	ldrb	r3, [r2, #11]
    7e8e:	2b3c      	cmp	r3, #60	; 0x3c
    7e90:	d015      	beq.n	7ebe <ll_rx_dequeue+0x7e>
    7e92:	7b12      	ldrb	r2, [r2, #12]
    7e94:	bb92      	cbnz	r2, 7efc <ll_rx_dequeue+0xbc>
			LL_ASSERT(_radio.scanner.is_enabled);
    7e96:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    7e9a:	07d9      	lsls	r1, r3, #31
    7e9c:	d5de      	bpl.n	7e5c <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    7e9e:	f362 0300 	bfi	r3, r2, #0, #1
    7ea2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    7ea6:	e01a      	b.n	7ede <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    7ea8:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
    7eac:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    7eb0:	3801      	subs	r0, #1
    7eb2:	4283      	cmp	r3, r0
    7eb4:	dad2      	bge.n	7e5c <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    7eb6:	3301      	adds	r3, #1
    7eb8:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
		break;
    7ebc:	e7e4      	b.n	7e88 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    7ebe:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    7ec0:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    7ec4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    7ec8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    7ecc:	2b00      	cmp	r3, #0
    7ece:	dac5      	bge.n	7e5c <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    7ed0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    7ed4:	f36f 13c7 	bfc	r3, #7, #1
    7ed8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    7edc:	b985      	cbnz	r5, 7f00 <ll_rx_dequeue+0xc0>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    7ede:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    7ee2:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
    7ee6:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    7eea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		if (!bm) {
    7eee:	ea50 0043 	orrs.w	r0, r0, r3, lsl #1
    7ef2:	d101      	bne.n	7ef8 <ll_rx_dequeue+0xb8>
			ll_adv_scan_state_cb(0);
    7ef4:	f7ff fe1c 	bl	7b30 <ll_adv_scan_state_cb>
}
    7ef8:	b003      	add	sp, #12
    7efa:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    7efc:	2500      	movs	r5, #0
    7efe:	e7e3      	b.n	7ec8 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    7f00:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    7f04:	4904      	ldr	r1, [pc, #16]	; (7f18 <ll_rx_dequeue+0xd8>)
    7f06:	f7fa fbae 	bl	2666 <mem_release>
			mem_release(conn, &_radio.conn_free);
    7f0a:	4904      	ldr	r1, [pc, #16]	; (7f1c <ll_rx_dequeue+0xdc>)
    7f0c:	4628      	mov	r0, r5
    7f0e:	f7fa fbaa 	bl	2666 <mem_release>
    7f12:	e7e4      	b.n	7ede <ll_rx_dequeue+0x9e>
    7f14:	20000280 	.word	0x20000280
    7f18:	200003c0 	.word	0x200003c0
    7f1c:	2000038c 	.word	0x2000038c

00007f20 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    7f20:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    7f22:	4c0b      	ldr	r4, [pc, #44]	; (7f50 <rtc0_nrf5_isr+0x30>)
    7f24:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    7f28:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    7f2c:	b122      	cbz	r2, 7f38 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    7f2e:	2000      	movs	r0, #0
    7f30:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    7f34:	f7fb f9c0 	bl	32b8 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    7f38:	b12d      	cbz	r5, 7f46 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    7f3a:	2300      	movs	r3, #0
    7f3c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    7f40:	2001      	movs	r0, #1
    7f42:	f7fb f9b9 	bl	32b8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    7f46:	2000      	movs	r0, #0
}
    7f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    7f4c:	f7fa bc76 	b.w	283c <mayfly_run>
    7f50:	4000b000 	.word	0x4000b000

00007f54 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    7f54:	2001      	movs	r0, #1
    7f56:	f7fa bc71 	b.w	283c <mayfly_run>

00007f5a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    7f5a:	4668      	mov	r0, sp
    7f5c:	f020 0107 	bic.w	r1, r0, #7
    7f60:	468d      	mov	sp, r1
    7f62:	b501      	push	{r0, lr}
	isr_radio();
    7f64:	f000 fc3c 	bl	87e0 <isr_radio>
	ISR_DIRECT_PM();
    7f68:	f7f8 fe5e 	bl	c28 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    7f6c:	f7f8 fc3c 	bl	7e8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    7f70:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    7f74:	4685      	mov	sp, r0
    7f76:	4770      	bx	lr

00007f78 <radio_active_callback>:
}
    7f78:	4770      	bx	lr
	...

00007f7c <radio_event_callback>:
	k_sem_give(sem_recv);
    7f7c:	4b01      	ldr	r3, [pc, #4]	; (7f84 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7f7e:	6818      	ldr	r0, [r3, #0]
    7f80:	f001 bd52 	b.w	9a28 <_impl_k_sem_give>
    7f84:	20000a24 	.word	0x20000a24

00007f88 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    7f88:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    7f8a:	4b38      	ldr	r3, [pc, #224]	; (806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>)
{
    7f8c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    7f8e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    7f90:	4837      	ldr	r0, [pc, #220]	; (8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>)
    7f92:	f001 f955 	bl	9240 <device_get_binding>
	if (!clk_k32) {
    7f96:	b918      	cbnz	r0, 7fa0 <ll_init+0x18>
		return -ENODEV;
    7f98:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    7f9c:	b006      	add	sp, #24
    7f9e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    7fa0:	6843      	ldr	r3, [r0, #4]
    7fa2:	2101      	movs	r1, #1
    7fa4:	681b      	ldr	r3, [r3, #0]
    7fa6:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    7fa8:	4832      	ldr	r0, [pc, #200]	; (8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>)
    7faa:	f001 f949 	bl	9240 <device_get_binding>
	if (!entropy) {
    7fae:	4604      	mov	r4, r0
    7fb0:	2800      	cmp	r0, #0
    7fb2:	d0f1      	beq.n	7f98 <ll_init+0x10>
	cntr_init();
    7fb4:	f000 fb0e 	bl	85d4 <cntr_init>
	mayfly_init();
    7fb8:	f7fa fba0 	bl	26fc <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    7fbc:	4b2e      	ldr	r3, [pc, #184]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    7fbe:	2208      	movs	r2, #8
    7fc0:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    7fc2:	2203      	movs	r2, #3
    7fc4:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    7fc6:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fc8:	4a2c      	ldr	r2, [pc, #176]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    7fca:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    7fcc:	2502      	movs	r5, #2
    7fce:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fd0:	9205      	str	r2, [sp, #20]
    7fd2:	4a2b      	ldr	r2, [pc, #172]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
    7fd4:	9204      	str	r2, [sp, #16]
    7fd6:	4a2b      	ldr	r2, [pc, #172]	; (8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>)
    7fd8:	9203      	str	r2, [sp, #12]
    7fda:	4a2b      	ldr	r2, [pc, #172]	; (8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>)
    7fdc:	9202      	str	r2, [sp, #8]
    7fde:	220d      	movs	r2, #13
    7fe0:	e9cd 3200 	strd	r3, r2, [sp]
    7fe4:	2107      	movs	r1, #7
    7fe6:	2304      	movs	r3, #4
    7fe8:	4a28      	ldr	r2, [pc, #160]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    7fea:	f7fb f929 	bl	3240 <ticker_init>
	LL_ASSERT(!err);
    7fee:	4606      	mov	r6, r0
    7ff0:	b128      	cbz	r0, 7ffe <ll_init+0x76>
    7ff2:	4040      	eors	r0, r0
    7ff4:	f380 8811 	msr	BASEPRI, r0
    7ff8:	f04f 0004 	mov.w	r0, #4
    7ffc:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    7ffe:	4824      	ldr	r0, [pc, #144]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    8000:	f001 f91e 	bl	9240 <device_get_binding>
	if (!clk_m16) {
    8004:	2800      	cmp	r0, #0
    8006:	d0c7      	beq.n	7f98 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    8008:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    800c:	9305      	str	r3, [sp, #20]
    800e:	4b21      	ldr	r3, [pc, #132]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    8010:	9304      	str	r3, [sp, #16]
    8012:	9501      	str	r5, [sp, #4]
    8014:	231b      	movs	r3, #27
    8016:	2501      	movs	r5, #1
    8018:	e9cd 3302 	strd	r3, r3, [sp, #8]
    801c:	4622      	mov	r2, r4
    801e:	9500      	str	r5, [sp, #0]
    8020:	4633      	mov	r3, r6
    8022:	2107      	movs	r1, #7
    8024:	f7ff fbaa 	bl	777c <radio_init>
	if (err) {
    8028:	4604      	mov	r4, r0
    802a:	b9e0      	cbnz	r0, 8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
	ll_filter_reset(true);
    802c:	4628      	mov	r0, r5
    802e:	f000 fac5 	bl	85bc <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8032:	4622      	mov	r2, r4
    8034:	4621      	mov	r1, r4
    8036:	4628      	mov	r0, r5
    8038:	f7f8 fddc 	bl	bf4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    803c:	4622      	mov	r2, r4
    803e:	4621      	mov	r1, r4
    8040:	200b      	movs	r0, #11
    8042:	f7f8 fdd7 	bl	bf4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    8046:	4622      	mov	r2, r4
    8048:	4621      	mov	r1, r4
    804a:	2018      	movs	r0, #24
    804c:	f7f8 fdd2 	bl	bf4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    8050:	4628      	mov	r0, r5
    8052:	f7f8 fd9d 	bl	b90 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8056:	200b      	movs	r0, #11
    8058:	f7f8 fd9a 	bl	b90 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    805c:	2018      	movs	r0, #24
    805e:	f7f8 fd97 	bl	b90 <_arch_irq_enable>
	return 0;
    8062:	4620      	mov	r0, r4
    8064:	e79a      	b.n	7f9c <ll_init+0x14>
		return -ENOMEM;
    8066:	f06f 000b 	mvn.w	r0, #11
    806a:	e797      	b.n	7f9c <ll_init+0x14>
    806c:	20000a24 	.word	0x20000a24
    8070:	0000a844 	.word	0x0000a844
    8074:	0000a818 	.word	0x0000a818
    8078:	20000a04 	.word	0x20000a04
    807c:	00009009 	.word	0x00009009
    8080:	00008f91 	.word	0x00008f91
    8084:	00008f71 	.word	0x00008f71
    8088:	20000794 	.word	0x20000794
    808c:	2000067c 	.word	0x2000067c
    8090:	0000a84f 	.word	0x0000a84f
    8094:	2000048c 	.word	0x2000048c

00008098 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    809c:	b085      	sub	sp, #20
    809e:	4699      	mov	r9, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    80a0:	4b73      	ldr	r3, [pc, #460]	; (8270 <ll_adv_params_set+0x1d8>)
    80a2:	9302      	str	r3, [sp, #8]
    80a4:	f240 7301 	movw	r3, #1793	; 0x701
{
    80a8:	460d      	mov	r5, r1
    80aa:	4614      	mov	r4, r2
    80ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
    80ae:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    80b2:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    80b6:	f7ff fc35 	bl	7924 <ll_adv_is_enabled>
    80ba:	4680      	mov	r8, r0
    80bc:	2800      	cmp	r0, #0
    80be:	f040 80d1 	bne.w	8264 <ll_adv_params_set+0x1cc>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    80c2:	496c      	ldr	r1, [pc, #432]	; (8274 <ll_adv_params_set+0x1dc>)
    80c4:	780b      	ldrb	r3, [r1, #0]
    80c6:	2201      	movs	r2, #1
    80c8:	f362 1347 	bfi	r3, r2, #5, #3

	/* extended */
	if (adv_type > 0x04) {
    80cc:	f1b9 0f04 	cmp.w	r9, #4
	ll_adv.phy_p = BIT(0);
    80d0:	700b      	strb	r3, [r1, #0]
	if (adv_type > 0x04) {
    80d2:	d90b      	bls.n	80ec <ll_adv_params_set+0x54>
		/* legacy */
		if (evt_prop & BIT(4)) {
    80d4:	06e8      	lsls	r0, r5, #27
    80d6:	f005 0303 	and.w	r3, r5, #3
    80da:	d50f      	bpl.n	80fc <ll_adv_params_set+0x64>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    80dc:	4a66      	ldr	r2, [pc, #408]	; (8278 <ll_adv_params_set+0x1e0>)
    80de:	9201      	str	r2, [sp, #4]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    80e0:	072a      	lsls	r2, r5, #28
    80e2:	d406      	bmi.n	80f2 <ll_adv_params_set+0x5a>
			adv_type = leg_adv_type[evt_prop & 0x03];
    80e4:	aa04      	add	r2, sp, #16
    80e6:	4413      	add	r3, r2
    80e8:	f813 9c0c 	ldrb.w	r9, [r3, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
    80ec:	f1b9 0f01 	cmp.w	r9, #1
    80f0:	d112      	bne.n	8118 <ll_adv_params_set+0x80>
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    80f2:	2300      	movs	r3, #0
    80f4:	604b      	str	r3, [r1, #4]
    80f6:	f04f 0901 	mov.w	r9, #1
    80fa:	e00e      	b.n	811a <ll_adv_params_set+0x82>
			if (((evt_prop & 0x03) == 0x03) ||
    80fc:	2b03      	cmp	r3, #3
    80fe:	f000 80b4 	beq.w	826a <ll_adv_params_set+0x1d2>
    8102:	f005 030c 	and.w	r3, r5, #12
    8106:	2b0c      	cmp	r3, #12
    8108:	f000 80af 	beq.w	826a <ll_adv_params_set+0x1d2>
			ll_adv.phy_p = phy_p;
    810c:	780b      	ldrb	r3, [r1, #0]
    810e:	f367 1347 	bfi	r3, r7, #5, #3
    8112:	700b      	strb	r3, [r1, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    8114:	f04f 0905 	mov.w	r9, #5
		ll_adv.interval = interval;
    8118:	604c      	str	r4, [r1, #4]
	}
	ll_adv.chan_map = chan_map;
    811a:	780b      	ldrb	r3, [r1, #0]
    811c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    8120:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
    8124:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    8128:	f362 03c4 	bfi	r3, r2, #3, #2
    812c:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    812e:	f7ff fbf1 	bl	7914 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8132:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    8136:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    813a:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    813e:	ab04      	add	r3, sp, #16
    8140:	4499      	add	r9, r3
    8142:	5c83      	ldrb	r3, [r0, r2]
    8144:	f819 1c08 	ldrb.w	r1, [r9, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    8148:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
    814c:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    8150:	f36f 1304 	bfc	r3, #4, #1
    8154:	5483      	strb	r3, [r0, r2]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    8156:	b2db      	uxtb	r3, r3
    8158:	f003 010f 	and.w	r1, r3, #15
    815c:	2901      	cmp	r1, #1
		pdu->chan_sel = 1;
    815e:	bf94      	ite	ls
    8160:	f043 0320 	orrls.w	r3, r3, #32
		pdu->chan_sel = 0;
    8164:	f36f 1345 	bfchi	r3, #5, #1
    8168:	5483      	strb	r3, [r0, r2]
	pdu->tx_addr = own_addr_type & 0x1;
    816a:	5c83      	ldrb	r3, [r0, r2]
    816c:	f009 0901 	and.w	r9, r9, #1
    8170:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    8174:	f36f 13c7 	bfc	r3, #7, #1
    8178:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    817a:	b2db      	uxtb	r3, r3
    817c:	f003 010f 	and.w	r1, r3, #15
    8180:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8182:	eb00 0402 	add.w	r4, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8186:	d10d      	bne.n	81a4 <ll_adv_params_set+0x10c>
		pdu->rx_addr = direct_addr_type;
    8188:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    818c:	f361 13c7 	bfi	r3, r1, #7, #1
    8190:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    8192:	990e      	ldr	r1, [sp, #56]	; 0x38
    8194:	2206      	movs	r2, #6
    8196:	f104 0008 	add.w	r0, r4, #8
    819a:	f7f8 fa20 	bl	5de <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    819e:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    81a0:	7063      	strb	r3, [r4, #1]
    81a2:	e03c      	b.n	821e <ll_adv_params_set+0x186>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    81a4:	2907      	cmp	r1, #7
    81a6:	d158      	bne.n	825a <ll_adv_params_set+0x1c2>
		p->ext_hdr_len = 0;
    81a8:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
    81aa:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    81ae:	f365 1187 	bfi	r1, r5, #6, #2
    81b2:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    81b4:	06a8      	lsls	r0, r5, #26
		*(u8_t *)h = 0;
    81b6:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    81ba:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    81be:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
    81c2:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    81c4:	d409      	bmi.n	81da <ll_adv_params_set+0x142>
    81c6:	78a1      	ldrb	r1, [r4, #2]
    81c8:	f011 0fc0 	tst.w	r1, #192	; 0xc0
    81cc:	d105      	bne.n	81da <ll_adv_params_set+0x142>
    81ce:	2f04      	cmp	r7, #4
			h->adv_addr = 1;
    81d0:	bf1e      	ittt	ne
    81d2:	2201      	movne	r2, #1
    81d4:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    81d6:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
    81da:	0669      	lsls	r1, r5, #25
			h->tx_pwr = 1;
    81dc:	bf44      	itt	mi
    81de:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
    81e0:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
    81e2:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
    81e6:	bf48      	it	mi
    81e8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
    81ec:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
    81ee:	bf48      	it	mi
    81f0:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    81f2:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    81f4:	bf8a      	itet	hi
    81f6:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    81f8:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    81fa:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    81fe:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    8200:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    8202:	bf84      	itt	hi
    8204:	f360 0105 	bfihi	r1, r0, #0, #6
    8208:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
    820a:	065b      	lsls	r3, r3, #25
    820c:	d507      	bpl.n	821e <ll_adv_params_set+0x186>
			if (tx_pwr) {
    820e:	b316      	cbz	r6, 8256 <ll_adv_params_set+0x1be>
				if (*tx_pwr != 0x7F) {
    8210:	7833      	ldrb	r3, [r6, #0]
    8212:	2b7f      	cmp	r3, #127	; 0x7f
    8214:	d101      	bne.n	821a <ll_adv_params_set+0x182>
					*tx_pwr = _tx_pwr;
    8216:	2300      	movs	r3, #0
    8218:	7033      	strb	r3, [r6, #0]
			*ptr = _tx_pwr;
    821a:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    821e:	f7ff fb7d 	bl	791c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8222:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    8226:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    822a:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    822e:	2404      	movs	r4, #4
    8230:	5c83      	ldrb	r3, [r0, r2]
    8232:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    8236:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    823a:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    823e:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8242:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    8244:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    8246:	784b      	ldrb	r3, [r1, #1]
    8248:	b90b      	cbnz	r3, 824e <ll_adv_params_set+0x1b6>
		pdu->len = BDADDR_SIZE;
    824a:	2306      	movs	r3, #6
    824c:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    824e:	4640      	mov	r0, r8
    8250:	b005      	add	sp, #20
    8252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_tx_pwr = 0;
    8256:	4633      	mov	r3, r6
    8258:	e7df      	b.n	821a <ll_adv_params_set+0x182>
	} else if (pdu->len == 0) {
    825a:	7863      	ldrb	r3, [r4, #1]
    825c:	2b00      	cmp	r3, #0
    825e:	d1de      	bne.n	821e <ll_adv_params_set+0x186>
		pdu->len = BDADDR_SIZE;
    8260:	2306      	movs	r3, #6
    8262:	e79d      	b.n	81a0 <ll_adv_params_set+0x108>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8264:	f04f 080c 	mov.w	r8, #12
    8268:	e7f1      	b.n	824e <ll_adv_params_set+0x1b6>
				return 0x12; /* invalid HCI cmd param */
    826a:	f04f 0812 	mov.w	r8, #18
    826e:	e7ee      	b.n	824e <ll_adv_params_set+0x1b6>
    8270:	02060100 	.word	0x02060100
    8274:	20000a28 	.word	0x20000a28
    8278:	00020403 	.word	0x00020403

0000827c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8280:	460f      	mov	r7, r1
    8282:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    8284:	f7ff fb46 	bl	7914 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8288:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    828c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    8290:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
    8294:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    8296:	f810 c002 	ldrb.w	ip, [r0, r2]
    829a:	f00c 030f 	and.w	r3, ip, #15
    829e:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    82a0:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    82a4:	d040      	beq.n	8328 <ll_adv_data_set+0xac>
    82a6:	2b07      	cmp	r3, #7
    82a8:	d03e      	beq.n	8328 <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    82aa:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
    82ae:	42ab      	cmp	r3, r5
    82b0:	d104      	bne.n	82bc <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
    82b2:	3501      	adds	r5, #1
    82b4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    82b6:	2d02      	cmp	r5, #2
    82b8:	bf08      	it	eq
    82ba:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    82bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    82c0:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
    82c4:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
    82c8:	5ce0      	ldrb	r0, [r4, r3]
    82ca:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
    82ce:	f36f 1004 	bfc	r0, #4, #1
    82d2:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    82d4:	5ca0      	ldrb	r0, [r4, r2]
    82d6:	f814 c003 	ldrb.w	ip, [r4, r3]
    82da:	f3c0 1040 	ubfx	r0, r0, #5, #1
    82de:	f360 1c45 	bfi	ip, r0, #5, #1
    82e2:	f804 c003 	strb.w	ip, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    82e6:	5ca0      	ldrb	r0, [r4, r2]
    82e8:	fa5f fc8c 	uxtb.w	ip, ip
    82ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
    82f0:	f360 1c86 	bfi	ip, r0, #6, #1
    82f4:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
    82f8:	5ca2      	ldrb	r2, [r4, r2]
    82fa:	fa5f f08c 	uxtb.w	r0, ip
    82fe:	09d2      	lsrs	r2, r2, #7
    8300:	f362 10c7 	bfi	r0, r2, #7, #1
    8304:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    8306:	2206      	movs	r2, #6
    8308:	3102      	adds	r1, #2
    830a:	f108 0002 	add.w	r0, r8, #2
    830e:	f7f8 f966 	bl	5de <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    8312:	4632      	mov	r2, r6
    8314:	4639      	mov	r1, r7
    8316:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    831a:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    831c:	f7f8 f95f 	bl	5de <memcpy>
	pdu->len = BDADDR_SIZE + len;
    8320:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    8324:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
    8328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000832c <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8330:	4606      	mov	r6, r0
    8332:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    8334:	f7ff faf2 	bl	791c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    8338:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    833c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    8340:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    8342:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    8344:	d136      	bne.n	83b4 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
    8346:	1c5d      	adds	r5, r3, #1
    8348:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    834a:	2d02      	cmp	r5, #2
			last = 0;
    834c:	bf08      	it	eq
    834e:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    8350:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8354:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    8358:	b22b      	sxth	r3, r5
    835a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    835e:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8362:	f04f 0c04 	mov.w	ip, #4
    8366:	5ce0      	ldrb	r0, [r4, r3]
    8368:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    836c:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    8370:	f36f 1045 	bfc	r0, #5, #1
    8374:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
    8376:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    8378:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
    837a:	5ce2      	ldrb	r2, [r4, r3]
    837c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8380:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    8384:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
    8388:	f36f 12c7 	bfc	r2, #7, #1
    838c:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
    838e:	1db3      	adds	r3, r6, #6
    8390:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    8394:	2206      	movs	r2, #6
    8396:	3102      	adds	r1, #2
    8398:	f108 0002 	add.w	r0, r8, #2
    839c:	f7f8 f91f 	bl	5de <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    83a0:	4632      	mov	r2, r6
    83a2:	4639      	mov	r1, r7
    83a4:	f108 0008 	add.w	r0, r8, #8
    83a8:	f7f8 f919 	bl	5de <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    83ac:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
    83b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83b4:	461d      	mov	r5, r3
    83b6:	e7cb      	b.n	8350 <ll_scan_data_set+0x24>

000083b8 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    83b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    83bc:	b920      	cbnz	r0, 83c8 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    83be:	b003      	add	sp, #12
    83c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    83c4:	f7ff bd0e 	b.w	7de4 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    83c8:	f7ff faac 	bl	7924 <ll_adv_is_enabled>
    83cc:	4607      	mov	r7, r0
    83ce:	2800      	cmp	r0, #0
    83d0:	d14e      	bne.n	8470 <ll_adv_enable+0xb8>
	radio_adv_data = radio_adv_data_get();
    83d2:	f7ff fa9f 	bl	7914 <radio_adv_data_get>
    83d6:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    83d8:	f7ff faa0 	bl	791c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    83dc:	f898 404f 	ldrb.w	r4, [r8, #79]	; 0x4f
    83e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    83e4:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	radio_scan_data = radio_scan_data_get();
    83e8:	4606      	mov	r6, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    83ea:	f818 0004 	ldrb.w	r0, [r8, r4]
    83ee:	f000 030f 	and.w	r3, r0, #15
    83f2:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    83f4:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    83f8:	d11d      	bne.n	8436 <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    83fa:	f899 3003 	ldrb.w	r3, [r9, #3]
    83fe:	07db      	lsls	r3, r3, #31
    8400:	d50a      	bpl.n	8418 <ll_adv_enable+0x60>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    8402:	4639      	mov	r1, r7
    8404:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8408:	f7fb f8ca 	bl	35a0 <ll_addr_get>
    840c:	2206      	movs	r2, #6
    840e:	4601      	mov	r1, r0
    8410:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    8414:	f7f8 f8e3 	bl	5de <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    8418:	4b16      	ldr	r3, [pc, #88]	; (8474 <ll_adv_enable+0xbc>)
    841a:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    841c:	8899      	ldrh	r1, [r3, #4]
    841e:	23ff      	movs	r3, #255	; 0xff
    8420:	9300      	str	r3, [sp, #0]
    8422:	f000 0207 	and.w	r2, r0, #7
    8426:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    842a:	0940      	lsrs	r0, r0, #5
    842c:	f7ff fb84 	bl	7b38 <radio_adv_enable>
}
    8430:	b003      	add	sp, #12
    8432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    8436:	4639      	mov	r1, r7
    8438:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    843c:	f896 504f 	ldrb.w	r5, [r6, #79]	; 0x4f
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    8440:	f7fb f8ae 	bl	35a0 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    8444:	2206      	movs	r2, #6
    8446:	4601      	mov	r1, r0
    8448:	f109 0002 	add.w	r0, r9, #2
    844c:	f7f8 f8c7 	bl	5de <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    8450:	f818 0004 	ldrb.w	r0, [r8, r4]
    8454:	4639      	mov	r1, r7
    8456:	f3c0 1080 	ubfx	r0, r0, #6, #1
    845a:	f7fb f8a1 	bl	35a0 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    845e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    8462:	ebc5 05c3 	rsb	r5, r5, r3, lsl #3
    8466:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    8468:	4601      	mov	r1, r0
    846a:	2206      	movs	r2, #6
    846c:	1ca8      	adds	r0, r5, #2
    846e:	e7d1      	b.n	8414 <ll_adv_enable+0x5c>
		return 0;
    8470:	2000      	movs	r0, #0
    8472:	e7dd      	b.n	8430 <ll_adv_enable+0x78>
    8474:	20000a28 	.word	0x20000a28

00008478 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    8478:	b928      	cbnz	r0, 8486 <ctrl_filter_get+0xe>
    847a:	4040      	eors	r0, r0
    847c:	f380 8811 	msr	BASEPRI, r0
    8480:	f04f 0004 	mov.w	r0, #4
    8484:	df02      	svc	2
	return &wl_filter;
#endif
}
    8486:	4801      	ldr	r0, [pc, #4]	; (848c <ctrl_filter_get+0x14>)
    8488:	4770      	bx	lr
    848a:	bf00      	nop
    848c:	20000a30 	.word	0x20000a30

00008490 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    8490:	2008      	movs	r0, #8
    8492:	4770      	bx	lr

00008494 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    8494:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8496:	f7ff fa4d 	bl	7934 <radio_adv_filter_pol_get>
    849a:	4604      	mov	r4, r0
    849c:	b110      	cbz	r0, 84a4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    849e:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    84a0:	4620      	mov	r0, r4
    84a2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    84a4:	f7ff fa68 	bl	7978 <radio_scan_filter_pol_get>
    84a8:	07c3      	lsls	r3, r0, #31
    84aa:	d4f8      	bmi.n	849e <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    84ac:	4b02      	ldr	r3, [pc, #8]	; (84b8 <ll_wl_clear+0x24>)
    84ae:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    84b0:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    84b2:	4b02      	ldr	r3, [pc, #8]	; (84bc <ll_wl_clear+0x28>)
    84b4:	701c      	strb	r4, [r3, #0]
	return 0;
    84b6:	e7f3      	b.n	84a0 <ll_wl_clear+0xc>
    84b8:	20000a30 	.word	0x20000a30
    84bc:	20000f7c 	.word	0x20000f7c

000084c0 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    84c0:	b570      	push	{r4, r5, r6, lr}
    84c2:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    84c4:	f7ff fa36 	bl	7934 <radio_adv_filter_pol_get>
    84c8:	4605      	mov	r5, r0
    84ca:	b110      	cbz	r0, 84d2 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    84cc:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    84ce:	4628      	mov	r0, r5
    84d0:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    84d2:	f7ff fa51 	bl	7978 <radio_scan_filter_pol_get>
    84d6:	07c3      	lsls	r3, r0, #31
    84d8:	d4f8      	bmi.n	84cc <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    84da:	7823      	ldrb	r3, [r4, #0]
    84dc:	2bff      	cmp	r3, #255	; 0xff
    84de:	d103      	bne.n	84e8 <ll_wl_add+0x28>
		wl_anon = 1;
    84e0:	4b11      	ldr	r3, [pc, #68]	; (8528 <ll_wl_add+0x68>)
    84e2:	2201      	movs	r2, #1
    84e4:	701a      	strb	r2, [r3, #0]
		return 0;
    84e6:	e7f2      	b.n	84ce <ll_wl_add+0xe>
	return filter_add(&wl_filter, addr->type, addr->a.val);
    84e8:	1c61      	adds	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
    84ea:	4c10      	ldr	r4, [pc, #64]	; (852c <ll_wl_add+0x6c>)
    84ec:	7822      	ldrb	r2, [r4, #0]
    84ee:	2aff      	cmp	r2, #255	; 0xff
    84f0:	d017      	beq.n	8522 <ll_wl_add+0x62>
	for (index = 0;
    84f2:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    84f4:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    84f8:	07f6      	lsls	r6, r6, #31
    84fa:	d410      	bmi.n	851e <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    84fc:	2601      	movs	r6, #1
    84fe:	4086      	lsls	r6, r0
    8500:	4332      	orrs	r2, r6
    8502:	7022      	strb	r2, [r4, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8504:	f003 0301 	and.w	r3, r3, #1
    8508:	7862      	ldrb	r2, [r4, #1]
    850a:	4083      	lsls	r3, r0
    850c:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    850e:	2206      	movs	r2, #6
    8510:	fb02 4000 	mla	r0, r2, r0, r4
    8514:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8516:	7063      	strb	r3, [r4, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8518:	f7f8 f861 	bl	5de <memcpy>
    851c:	e7d7      	b.n	84ce <ll_wl_add+0xe>
	     index++) {
    851e:	3001      	adds	r0, #1
    8520:	e7e8      	b.n	84f4 <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    8522:	2507      	movs	r5, #7
    8524:	e7d3      	b.n	84ce <ll_wl_add+0xe>
    8526:	bf00      	nop
    8528:	20000f7c 	.word	0x20000f7c
    852c:	20000a30 	.word	0x20000a30

00008530 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    8530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8534:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8536:	f7ff f9fd 	bl	7934 <radio_adv_filter_pol_get>
    853a:	4606      	mov	r6, r0
    853c:	b118      	cbz	r0, 8546 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    853e:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    8540:	4630      	mov	r0, r6
    8542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8546:	f7ff fa17 	bl	7978 <radio_scan_filter_pol_get>
    854a:	07c1      	lsls	r1, r0, #31
    854c:	d4f7      	bmi.n	853e <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    854e:	f897 8000 	ldrb.w	r8, [r7]
    8552:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8556:	d102      	bne.n	855e <ll_wl_remove+0x2e>
		wl_anon = 0;
    8558:	4b16      	ldr	r3, [pc, #88]	; (85b4 <ll_wl_remove+0x84>)
    855a:	701e      	strb	r6, [r3, #0]
		return 0;
    855c:	e7f0      	b.n	8540 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    855e:	4c16      	ldr	r4, [pc, #88]	; (85b8 <ll_wl_remove+0x88>)
    8560:	7823      	ldrb	r3, [r4, #0]
    8562:	b90b      	cbnz	r3, 8568 <ll_wl_remove+0x38>
		return BT_HCI_ERR_INVALID_PARAM;
    8564:	2612      	movs	r6, #18
    8566:	e7eb      	b.n	8540 <ll_wl_remove+0x10>
	index = 8;
    8568:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    856a:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    856c:	f04f 0906 	mov.w	r9, #6
    8570:	f104 0a02 	add.w	sl, r4, #2
	while (index--) {
    8574:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    8578:	d3f4      	bcc.n	8564 <ll_wl_remove+0x34>
		if ((filter->enable_bitmask & BIT(index)) &&
    857a:	7823      	ldrb	r3, [r4, #0]
    857c:	40eb      	lsrs	r3, r5
    857e:	07da      	lsls	r2, r3, #31
    8580:	d5f8      	bpl.n	8574 <ll_wl_remove+0x44>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    8582:	7863      	ldrb	r3, [r4, #1]
    8584:	412b      	asrs	r3, r5
    8586:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    858a:	07db      	lsls	r3, r3, #31
    858c:	d4f2      	bmi.n	8574 <ll_wl_remove+0x44>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    858e:	2206      	movs	r2, #6
    8590:	4639      	mov	r1, r7
    8592:	fb09 a005 	mla	r0, r9, r5, sl
    8596:	f7f8 f812 	bl	5be <memcmp>
		     (addr_type & 0x01)) &&
    859a:	2800      	cmp	r0, #0
    859c:	d1ea      	bne.n	8574 <ll_wl_remove+0x44>
			filter->enable_bitmask &= ~BIT(index);
    859e:	2301      	movs	r3, #1
    85a0:	40ab      	lsls	r3, r5
    85a2:	7822      	ldrb	r2, [r4, #0]
    85a4:	43db      	mvns	r3, r3
    85a6:	b2db      	uxtb	r3, r3
    85a8:	401a      	ands	r2, r3
    85aa:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    85ac:	7862      	ldrb	r2, [r4, #1]
    85ae:	4013      	ands	r3, r2
    85b0:	7063      	strb	r3, [r4, #1]
    85b2:	e7c5      	b.n	8540 <ll_wl_remove+0x10>
    85b4:	20000f7c 	.word	0x20000f7c
    85b8:	20000a30 	.word	0x20000a30

000085bc <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    85bc:	4a03      	ldr	r2, [pc, #12]	; (85cc <ll_filter_reset+0x10>)
    85be:	2300      	movs	r3, #0
    85c0:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    85c2:	4a03      	ldr	r2, [pc, #12]	; (85d0 <ll_filter_reset+0x14>)
    85c4:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    85c6:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    85c8:	4770      	bx	lr
    85ca:	bf00      	nop
    85cc:	20000f7c 	.word	0x20000f7c
    85d0:	20000a30 	.word	0x20000a30

000085d4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    85d4:	4b05      	ldr	r3, [pc, #20]	; (85ec <cntr_init+0x18>)
    85d6:	2200      	movs	r2, #0
    85d8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    85dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    85e0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    85e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			     RTC_INTENSET_COMPARE1_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif
}
    85e8:	4770      	bx	lr
    85ea:	bf00      	nop
    85ec:	4000b000 	.word	0x4000b000

000085f0 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    85f0:	4a04      	ldr	r2, [pc, #16]	; (8604 <cntr_start+0x14>)
    85f2:	7813      	ldrb	r3, [r2, #0]
    85f4:	1c59      	adds	r1, r3, #1
    85f6:	7011      	strb	r1, [r2, #0]
    85f8:	2001      	movs	r0, #1
    85fa:	b913      	cbnz	r3, 8602 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    85fc:	4a02      	ldr	r2, [pc, #8]	; (8608 <cntr_start+0x18>)
    85fe:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    8600:	4618      	mov	r0, r3
}
    8602:	4770      	bx	lr
    8604:	20000a62 	.word	0x20000a62
    8608:	4000b000 	.word	0x4000b000

0000860c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    860c:	4b09      	ldr	r3, [pc, #36]	; (8634 <cntr_stop+0x28>)
    860e:	7818      	ldrb	r0, [r3, #0]
    8610:	b928      	cbnz	r0, 861e <cntr_stop+0x12>
    8612:	4040      	eors	r0, r0
    8614:	f380 8811 	msr	BASEPRI, r0
    8618:	f04f 0004 	mov.w	r0, #4
    861c:	df02      	svc	2

	if (--_refcount) {
    861e:	3801      	subs	r0, #1
    8620:	b2c0      	uxtb	r0, r0
    8622:	7018      	strb	r0, [r3, #0]
    8624:	2301      	movs	r3, #1
    8626:	b910      	cbnz	r0, 862e <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    8628:	4a03      	ldr	r2, [pc, #12]	; (8638 <cntr_stop+0x2c>)
    862a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    862c:	4770      	bx	lr
		return 1;
    862e:	4618      	mov	r0, r3
}
    8630:	4770      	bx	lr
    8632:	bf00      	nop
    8634:	20000a62 	.word	0x20000a62
    8638:	4000b000 	.word	0x4000b000

0000863c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    863c:	4b01      	ldr	r3, [pc, #4]	; (8644 <cntr_cnt_get+0x8>)
    863e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    8642:	4770      	bx	lr
    8644:	4000b000 	.word	0x4000b000

00008648 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    8648:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    864c:	4b01      	ldr	r3, [pc, #4]	; (8654 <cntr_cmp_set+0xc>)
    864e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    8652:	4770      	bx	lr
    8654:	4000b000 	.word	0x4000b000

00008658 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    8658:	4b11      	ldr	r3, [pc, #68]	; (86a0 <do_ecb+0x48>)
{
    865a:	b5f0      	push	{r4, r5, r6, r7, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    865c:	2401      	movs	r4, #1
    865e:	4626      	mov	r6, r4
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    8660:	2500      	movs	r5, #0
    8662:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    8664:	605e      	str	r6, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    8666:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    866a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    866e:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    8672:	601e      	str	r6, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8674:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    8678:	b931      	cbnz	r1, 8688 <do_ecb+0x30>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    867a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    867e:	b919      	cbnz	r1, 8688 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    8680:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8684:	2900      	cmp	r1, #0
    8686:	d1f5      	bne.n	8674 <do_ecb+0x1c>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    8688:	6054      	str	r4, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    868a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    868e:	2900      	cmp	r1, #0
    8690:	d1e8      	bne.n	8664 <do_ecb+0xc>
    8692:	f8d2 7504 	ldr.w	r7, [r2, #1284]	; 0x504
    8696:	2f00      	cmp	r7, #0
    8698:	d0e4      	beq.n	8664 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
    869a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    869e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86a0:	4000e000 	.word	0x4000e000

000086a4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    86a4:	b570      	push	{r4, r5, r6, lr}
    86a6:	b08c      	sub	sp, #48	; 0x30
    86a8:	460e      	mov	r6, r1
    86aa:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    86ac:	4601      	mov	r1, r0
    86ae:	2210      	movs	r2, #16
    86b0:	4668      	mov	r0, sp
{
    86b2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    86b4:	f7f9 fff4 	bl	26a0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    86b8:	2210      	movs	r2, #16
    86ba:	eb0d 0002 	add.w	r0, sp, r2
    86be:	4631      	mov	r1, r6
    86c0:	f7f9 ffee 	bl	26a0 <mem_rcopy>

	do_ecb(&ecb);
    86c4:	4668      	mov	r0, sp
    86c6:	f7ff ffc7 	bl	8658 <do_ecb>

	if (cipher_text_le) {
    86ca:	b125      	cbz	r5, 86d6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    86cc:	2210      	movs	r2, #16
    86ce:	a908      	add	r1, sp, #32
    86d0:	4628      	mov	r0, r5
    86d2:	f7f9 ffe5 	bl	26a0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    86d6:	b124      	cbz	r4, 86e2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    86d8:	2210      	movs	r2, #16
    86da:	a908      	add	r1, sp, #32
    86dc:	4620      	mov	r0, r4
    86de:	f7f7 ff7e 	bl	5de <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    86e2:	b00c      	add	sp, #48	; 0x30
    86e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000086e8 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    86e8:	4b07      	ldr	r3, [pc, #28]	; (8708 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    86ea:	4a08      	ldr	r2, [pc, #32]	; (870c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    86ec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    86f0:	4907      	ldr	r1, [pc, #28]	; (8710 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    86f2:	4a08      	ldr	r2, [pc, #32]	; (8714 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    86f4:	2800      	cmp	r0, #0
    86f6:	bf14      	ite	ne
    86f8:	4610      	movne	r0, r2
    86fa:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    86fc:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    86fe:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    8702:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8706:	4770      	bx	lr
    8708:	4001f000 	.word	0x4001f000
    870c:	40008140 	.word	0x40008140
    8710:	40001004 	.word	0x40001004
    8714:	40001000 	.word	0x40001000

00008718 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    8718:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    871a:	4e2c      	ldr	r6, [pc, #176]	; (87cc <sw_switch.isra.10+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    871c:	4f2c      	ldr	r7, [pc, #176]	; (87d0 <sw_switch.isra.10+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    871e:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    8720:	4b2c      	ldr	r3, [pc, #176]	; (87d4 <sw_switch.isra.10+0xbc>)
    8722:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    8726:	b22b      	sxth	r3, r5
    8728:	00dc      	lsls	r4, r3, #3
    872a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    872e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    8732:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    8736:	f105 040b 	add.w	r4, r5, #11
    873a:	b2e4      	uxtb	r4, r4
    873c:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    873e:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    8742:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    8746:	3fc0      	subs	r7, #192	; 0xc0
    8748:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    874c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    8750:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    8754:	2800      	cmp	r0, #0
    8756:	d034      	beq.n	87c2 <sw_switch.isra.10+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    8758:	f649 4040 	movw	r0, #40000	; 0x9c40
    875c:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    8760:	2a02      	cmp	r2, #2
    8762:	bf0c      	ite	eq
    8764:	4602      	moveq	r2, r0
    8766:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    8768:	f241 3088 	movw	r0, #5000	; 0x1388
    876c:	f242 47b8 	movw	r7, #9400	; 0x24b8
    8770:	2902      	cmp	r1, #2
    8772:	bf18      	it	ne
    8774:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    8776:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    877a:	4401      	add	r1, r0
    877c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8780:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    8784:	4a14      	ldr	r2, [pc, #80]	; (87d8 <sw_switch.isra.10+0xc0>)
    8786:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    878a:	009b      	lsls	r3, r3, #2
    878c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8790:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    8794:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    8798:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    879a:	bf8b      	itete	hi
    879c:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    87a0:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    87a2:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    87a4:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    87a8:	bf88      	it	hi
    87aa:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    87ae:	4b08      	ldr	r3, [pc, #32]	; (87d0 <sw_switch.isra.10+0xb8>)
    87b0:	f44f 6290 	mov.w	r2, #1152	; 0x480
    87b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    87b8:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    87ba:	f003 0301 	and.w	r3, r3, #1
    87be:	7033      	strb	r3, [r6, #0]
}
    87c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    87c2:	4a06      	ldr	r2, [pc, #24]	; (87dc <sw_switch.isra.10+0xc4>)
    87c4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    87c8:	212c      	movs	r1, #44	; 0x2c
    87ca:	e7de      	b.n	878a <sw_switch.isra.10+0x72>
    87cc:	20000c80 	.word	0x20000c80
    87d0:	4001f000 	.word	0x4001f000
    87d4:	4000110c 	.word	0x4000110c
    87d8:	40001000 	.word	0x40001000
    87dc:	40001004 	.word	0x40001004

000087e0 <isr_radio>:
	if (sfp_radio_isr) {
    87e0:	4b02      	ldr	r3, [pc, #8]	; (87ec <isr_radio+0xc>)
    87e2:	681b      	ldr	r3, [r3, #0]
    87e4:	b103      	cbz	r3, 87e8 <isr_radio+0x8>
		sfp_radio_isr();
    87e6:	4718      	bx	r3
}
    87e8:	4770      	bx	lr
    87ea:	bf00      	nop
    87ec:	20000c7c 	.word	0x20000c7c

000087f0 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    87f0:	4b06      	ldr	r3, [pc, #24]	; (880c <radio_isr_set+0x1c>)
    87f2:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    87f4:	4b06      	ldr	r3, [pc, #24]	; (8810 <radio_isr_set+0x20>)
    87f6:	2210      	movs	r2, #16
    87f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    87fc:	4b05      	ldr	r3, [pc, #20]	; (8814 <radio_isr_set+0x24>)
    87fe:	2202      	movs	r2, #2
    8800:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    8804:	2001      	movs	r0, #1
    8806:	f7f8 b9c3 	b.w	b90 <_arch_irq_enable>
    880a:	bf00      	nop
    880c:	20000c7c 	.word	0x20000c7c
    8810:	40001000 	.word	0x40001000
    8814:	e000e100 	.word	0xe000e100

00008818 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    8818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    881c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    8820:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    8822:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    8826:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    882a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    882e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    8832:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    8836:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    883a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    883e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    8842:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    8846:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    884a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    884e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    8852:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    8856:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
    885a:	4770      	bx	lr

0000885c <radio_reset>:
{
    885c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    885e:	2001      	movs	r0, #1
    8860:	f7f8 f9a6 	bl	bb0 <_arch_irq_disable>
	NRF_RADIO->POWER =
    8864:	4b08      	ldr	r3, [pc, #32]	; (8888 <radio_reset+0x2c>)
    8866:	2200      	movs	r2, #0
    8868:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    886c:	2201      	movs	r2, #1
    886e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    8872:	4a06      	ldr	r2, [pc, #24]	; (888c <radio_reset+0x30>)
    8874:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    8876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    887a:	f023 0301 	bic.w	r3, r3, #1
    887e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    8882:	6013      	str	r3, [r2, #0]
}
    8884:	bd08      	pop	{r3, pc}
    8886:	bf00      	nop
    8888:	40001000 	.word	0x40001000
    888c:	40001774 	.word	0x40001774

00008890 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    8890:	4b06      	ldr	r3, [pc, #24]	; (88ac <radio_phy_set+0x1c>)
	switch (phy) {
    8892:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    8894:	bf0c      	ite	eq
    8896:	2204      	moveq	r2, #4
    8898:	2203      	movne	r2, #3
    889a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    889e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    88a2:	f042 0201 	orr.w	r2, r2, #1
    88a6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
    88aa:	4770      	bx	lr
    88ac:	40001000 	.word	0x40001000

000088b0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    88b0:	4b01      	ldr	r3, [pc, #4]	; (88b8 <radio_tx_power_set+0x8>)
    88b2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    88b6:	4770      	bx	lr
    88b8:	40001000 	.word	0x40001000

000088bc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    88bc:	4b01      	ldr	r3, [pc, #4]	; (88c4 <radio_freq_chan_set+0x8>)
    88be:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    88c2:	4770      	bx	lr
    88c4:	40001000 	.word	0x40001000

000088c8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    88c8:	4b07      	ldr	r3, [pc, #28]	; (88e8 <radio_whiten_iv_set+0x20>)
    88ca:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    88ce:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    88d2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    88d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    88da:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    88de:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    88e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    88e6:	4770      	bx	lr
    88e8:	40001000 	.word	0x40001000

000088ec <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    88ec:	4a0a      	ldr	r2, [pc, #40]	; (8918 <radio_aa_set+0x2c>)
    88ee:	2300      	movs	r3, #0
    88f0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    88f4:	2301      	movs	r3, #1
    88f6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    88fa:	78c3      	ldrb	r3, [r0, #3]
    88fc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    8900:	7843      	ldrb	r3, [r0, #1]
    8902:	7881      	ldrb	r1, [r0, #2]
    8904:	041b      	lsls	r3, r3, #16
    8906:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    890a:	7801      	ldrb	r1, [r0, #0]
    890c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    8910:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    8914:	4770      	bx	lr
    8916:	bf00      	nop
    8918:	40001000 	.word	0x40001000

0000891c <radio_pkt_configure>:
	switch (phy) {
    891c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    8920:	2b02      	cmp	r3, #2
{
    8922:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    8924:	bf0c      	ite	eq
    8926:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    892a:	2400      	movne	r4, #0
	if (dc) {
    892c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    892e:	f1c0 0308 	rsb	r3, r0, #8
    8932:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    8936:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    893a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    893e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    8942:	4a0b      	ldr	r2, [pc, #44]	; (8970 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    8944:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    8948:	bf48      	it	mi
    894a:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    894e:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    8950:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    8954:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    8958:	4b06      	ldr	r3, [pc, #24]	; (8974 <radio_pkt_configure+0x58>)
    895a:	4003      	ands	r3, r0
    895c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    8960:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    8964:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    8968:	4319      	orrs	r1, r3
    896a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
    896e:	bd10      	pop	{r4, pc}
    8970:	40001000 	.word	0x40001000
    8974:	fef80000 	.word	0xfef80000

00008978 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    8978:	4b01      	ldr	r3, [pc, #4]	; (8980 <radio_pkt_rx_set+0x8>)
    897a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    897e:	4770      	bx	lr
    8980:	40001000 	.word	0x40001000

00008984 <radio_pkt_tx_set>:
    8984:	4b01      	ldr	r3, [pc, #4]	; (898c <radio_pkt_tx_set+0x8>)
    8986:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    898a:	4770      	bx	lr
    898c:	40001000 	.word	0x40001000

00008990 <radio_tx_ready_delay_get>:
	switch (phy) {
    8990:	2802      	cmp	r0, #2
}
    8992:	bf0c      	ite	eq
    8994:	2028      	moveq	r0, #40	; 0x28
    8996:	2029      	movne	r0, #41	; 0x29
    8998:	4770      	bx	lr

0000899a <radio_tx_chain_delay_get>:
}
    899a:	2001      	movs	r0, #1
    899c:	4770      	bx	lr

0000899e <radio_rx_ready_delay_get>:
}
    899e:	2029      	movs	r0, #41	; 0x29
    89a0:	4770      	bx	lr

000089a2 <radio_rx_chain_delay_get>:
	switch (phy) {
    89a2:	2802      	cmp	r0, #2
}
    89a4:	bf0c      	ite	eq
    89a6:	2005      	moveq	r0, #5
    89a8:	200a      	movne	r0, #10
    89aa:	4770      	bx	lr

000089ac <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    89ac:	4b01      	ldr	r3, [pc, #4]	; (89b4 <radio_rx_enable+0x8>)
    89ae:	2201      	movs	r2, #1
    89b0:	605a      	str	r2, [r3, #4]
}
    89b2:	4770      	bx	lr
    89b4:	40001000 	.word	0x40001000

000089b8 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    89b8:	4b01      	ldr	r3, [pc, #4]	; (89c0 <radio_tx_enable+0x8>)
    89ba:	2201      	movs	r2, #1
    89bc:	601a      	str	r2, [r3, #0]
}
    89be:	4770      	bx	lr
    89c0:	40001000 	.word	0x40001000

000089c4 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    89c4:	4a07      	ldr	r2, [pc, #28]	; (89e4 <radio_disable+0x20>)
    89c6:	f44f 6390 	mov.w	r3, #1152	; 0x480
    89ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    89ce:	2301      	movs	r3, #1
    89d0:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    89d2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    89d4:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    89d8:	2100      	movs	r1, #0
    89da:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    89de:	6113      	str	r3, [r2, #16]
}
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop
    89e4:	4001f000 	.word	0x4001f000

000089e8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    89e8:	4b04      	ldr	r3, [pc, #16]	; (89fc <radio_status_reset+0x14>)
    89ea:	2200      	movs	r2, #0
    89ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    89f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    89f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    89f8:	4770      	bx	lr
    89fa:	bf00      	nop
    89fc:	40001000 	.word	0x40001000

00008a00 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    8a00:	4b03      	ldr	r3, [pc, #12]	; (8a10 <radio_is_ready+0x10>)
    8a02:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    8a06:	3000      	adds	r0, #0
    8a08:	bf18      	it	ne
    8a0a:	2001      	movne	r0, #1
    8a0c:	4770      	bx	lr
    8a0e:	bf00      	nop
    8a10:	40001000 	.word	0x40001000

00008a14 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    8a14:	4b03      	ldr	r3, [pc, #12]	; (8a24 <radio_is_done+0x10>)
    8a16:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    8a1a:	3000      	adds	r0, #0
    8a1c:	bf18      	it	ne
    8a1e:	2001      	movne	r0, #1
    8a20:	4770      	bx	lr
    8a22:	bf00      	nop
    8a24:	40001000 	.word	0x40001000

00008a28 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    8a28:	4b03      	ldr	r3, [pc, #12]	; (8a38 <radio_is_idle+0x10>)
    8a2a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    8a2e:	fab0 f080 	clz	r0, r0
    8a32:	0940      	lsrs	r0, r0, #5
    8a34:	4770      	bx	lr
    8a36:	bf00      	nop
    8a38:	40001000 	.word	0x40001000

00008a3c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    8a3c:	4b04      	ldr	r3, [pc, #16]	; (8a50 <radio_crc_configure+0x14>)
    8a3e:	f240 1203 	movw	r2, #259	; 0x103
    8a42:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    8a46:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    8a4a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
    8a4e:	4770      	bx	lr
    8a50:	40001000 	.word	0x40001000

00008a54 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    8a54:	4b03      	ldr	r3, [pc, #12]	; (8a64 <radio_crc_is_valid+0x10>)
    8a56:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    8a5a:	3000      	adds	r0, #0
    8a5c:	bf18      	it	ne
    8a5e:	2001      	movne	r0, #1
    8a60:	4770      	bx	lr
    8a62:	bf00      	nop
    8a64:	40001000 	.word	0x40001000

00008a68 <radio_pkt_empty_get>:
}
    8a68:	4800      	ldr	r0, [pc, #0]	; (8a6c <radio_pkt_empty_get+0x4>)
    8a6a:	4770      	bx	lr
    8a6c:	20000b70 	.word	0x20000b70

00008a70 <radio_pkt_scratch_get>:
}
    8a70:	4800      	ldr	r0, [pc, #0]	; (8a74 <radio_pkt_scratch_get+0x4>)
    8a72:	4770      	bx	lr
    8a74:	20000b74 	.word	0x20000b74

00008a78 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8a78:	4b04      	ldr	r3, [pc, #16]	; (8a8c <radio_switch_complete_and_rx+0x14>)
    8a7a:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    8a7c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    8a82:	4602      	mov	r2, r0
    8a84:	4608      	mov	r0, r1
    8a86:	f7ff be47 	b.w	8718 <sw_switch.isra.10>
    8a8a:	bf00      	nop
    8a8c:	40001000 	.word	0x40001000

00008a90 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    8a90:	4b03      	ldr	r3, [pc, #12]	; (8aa0 <radio_switch_complete_and_tx+0x10>)
    8a92:	2103      	movs	r1, #3
    8a94:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    8a98:	4601      	mov	r1, r0
    8a9a:	2001      	movs	r0, #1
    8a9c:	f7ff be3c 	b.w	8718 <sw_switch.isra.10>
    8aa0:	40001000 	.word	0x40001000

00008aa4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    8aa4:	4b05      	ldr	r3, [pc, #20]	; (8abc <radio_switch_complete_and_disable+0x18>)
    8aa6:	2203      	movs	r2, #3
    8aa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    8aac:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    8ab0:	f44f 6290 	mov.w	r2, #1152	; 0x480
    8ab4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			   HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8ab8:	4770      	bx	lr
    8aba:	bf00      	nop
    8abc:	40001000 	.word	0x40001000

00008ac0 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    8ac0:	4a03      	ldr	r2, [pc, #12]	; (8ad0 <radio_rssi_measure+0x10>)
    8ac2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    8ac6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    8aca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    8ace:	4770      	bx	lr
    8ad0:	40001000 	.word	0x40001000

00008ad4 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    8ad4:	4b01      	ldr	r3, [pc, #4]	; (8adc <radio_rssi_get+0x8>)
    8ad6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    8ada:	4770      	bx	lr
    8adc:	40001000 	.word	0x40001000

00008ae0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    8ae0:	4b02      	ldr	r3, [pc, #8]	; (8aec <radio_rssi_status_reset+0xc>)
    8ae2:	2200      	movs	r2, #0
    8ae4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
    8ae8:	4770      	bx	lr
    8aea:	bf00      	nop
    8aec:	40001000 	.word	0x40001000

00008af0 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    8af0:	4b03      	ldr	r3, [pc, #12]	; (8b00 <radio_rssi_is_ready+0x10>)
    8af2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    8af6:	3000      	adds	r0, #0
    8af8:	bf18      	it	ne
    8afa:	2001      	movne	r0, #1
    8afc:	4770      	bx	lr
    8afe:	bf00      	nop
    8b00:	40001000 	.word	0x40001000

00008b04 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    8b04:	b530      	push	{r4, r5, lr}
    8b06:	2400      	movs	r4, #0
    8b08:	00a3      	lsls	r3, r4, #2
    8b0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    8b12:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    8b14:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    8b18:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    8b1a:	8895      	ldrh	r5, [r2, #4]
    8b1c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    8b20:	2c08      	cmp	r4, #8
		bdaddr += 6;
    8b22:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    8b26:	d1ef      	bne.n	8b08 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    8b28:	4b02      	ldr	r3, [pc, #8]	; (8b34 <radio_filter_configure+0x30>)
    8b2a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    8b2e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    8b32:	bd30      	pop	{r4, r5, pc}
    8b34:	40001000 	.word	0x40001000

00008b38 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    8b38:	4a03      	ldr	r2, [pc, #12]	; (8b48 <radio_filter_disable+0x10>)
    8b3a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    8b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8b42:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
    8b46:	4770      	bx	lr
    8b48:	40001000 	.word	0x40001000

00008b4c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    8b4c:	4b02      	ldr	r3, [pc, #8]	; (8b58 <radio_filter_status_reset+0xc>)
    8b4e:	2200      	movs	r2, #0
    8b50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    8b54:	4770      	bx	lr
    8b56:	bf00      	nop
    8b58:	40001000 	.word	0x40001000

00008b5c <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    8b5c:	4b03      	ldr	r3, [pc, #12]	; (8b6c <radio_filter_has_match+0x10>)
    8b5e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    8b62:	3000      	adds	r0, #0
    8b64:	bf18      	it	ne
    8b66:	2001      	movne	r0, #1
    8b68:	4770      	bx	lr
    8b6a:	bf00      	nop
    8b6c:	40001000 	.word	0x40001000

00008b70 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    8b70:	4b01      	ldr	r3, [pc, #4]	; (8b78 <radio_filter_match_get+0x8>)
    8b72:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    8b76:	4770      	bx	lr
    8b78:	40001000 	.word	0x40001000

00008b7c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    8b7c:	4b05      	ldr	r3, [pc, #20]	; (8b94 <radio_tmr_status_reset+0x18>)
    8b7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8b82:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    8b86:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    8b8a:	227f      	movs	r2, #127	; 0x7f
    8b8c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			HAL_TRIGGER_CRYPT_PPI_DISABLE;

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
}
    8b90:	4770      	bx	lr
    8b92:	bf00      	nop
    8b94:	4000b000 	.word	0x4000b000

00008b98 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    8b98:	4b03      	ldr	r3, [pc, #12]	; (8ba8 <radio_tmr_tifs_set+0x10>)
    8b9a:	4a04      	ldr	r2, [pc, #16]	; (8bac <radio_tmr_tifs_set+0x14>)
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    8ba2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8ba6:	4770      	bx	lr
    8ba8:	20000c80 	.word	0x20000c80
    8bac:	40009000 	.word	0x40009000

00008bb0 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    8bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    8bb4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    8bb8:	4c30      	ldr	r4, [pc, #192]	; (8c7c <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    8bba:	4d31      	ldr	r5, [pc, #196]	; (8c80 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    8bbc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    8bc0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    8bc2:	bf88      	it	hi
    8bc4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    8bc8:	4b2e      	ldr	r3, [pc, #184]	; (8c84 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    8bca:	4c2f      	ldr	r4, [pc, #188]	; (8c88 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    8bcc:	bf82      	ittt	hi
    8bce:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    8bd2:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    8bd6:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    8bda:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    8bdc:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    8be0:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    8be2:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    8be4:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    8be8:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    8bea:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    8bee:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    8bf2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    8bf6:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    8bfa:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    8bfe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    8c02:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    8c06:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    8c0a:	4920      	ldr	r1, [pc, #128]	; (8c8c <radio_tmr_start+0xdc>)
    8c0c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    8c10:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    8c14:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    8c18:	f7ff fd66 	bl	86e8 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    8c1c:	4b1c      	ldr	r3, [pc, #112]	; (8c90 <radio_tmr_start+0xe0>)
    8c1e:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    8c20:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    8c24:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    8c28:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    8c2c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    8c2e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    8c32:	3b74      	subs	r3, #116	; 0x74
    8c34:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    8c38:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    8c3c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    8c40:	f503 739a 	add.w	r3, r3, #308	; 0x134
    8c44:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    8c48:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    8c4c:	33c4      	adds	r3, #196	; 0xc4
    8c4e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    8c52:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    8c56:	3bc0      	subs	r3, #192	; 0xc0
    8c58:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    8c5c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    8c60:	33c8      	adds	r3, #200	; 0xc8
    8c62:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    8c66:	f44f 6310 	mov.w	r3, #2304	; 0x900
    8c6a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    8c6e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    8c72:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    8c76:	4628      	mov	r0, r5
    8c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c7c:	7ff0bdbf 	.word	0x7ff0bdbf
    8c80:	000f4240 	.word	0x000f4240
    8c84:	40008000 	.word	0x40008000
    8c88:	4000b000 	.word	0x4000b000
    8c8c:	4000b148 	.word	0x4000b148
    8c90:	40009000 	.word	0x40009000

00008c94 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    8c94:	4a04      	ldr	r2, [pc, #16]	; (8ca8 <radio_tmr_stop+0x14>)
    8c96:	2301      	movs	r3, #1
    8c98:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    8c9a:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    8c9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    8ca0:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    8ca2:	6113      	str	r3, [r2, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_STOP(SW_SWITCH_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    8ca4:	4770      	bx	lr
    8ca6:	bf00      	nop
    8ca8:	40008000 	.word	0x40008000

00008cac <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    8cac:	4b0c      	ldr	r3, [pc, #48]	; (8ce0 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    8cae:	4a0d      	ldr	r2, [pc, #52]	; (8ce4 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    8cb0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    8cb4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    8cb8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    8cbc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8cc0:	3240      	adds	r2, #64	; 0x40
    8cc2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    8cc6:	f502 7280 	add.w	r2, r2, #256	; 0x100
    8cca:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    8cce:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    8cd2:	3a34      	subs	r2, #52	; 0x34
    8cd4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    8cd8:	2218      	movs	r2, #24
    8cda:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
		HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    8cde:	4770      	bx	lr
    8ce0:	40008000 	.word	0x40008000
    8ce4:	40001104 	.word	0x40001104

00008ce8 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    8ce8:	4b0b      	ldr	r3, [pc, #44]	; (8d18 <radio_tmr_aa_capture+0x30>)
    8cea:	4a0c      	ldr	r2, [pc, #48]	; (8d1c <radio_tmr_aa_capture+0x34>)
    8cec:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    8cf0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8cf4:	3240      	adds	r2, #64	; 0x40
    8cf6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    8cfa:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    8cfe:	3a3c      	subs	r2, #60	; 0x3c
    8d00:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    8d04:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8d08:	3240      	adds	r2, #64	; 0x40
    8d0a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    8d0e:	220c      	movs	r2, #12
    8d10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    8d14:	4770      	bx	lr
    8d16:	bf00      	nop
    8d18:	4001f000 	.word	0x4001f000
    8d1c:	40001100 	.word	0x40001100

00008d20 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    8d20:	4b01      	ldr	r3, [pc, #4]	; (8d28 <radio_tmr_aa_get+0x8>)
    8d22:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    8d26:	4770      	bx	lr
    8d28:	40008000 	.word	0x40008000

00008d2c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    8d2c:	4b01      	ldr	r3, [pc, #4]	; (8d34 <radio_tmr_aa_save+0x8>)
    8d2e:	6018      	str	r0, [r3, #0]
}
    8d30:	4770      	bx	lr
    8d32:	bf00      	nop
    8d34:	20000c78 	.word	0x20000c78

00008d38 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    8d38:	4b01      	ldr	r3, [pc, #4]	; (8d40 <radio_tmr_aa_restore+0x8>)
    8d3a:	6818      	ldr	r0, [r3, #0]
    8d3c:	4770      	bx	lr
    8d3e:	bf00      	nop
    8d40:	20000c78 	.word	0x20000c78

00008d44 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    8d44:	4b01      	ldr	r3, [pc, #4]	; (8d4c <radio_tmr_ready_get+0x8>)
    8d46:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    8d4a:	4770      	bx	lr
    8d4c:	40008000 	.word	0x40008000

00008d50 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    8d50:	4b06      	ldr	r3, [pc, #24]	; (8d6c <radio_tmr_end_capture+0x1c>)
    8d52:	4a07      	ldr	r2, [pc, #28]	; (8d70 <radio_tmr_end_capture+0x20>)
    8d54:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    8d58:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    8d5c:	323c      	adds	r2, #60	; 0x3c
    8d5e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    8d62:	2220      	movs	r2, #32
    8d64:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    8d68:	4770      	bx	lr
    8d6a:	bf00      	nop
    8d6c:	4001f000 	.word	0x4001f000
    8d70:	4000110c 	.word	0x4000110c

00008d74 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    8d74:	4b01      	ldr	r3, [pc, #4]	; (8d7c <radio_tmr_end_get+0x8>)
    8d76:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
    8d7a:	4770      	bx	lr
    8d7c:	40008000 	.word	0x40008000

00008d80 <radio_tmr_tifs_base_get>:
    8d80:	4b01      	ldr	r3, [pc, #4]	; (8d88 <radio_tmr_tifs_base_get+0x8>)
    8d82:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    8d86:	4770      	bx	lr
    8d88:	40008000 	.word	0x40008000

00008d8c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8d8c:	4b16      	ldr	r3, [pc, #88]	; (8de8 <radio_ccm_rx_pkt_set+0x5c>)
{
    8d8e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8d90:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8d92:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8d94:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    8d98:	4e14      	ldr	r6, [pc, #80]	; (8dec <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8d9a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    8d9e:	4d14      	ldr	r5, [pc, #80]	; (8df0 <radio_ccm_rx_pkt_set+0x64>)
    8da0:	2902      	cmp	r1, #2
    8da2:	bf0c      	ite	eq
    8da4:	4629      	moveq	r1, r5
    8da6:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    8da8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8dac:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    8db0:	4810      	ldr	r0, [pc, #64]	; (8df4 <radio_ccm_rx_pkt_set+0x68>)
    8db2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    8db6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8dba:	4a0f      	ldr	r2, [pc, #60]	; (8df8 <radio_ccm_rx_pkt_set+0x6c>)
    8dbc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    8dc0:	490e      	ldr	r1, [pc, #56]	; (8dfc <radio_ccm_rx_pkt_set+0x70>)
    8dc2:	4a0f      	ldr	r2, [pc, #60]	; (8e00 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    8dc4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    8dc8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    8dcc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    8dd0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    8dd4:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    8dd8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    8ddc:	2140      	movs	r1, #64	; 0x40
    8dde:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    8de2:	2201      	movs	r2, #1
    8de4:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    8de6:	bd70      	pop	{r4, r5, r6, pc}
    8de8:	4000f000 	.word	0x4000f000
    8dec:	01000001 	.word	0x01000001
    8df0:	01010001 	.word	0x01010001
    8df4:	20000b74 	.word	0x20000b74
    8df8:	20000a64 	.word	0x20000a64
    8dfc:	40001104 	.word	0x40001104
    8e00:	4001f000 	.word	0x4001f000

00008e04 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    8e04:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e06:	4b0e      	ldr	r3, [pc, #56]	; (8e40 <radio_ccm_tx_pkt_set+0x3c>)
    8e08:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8e0a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8e0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8e10:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    8e14:	4c0b      	ldr	r4, [pc, #44]	; (8e44 <radio_ccm_tx_pkt_set+0x40>)
    8e16:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8e1a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    8e1e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    8e22:	4809      	ldr	r0, [pc, #36]	; (8e48 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8e24:	4909      	ldr	r1, [pc, #36]	; (8e4c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    8e26:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8e2a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    8e2e:	2101      	movs	r1, #1
    8e30:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    8e34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    8e38:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    8e3c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    8e3e:	bd10      	pop	{r4, pc}
    8e40:	4000f000 	.word	0x4000f000
    8e44:	01010000 	.word	0x01010000
    8e48:	20000b74 	.word	0x20000b74
    8e4c:	20000a64 	.word	0x20000a64

00008e50 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    8e50:	4b0c      	ldr	r3, [pc, #48]	; (8e84 <radio_ccm_is_done+0x34>)
    8e52:	2202      	movs	r2, #2
    8e54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    8e58:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    8e5c:	b16a      	cbz	r2, 8e7a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    8e5e:	2202      	movs	r2, #2
    8e60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8e64:	4a08      	ldr	r2, [pc, #32]	; (8e88 <radio_ccm_is_done+0x38>)
    8e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8e6a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    8e6e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    8e72:	fab0 f080 	clz	r0, r0
    8e76:	0940      	lsrs	r0, r0, #5
    8e78:	4770      	bx	lr
		__WFE();
    8e7a:	bf20      	wfe
		__SEV();
    8e7c:	bf40      	sev
		__WFE();
    8e7e:	bf20      	wfe
    8e80:	e7ea      	b.n	8e58 <radio_ccm_is_done+0x8>
    8e82:	bf00      	nop
    8e84:	4000f000 	.word	0x4000f000
    8e88:	e000e100 	.word	0xe000e100

00008e8c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    8e8c:	4b03      	ldr	r3, [pc, #12]	; (8e9c <radio_ccm_mic_is_valid+0x10>)
    8e8e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    8e92:	3000      	adds	r0, #0
    8e94:	bf18      	it	ne
    8e96:	2001      	movne	r0, #1
    8e98:	4770      	bx	lr
    8e9a:	bf00      	nop
    8e9c:	4000f000 	.word	0x4000f000

00008ea0 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    8ea0:	4b01      	ldr	r3, [pc, #4]	; (8ea8 <radio_ar_match_get+0x8>)
    8ea2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    8ea6:	4770      	bx	lr
    8ea8:	4000f000 	.word	0x4000f000

00008eac <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    8eac:	4a04      	ldr	r2, [pc, #16]	; (8ec0 <radio_ar_status_reset+0x14>)
    8eae:	2300      	movs	r3, #0
    8eb0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    8eb4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    8eb8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
    8ebc:	4770      	bx	lr
    8ebe:	bf00      	nop
    8ec0:	40001000 	.word	0x40001000

00008ec4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    8ec4:	4b08      	ldr	r3, [pc, #32]	; (8ee8 <radio_ar_has_match+0x24>)
    8ec6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    8eca:	b160      	cbz	r0, 8ee6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    8ecc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    8ed0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    8ed4:	b138      	cbz	r0, 8ee6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    8ed6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    8eda:	b120      	cbz	r0, 8ee6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    8edc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    8ee0:	fab0 f080 	clz	r0, r0
    8ee4:	0940      	lsrs	r0, r0, #5
}
    8ee6:	4770      	bx	lr
    8ee8:	40001000 	.word	0x40001000

00008eec <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    8eec:	2901      	cmp	r1, #1
    8eee:	d005      	beq.n	8efc <mayfly_enable_cb+0x10>
    8ef0:	4040      	eors	r0, r0
    8ef2:	f380 8811 	msr	BASEPRI, r0
    8ef6:	f04f 0004 	mov.w	r0, #4
    8efa:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    8efc:	2018      	movs	r0, #24
	if (enable) {
    8efe:	b10a      	cbz	r2, 8f04 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    8f00:	f7f7 be46 	b.w	b90 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
    8f04:	f7f7 be54 	b.w	bb0 <_arch_irq_disable>

00008f08 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    8f08:	b139      	cbz	r1, 8f1a <mayfly_is_enabled+0x12>
    8f0a:	2901      	cmp	r1, #1
    8f0c:	d008      	beq.n	8f20 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    8f0e:	4040      	eors	r0, r0
    8f10:	f380 8811 	msr	BASEPRI, r0
    8f14:	f04f 0004 	mov.w	r0, #4
    8f18:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    8f1a:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    8f1c:	f7f7 be5c 	b.w	bd8 <_arch_irq_is_enabled>
    8f20:	2018      	movs	r0, #24
    8f22:	e7fb      	b.n	8f1c <mayfly_is_enabled+0x14>

00008f24 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    8f24:	4288      	cmp	r0, r1
    8f26:	d00a      	beq.n	8f3e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    8f28:	b918      	cbnz	r0, 8f32 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    8f2a:	1e4b      	subs	r3, r1, #1
    8f2c:	4258      	negs	r0, r3
    8f2e:	4158      	adcs	r0, r3
    8f30:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    8f32:	2801      	cmp	r0, #1
    8f34:	d105      	bne.n	8f42 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    8f36:	fab1 f081 	clz	r0, r1
    8f3a:	0940      	lsrs	r0, r0, #5
    8f3c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    8f3e:	2001      	movs	r0, #1
    8f40:	4770      	bx	lr
    8f42:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    8f44:	4770      	bx	lr
	...

00008f48 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    8f48:	4b08      	ldr	r3, [pc, #32]	; (8f6c <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    8f4a:	b139      	cbz	r1, 8f5c <mayfly_pend+0x14>
    8f4c:	2901      	cmp	r1, #1
    8f4e:	d00a      	beq.n	8f66 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    8f50:	4040      	eors	r0, r0
    8f52:	f380 8811 	msr	BASEPRI, r0
    8f56:	f04f 0004 	mov.w	r0, #4
    8f5a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8f60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
    8f64:	4770      	bx	lr
    8f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f6a:	e7f9      	b.n	8f60 <mayfly_pend+0x18>
    8f6c:	e000e100 	.word	0xe000e100

00008f70 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    8f70:	2803      	cmp	r0, #3
    8f72:	d905      	bls.n	8f80 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    8f74:	4040      	eors	r0, r0
    8f76:	f380 8811 	msr	BASEPRI, r0
    8f7a:	f04f 0004 	mov.w	r0, #4
    8f7e:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    8f80:	4b02      	ldr	r3, [pc, #8]	; (8f8c <hal_ticker_instance0_caller_id_get+0x1c>)
    8f82:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    8f84:	2800      	cmp	r0, #0
    8f86:	d0f5      	beq.n	8f74 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    8f88:	4770      	bx	lr
    8f8a:	bf00      	nop
    8f8c:	0000a9b0 	.word	0x0000a9b0

00008f90 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    8f90:	3802      	subs	r0, #2
{
    8f92:	b410      	push	{r4}
    8f94:	461c      	mov	r4, r3
	switch (caller_id) {
    8f96:	2803      	cmp	r0, #3
    8f98:	d816      	bhi.n	8fc8 <hal_ticker_instance0_sched+0x38>
    8f9a:	e8df f000 	tbb	[pc, r0]
    8f9e:	0b02      	.short	0x0b02
    8fa0:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    8fa2:	2903      	cmp	r1, #3
    8fa4:	d110      	bne.n	8fc8 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    8fa6:	4b13      	ldr	r3, [pc, #76]	; (8ff4 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    8fa8:	2100      	movs	r1, #0
			m.param = instance;
    8faa:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    8fac:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    8fae:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    8fb0:	f7f9 bbf6 	b.w	27a0 <mayfly_enqueue>
		switch (callee_id) {
    8fb4:	2904      	cmp	r1, #4
    8fb6:	d107      	bne.n	8fc8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    8fb8:	4b0f      	ldr	r3, [pc, #60]	; (8ff8 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    8fba:	2101      	movs	r1, #1
			m.param = instance;
    8fbc:	609c      	str	r4, [r3, #8]
    8fbe:	e7f5      	b.n	8fac <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    8fc0:	2903      	cmp	r1, #3
    8fc2:	d007      	beq.n	8fd4 <hal_ticker_instance0_sched+0x44>
    8fc4:	2904      	cmp	r1, #4
    8fc6:	d00a      	beq.n	8fde <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    8fc8:	4040      	eors	r0, r0
    8fca:	f380 8811 	msr	BASEPRI, r0
    8fce:	f04f 0004 	mov.w	r0, #4
    8fd2:	df02      	svc	2
			m.param = instance;
    8fd4:	4b09      	ldr	r3, [pc, #36]	; (8ffc <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    8fd6:	2100      	movs	r1, #0
			m.param = instance;
    8fd8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    8fda:	2001      	movs	r0, #1
    8fdc:	e7e7      	b.n	8fae <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    8fde:	4b08      	ldr	r3, [pc, #32]	; (9000 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    8fe0:	2101      	movs	r1, #1
			m.param = instance;
    8fe2:	609c      	str	r4, [r3, #8]
    8fe4:	e7f9      	b.n	8fda <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    8fe6:	2904      	cmp	r1, #4
    8fe8:	d1ee      	bne.n	8fc8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    8fea:	4b06      	ldr	r3, [pc, #24]	; (9004 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    8fec:	2101      	movs	r1, #1
			m.param = instance;
    8fee:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    8ff0:	2003      	movs	r0, #3
    8ff2:	e7dc      	b.n	8fae <hal_ticker_instance0_sched+0x1e>
    8ff4:	20002b28 	.word	0x20002b28
    8ff8:	20002b38 	.word	0x20002b38
    8ffc:	20002b48 	.word	0x20002b48
    9000:	20002b58 	.word	0x20002b58
    9004:	20002b68 	.word	0x20002b68

00009008 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    9008:	4601      	mov	r1, r0
    900a:	2000      	movs	r0, #0
    900c:	f7ff bb1c 	b.w	8648 <cntr_cmp_set>

00009010 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    9010:	4770      	bx	lr
	...

00009014 <net_buf_pool_get>:
}
    9014:	4b01      	ldr	r3, [pc, #4]	; (901c <net_buf_pool_get+0x8>)
    9016:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    901a:	4770      	bx	lr
    901c:	20002c3c 	.word	0x20002c3c

00009020 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9020:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    9022:	4b04      	ldr	r3, [pc, #16]	; (9034 <net_buf_id+0x14>)
    9024:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    9028:	69db      	ldr	r3, [r3, #28]
    902a:	1ac0      	subs	r0, r0, r3
}
    902c:	4b02      	ldr	r3, [pc, #8]	; (9038 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    902e:	10c0      	asrs	r0, r0, #3
}
    9030:	4358      	muls	r0, r3
    9032:	4770      	bx	lr
    9034:	20002c3c 	.word	0x20002c3c
    9038:	aaaaaaab 	.word	0xaaaaaaab

0000903c <fixed_data_alloc>:
{
    903c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    903e:	4b09      	ldr	r3, [pc, #36]	; (9064 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9040:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9042:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    9046:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9048:	699b      	ldr	r3, [r3, #24]
    904a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    904c:	6823      	ldr	r3, [r4, #0]
    904e:	429a      	cmp	r2, r3
    9050:	bf94      	ite	ls
    9052:	600a      	strls	r2, [r1, #0]
    9054:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    9056:	f7ff ffe3 	bl	9020 <net_buf_id>
    905a:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    905e:	fb02 3000 	mla	r0, r2, r0, r3
    9062:	bd10      	pop	{r4, pc}
    9064:	20002c3c 	.word	0x20002c3c

00009068 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    9068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    906c:	4605      	mov	r5, r0
    906e:	9101      	str	r1, [sp, #4]
    9070:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    9072:	f000 fd5b 	bl	9b2c <_impl_k_uptime_get_32>
    9076:	4607      	mov	r7, r0
	__asm__ volatile(
    9078:	f04f 0320 	mov.w	r3, #32
    907c:	f3ef 8811 	mrs	r8, BASEPRI
    9080:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    9084:	8a6b      	ldrh	r3, [r5, #18]
    9086:	2b00      	cmp	r3, #0
    9088:	d03d      	beq.n	9106 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    908a:	8a2a      	ldrh	r2, [r5, #16]
    908c:	429a      	cmp	r2, r3
    908e:	d92a      	bls.n	90e6 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    9090:	2100      	movs	r1, #0
    9092:	4628      	mov	r0, r5
    9094:	f000 fab5 	bl	9602 <k_queue_get>
			if (buf) {
    9098:	4604      	mov	r4, r0
    909a:	b320      	cbz	r0, 90e6 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    909c:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    90a0:	9b01      	ldr	r3, [sp, #4]
    90a2:	2b00      	cmp	r3, #0
    90a4:	d03c      	beq.n	9120 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    90a6:	1c73      	adds	r3, r6, #1
    90a8:	2b01      	cmp	r3, #1
    90aa:	d906      	bls.n	90ba <net_buf_alloc_len+0x52>
    90ac:	f000 fd3e 	bl	9b2c <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    90b0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    90b2:	42b0      	cmp	r0, r6
    90b4:	bf94      	ite	ls
    90b6:	1a36      	subls	r6, r6, r0
    90b8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    90ba:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    90bc:	4f1e      	ldr	r7, [pc, #120]	; (9138 <net_buf_alloc_len+0xd0>)
    90be:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    90c2:	4632      	mov	r2, r6
    90c4:	699b      	ldr	r3, [r3, #24]
    90c6:	681b      	ldr	r3, [r3, #0]
    90c8:	a901      	add	r1, sp, #4
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	4620      	mov	r0, r4
    90ce:	4798      	blx	r3
    90d0:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    90d2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    90d4:	bb28      	cbnz	r0, 9122 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    90d6:	79a0      	ldrb	r0, [r4, #6]
    90d8:	4621      	mov	r1, r4
    90da:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    90de:	f000 fa70 	bl	95c2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    90e2:	462c      	mov	r4, r5
    90e4:	e018      	b.n	9118 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    90e6:	8a6b      	ldrh	r3, [r5, #18]
    90e8:	1e5a      	subs	r2, r3, #1
    90ea:	826a      	strh	r2, [r5, #18]
    90ec:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    90f0:	8a2c      	ldrh	r4, [r5, #16]
    90f2:	1ae4      	subs	r4, r4, r3
    90f4:	69eb      	ldr	r3, [r5, #28]
    90f6:	2218      	movs	r2, #24
    90f8:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    90fc:	4b0e      	ldr	r3, [pc, #56]	; (9138 <net_buf_alloc_len+0xd0>)
    90fe:	1aed      	subs	r5, r5, r3
    9100:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    9102:	71a5      	strb	r5, [r4, #6]
		goto success;
    9104:	e7cc      	b.n	90a0 <net_buf_alloc_len+0x38>
    9106:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    910a:	4631      	mov	r1, r6
    910c:	4628      	mov	r0, r5
    910e:	f000 fa78 	bl	9602 <k_queue_get>
	if (!buf) {
    9112:	4604      	mov	r4, r0
    9114:	2800      	cmp	r0, #0
    9116:	d1c3      	bne.n	90a0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    9118:	4620      	mov	r0, r4
    911a:	b002      	add	sp, #8
    911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    9120:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    9122:	2300      	movs	r3, #0
    9124:	6023      	str	r3, [r4, #0]
    9126:	2201      	movs	r2, #1
    9128:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
    912a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    912c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    912e:	6923      	ldr	r3, [r4, #16]
    9130:	81e2      	strh	r2, [r4, #14]
    9132:	60a3      	str	r3, [r4, #8]
	return buf;
    9134:	e7f0      	b.n	9118 <net_buf_alloc_len+0xb0>
    9136:	bf00      	nop
    9138:	20002c3c 	.word	0x20002c3c

0000913c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    913c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    913e:	685b      	ldr	r3, [r3, #4]
    9140:	460a      	mov	r2, r1
    9142:	6819      	ldr	r1, [r3, #0]
    9144:	f7ff bf90 	b.w	9068 <net_buf_alloc_len>

00009148 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    9148:	6883      	ldr	r3, [r0, #8]
    914a:	4419      	add	r1, r3
    914c:	6001      	str	r1, [r0, #0]
}
    914e:	4770      	bx	lr

00009150 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    9150:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    9152:	460a      	mov	r2, r1
    9154:	6814      	ldr	r4, [r2, #0]
    9156:	b914      	cbnz	r4, 915e <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    9158:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    915a:	f000 ba36 	b.w	95ca <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    915e:	7953      	ldrb	r3, [r2, #5]
    9160:	f043 0301 	orr.w	r3, r3, #1
    9164:	7153      	strb	r3, [r2, #5]
    9166:	4622      	mov	r2, r4
    9168:	e7f4      	b.n	9154 <net_buf_put+0x4>
	...

0000916c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    916e:	4d15      	ldr	r5, [pc, #84]	; (91c4 <net_buf_unref+0x58>)
    9170:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    9172:	2600      	movs	r6, #0
	while (buf) {
    9174:	b904      	cbnz	r4, 9178 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    9176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    9178:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    917a:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    917c:	3b01      	subs	r3, #1
    917e:	b2db      	uxtb	r3, r3
    9180:	7123      	strb	r3, [r4, #4]
    9182:	2b00      	cmp	r3, #0
    9184:	d1f7      	bne.n	9176 <net_buf_unref+0xa>
		if (buf->__buf) {
    9186:	6921      	ldr	r1, [r4, #16]
    9188:	b159      	cbz	r1, 91a2 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    918a:	7963      	ldrb	r3, [r4, #5]
    918c:	079b      	lsls	r3, r3, #30
    918e:	d407      	bmi.n	91a0 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
    9190:	79a3      	ldrb	r3, [r4, #6]
    9192:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9196:	4620      	mov	r0, r4
    9198:	699b      	ldr	r3, [r3, #24]
    919a:	681b      	ldr	r3, [r3, #0]
    919c:	689b      	ldr	r3, [r3, #8]
    919e:	4798      	blx	r3
			buf->__buf = NULL;
    91a0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    91a2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    91a4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    91a6:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    91aa:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    91ac:	695b      	ldr	r3, [r3, #20]
    91ae:	b11b      	cbz	r3, 91b8 <net_buf_unref+0x4c>
			pool->destroy(buf);
    91b0:	4620      	mov	r0, r4
    91b2:	4798      	blx	r3
{
    91b4:	463c      	mov	r4, r7
    91b6:	e7dd      	b.n	9174 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    91b8:	4621      	mov	r1, r4
    91ba:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    91be:	f000 fa00 	bl	95c2 <k_queue_prepend>
    91c2:	e7f7      	b.n	91b4 <net_buf_unref+0x48>
    91c4:	20002c3c 	.word	0x20002c3c

000091c8 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    91c8:	7903      	ldrb	r3, [r0, #4]
    91ca:	3301      	adds	r3, #1
    91cc:	7103      	strb	r3, [r0, #4]
	return buf;
}
    91ce:	4770      	bx	lr

000091d0 <net_buf_simple_add>:
	return buf->data + buf->len;
    91d0:	8883      	ldrh	r3, [r0, #4]
    91d2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    91d4:	4419      	add	r1, r3
    91d6:	8081      	strh	r1, [r0, #4]
	return tail;
}
    91d8:	18d0      	adds	r0, r2, r3
    91da:	4770      	bx	lr

000091dc <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    91dc:	b430      	push	{r4, r5}
    91de:	8883      	ldrh	r3, [r0, #4]
    91e0:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    91e2:	189d      	adds	r5, r3, r2
    91e4:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    91e6:	18e0      	adds	r0, r4, r3
}
    91e8:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    91ea:	f7f7 b9f8 	b.w	5de <memcpy>

000091ee <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    91ee:	8883      	ldrh	r3, [r0, #4]
    91f0:	1a5b      	subs	r3, r3, r1
    91f2:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    91f4:	6803      	ldr	r3, [r0, #0]
    91f6:	4419      	add	r1, r3
    91f8:	6001      	str	r1, [r0, #0]
}
    91fa:	4608      	mov	r0, r1
    91fc:	4770      	bx	lr

000091fe <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    91fe:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    9200:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    9202:	2101      	movs	r1, #1
	val = buf->data[0];
    9204:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    9206:	f7ff fff2 	bl	91ee <net_buf_simple_pull>

	return val;
}
    920a:	4610      	mov	r0, r2
    920c:	bd08      	pop	{r3, pc}

0000920e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    920e:	6802      	ldr	r2, [r0, #0]
    9210:	6880      	ldr	r0, [r0, #8]
}
    9212:	1a10      	subs	r0, r2, r0
    9214:	4770      	bx	lr
	...

00009218 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    9218:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    921a:	4b08      	ldr	r3, [pc, #32]	; (923c <_sys_device_do_config_level+0x24>)
    921c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9220:	3001      	adds	r0, #1
    9222:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    9226:	4620      	mov	r0, r4
    9228:	4285      	cmp	r5, r0
    922a:	f104 040c 	add.w	r4, r4, #12
    922e:	d800      	bhi.n	9232 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    9230:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    9232:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    9236:	685b      	ldr	r3, [r3, #4]
    9238:	4798      	blx	r3
    923a:	e7f4      	b.n	9226 <_sys_device_do_config_level+0xe>
    923c:	0000a9c0 	.word	0x0000a9c0

00009240 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    9240:	4b10      	ldr	r3, [pc, #64]	; (9284 <device_get_binding+0x44>)
{
    9242:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    9244:	4c10      	ldr	r4, [pc, #64]	; (9288 <device_get_binding+0x48>)
{
    9246:	4605      	mov	r5, r0
    9248:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    924a:	429c      	cmp	r4, r3
    924c:	d104      	bne.n	9258 <device_get_binding+0x18>
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    924e:	4c0e      	ldr	r4, [pc, #56]	; (9288 <device_get_binding+0x48>)
    9250:	42b4      	cmp	r4, r6
    9252:	d109      	bne.n	9268 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    9254:	2400      	movs	r4, #0
    9256:	e012      	b.n	927e <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    9258:	6862      	ldr	r2, [r4, #4]
    925a:	b11a      	cbz	r2, 9264 <device_get_binding+0x24>
    925c:	6822      	ldr	r2, [r4, #0]
    925e:	6812      	ldr	r2, [r2, #0]
    9260:	42aa      	cmp	r2, r5
    9262:	d00c      	beq.n	927e <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9264:	340c      	adds	r4, #12
    9266:	e7f0      	b.n	924a <device_get_binding+0xa>
		if (!info->driver_api) {
    9268:	6863      	ldr	r3, [r4, #4]
    926a:	b90b      	cbnz	r3, 9270 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    926c:	340c      	adds	r4, #12
    926e:	e7ef      	b.n	9250 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    9270:	6823      	ldr	r3, [r4, #0]
    9272:	4628      	mov	r0, r5
    9274:	6819      	ldr	r1, [r3, #0]
    9276:	f7f7 f995 	bl	5a4 <strcmp>
    927a:	2800      	cmp	r0, #0
    927c:	d1f6      	bne.n	926c <device_get_binding+0x2c>
}
    927e:	4620      	mov	r0, r4
    9280:	bd70      	pop	{r4, r5, r6, pc}
    9282:	bf00      	nop
    9284:	20002c14 	.word	0x20002c14
    9288:	20002b84 	.word	0x20002b84

0000928c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    928c:	1c43      	adds	r3, r0, #1
    928e:	d003      	beq.n	9298 <_sys_power_save_idle_exit+0xc>
    9290:	4b03      	ldr	r3, [pc, #12]	; (92a0 <_sys_power_save_idle_exit+0x14>)
    9292:	681b      	ldr	r3, [r3, #0]
    9294:	4283      	cmp	r3, r0
    9296:	dc01      	bgt.n	929c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    9298:	f7f8 bcd8 	b.w	1c4c <_timer_idle_exit>
	}
}
    929c:	4770      	bx	lr
    929e:	bf00      	nop
    92a0:	20002b78 	.word	0x20002b78

000092a4 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    92a4:	4d0f      	ldr	r5, [pc, #60]	; (92e4 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    92a6:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    92a8:	4f0f      	ldr	r7, [pc, #60]	; (92e8 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92aa:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    92ae:	f04f 0220 	mov.w	r2, #32
    92b2:	f3ef 8311 	mrs	r3, BASEPRI
    92b6:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    92ba:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92bc:	42b3      	cmp	r3, r6
    92be:	d00a      	beq.n	92d6 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    92c0:	b14b      	cbz	r3, 92d6 <idle+0x32>
    92c2:	691c      	ldr	r4, [r3, #16]
    92c4:	1c63      	adds	r3, r4, #1
    92c6:	d008      	beq.n	92da <idle+0x36>
    92c8:	683b      	ldr	r3, [r7, #0]
    92ca:	42a3      	cmp	r3, r4
    92cc:	dd05      	ble.n	92da <idle+0x36>
	_kernel.idle = ticks;
    92ce:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    92d0:	f7f7 fce6 	bl	ca0 <k_cpu_idle>
    92d4:	e7eb      	b.n	92ae <idle+0xa>
    92d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    92da:	4620      	mov	r0, r4
    92dc:	f7f8 fca2 	bl	1c24 <_timer_idle_enter>
    92e0:	e7f5      	b.n	92ce <idle+0x2a>
    92e2:	bf00      	nop
    92e4:	20000d7c 	.word	0x20000d7c
    92e8:	20002b78 	.word	0x20002b78

000092ec <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    92ec:	4802      	ldr	r0, [pc, #8]	; (92f8 <_bss_zero+0xc>)
    92ee:	4a03      	ldr	r2, [pc, #12]	; (92fc <_bss_zero+0x10>)
    92f0:	2100      	movs	r1, #0
    92f2:	1a12      	subs	r2, r2, r0
    92f4:	f7f7 b9a0 	b.w	638 <memset>
    92f8:	20000000 	.word	0x20000000
    92fc:	20001008 	.word	0x20001008

00009300 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    9300:	4802      	ldr	r0, [pc, #8]	; (930c <_data_copy+0xc>)
    9302:	4a03      	ldr	r2, [pc, #12]	; (9310 <_data_copy+0x10>)
    9304:	4903      	ldr	r1, [pc, #12]	; (9314 <_data_copy+0x14>)
    9306:	1a12      	subs	r2, r2, r0
    9308:	f7f7 b969 	b.w	5de <memcpy>
    930c:	20002900 	.word	0x20002900
    9310:	20002c7c 	.word	0x20002c7c
    9314:	0000aa28 	.word	0x0000aa28

00009318 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    9318:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    931a:	2002      	movs	r0, #2
    931c:	f7ff ff7c 	bl	9218 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    9320:	4908      	ldr	r1, [pc, #32]	; (9344 <bg_thread_main+0x2c>)
    9322:	4809      	ldr	r0, [pc, #36]	; (9348 <bg_thread_main+0x30>)
    9324:	f7f7 ff8e 	bl	1244 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    9328:	2003      	movs	r0, #3
    932a:	f7ff ff75 	bl	9218 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    932e:	f000 fddb 	bl	9ee8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    9332:	f7f7 f9a3 	bl	67c <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    9336:	4a05      	ldr	r2, [pc, #20]	; (934c <bg_thread_main+0x34>)
    9338:	7a13      	ldrb	r3, [r2, #8]
    933a:	f023 0301 	bic.w	r3, r3, #1
    933e:	7213      	strb	r3, [r2, #8]
}
    9340:	bd08      	pop	{r3, pc}
    9342:	bf00      	nop
    9344:	0000a9dc 	.word	0x0000a9dc
    9348:	0000a9f8 	.word	0x0000a9f8
    934c:	20000d14 	.word	0x20000d14

00009350 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    9350:	b580      	push	{r7, lr}
    9352:	b086      	sub	sp, #24
    9354:	4e30      	ldr	r6, [pc, #192]	; (9418 <_Cstart+0xc8>)
    9356:	af06      	add	r7, sp, #24
	_IntLibInit();
    9358:	f7f7 fa5c 	bl	814 <_IntLibInit>
    935c:	2324      	movs	r3, #36	; 0x24
    935e:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    9360:	519a      	str	r2, [r3, r6]
    9362:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    9364:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    9368:	6052      	str	r2, [r2, #4]
    936a:	d1f8      	bne.n	935e <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    936c:	4d2b      	ldr	r5, [pc, #172]	; (941c <_Cstart+0xcc>)
	_setup_new_thread(_main_thread, _main_stack,
    936e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 9444 <_Cstart+0xf4>
	_ready_q.cache = _main_thread;
    9372:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    9374:	2400      	movs	r4, #0
    9376:	f04f 0801 	mov.w	r8, #1
    937a:	464b      	mov	r3, r9
    937c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9380:	4927      	ldr	r1, [pc, #156]	; (9420 <_Cstart+0xd0>)
    9382:	9400      	str	r4, [sp, #0]
    9384:	4628      	mov	r0, r5
    9386:	e9cd 4803 	strd	r4, r8, [sp, #12]
    938a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    938e:	f000 fd65 	bl	9e5c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9392:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    9394:	4628      	mov	r0, r5
    9396:	f023 0304 	bic.w	r3, r3, #4
    939a:	726b      	strb	r3, [r5, #9]
    939c:	f000 f96e 	bl	967c <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    93a0:	230f      	movs	r3, #15
    93a2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    93a6:	491f      	ldr	r1, [pc, #124]	; (9424 <_Cstart+0xd4>)
    93a8:	f8cd 8010 	str.w	r8, [sp, #16]
    93ac:	e9cd 4400 	strd	r4, r4, [sp]
    93b0:	4b1d      	ldr	r3, [pc, #116]	; (9428 <_Cstart+0xd8>)
    93b2:	481e      	ldr	r0, [pc, #120]	; (942c <_Cstart+0xdc>)
    93b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    93b8:	f000 fd50 	bl	9e5c <_setup_new_thread>
    93bc:	4a1b      	ldr	r2, [pc, #108]	; (942c <_Cstart+0xdc>)
    93be:	7a53      	ldrb	r3, [r2, #9]
    93c0:	f023 0304 	bic.w	r3, r3, #4
    93c4:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    93c6:	4610      	mov	r0, r2
    93c8:	f000 f958 	bl	967c <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    93cc:	4b18      	ldr	r3, [pc, #96]	; (9430 <_Cstart+0xe0>)
	list->tail = (sys_dnode_t *)list;
    93ce:	e9c6 3304 	strd	r3, r3, [r6, #16]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    93d2:	4b18      	ldr	r3, [pc, #96]	; (9434 <_Cstart+0xe4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    93d4:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    93d8:	4b17      	ldr	r3, [pc, #92]	; (9438 <_Cstart+0xe8>)
    93da:	22e0      	movs	r2, #224	; 0xe0
    93dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    93e0:	77dc      	strb	r4, [r3, #31]
    93e2:	761c      	strb	r4, [r3, #24]
    93e4:	765c      	strb	r4, [r3, #25]
    93e6:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    93e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    93ea:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    93ee:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    93f0:	f7f7 fbc6 	bl	b80 <_FaultInit>
	_CpuIdleInit();
    93f4:	f7f7 fc4e 	bl	c94 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    93f8:	4620      	mov	r0, r4
    93fa:	f7ff ff0d 	bl	9218 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    93fe:	4640      	mov	r0, r8
    9400:	f7ff ff0a 	bl	9218 <_sys_device_do_config_level>
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    9404:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    9406:	4b0d      	ldr	r3, [pc, #52]	; (943c <_Cstart+0xec>)
    9408:	4a0d      	ldr	r2, [pc, #52]	; (9440 <_Cstart+0xf0>)
    940a:	f383 8809 	msr	PSP, r3
    940e:	2100      	movs	r1, #0
    9410:	f381 8811 	msr	BASEPRI, r1
    9414:	4648      	mov	r0, r9
    9416:	4710      	bx	r2
    9418:	20000d7c 	.word	0x20000d7c
    941c:	20000d14 	.word	0x20000d14
    9420:	200017c0 	.word	0x200017c0
    9424:	20001bc0 	.word	0x20001bc0
    9428:	000092a5 	.word	0x000092a5
    942c:	20000cac 	.word	0x20000cac
    9430:	20000d8c 	.word	0x20000d8c
    9434:	20002500 	.word	0x20002500
    9438:	e000ed00 	.word	0xe000ed00
    943c:	20001bc0 	.word	0x20001bc0
    9440:	00009df5 	.word	0x00009df5
    9444:	00009319 	.word	0x00009319

00009448 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    9448:	b570      	push	{r4, r5, r6, lr}
    944a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    944c:	7ac0      	ldrb	r0, [r0, #11]
    944e:	250c      	movs	r5, #12
    9450:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
    9452:	4288      	cmp	r0, r1
    9454:	eb06 0405 	add.w	r4, r6, r5
    9458:	bfb4      	ite	lt
    945a:	5971      	ldrlt	r1, [r6, r5]
    945c:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
    945e:	2420      	movs	r4, #32
    9460:	fb92 f4f4 	sdiv	r4, r2, r4
    9464:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    9468:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    946a:	f002 001f 	and.w	r0, r2, #31
    946e:	bd70      	pop	{r4, r5, r6, pc}

00009470 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    9470:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    9472:	ab01      	add	r3, sp, #4
    9474:	f7ff ffe8 	bl	9448 <get_bit_ptr>

	*word |= (1<<bit);
    9478:	9a01      	ldr	r2, [sp, #4]
    947a:	2301      	movs	r3, #1
    947c:	fa03 f000 	lsl.w	r0, r3, r0
    9480:	6813      	ldr	r3, [r2, #0]
    9482:	4303      	orrs	r3, r0
    9484:	6013      	str	r3, [r2, #0]
}
    9486:	b003      	add	sp, #12
    9488:	f85d fb04 	ldr.w	pc, [sp], #4

0000948c <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9490:	4c2f      	ldr	r4, [pc, #188]	; (9550 <init_static_pools+0xc4>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9492:	4e30      	ldr	r6, [pc, #192]	; (9554 <init_static_pools+0xc8>)
		sys_dlist_init(&p->levels[i].free_list);
    9494:	270c      	movs	r7, #12
    9496:	f1a4 0518 	sub.w	r5, r4, #24
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    949a:	42b5      	cmp	r5, r6
    949c:	d302      	bcc.n	94a4 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    949e:	2000      	movs	r0, #0
    94a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    94a4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    94a8:	f834 cc10 	ldrh.w	ip, [r4, #-16]
	u32_t *bits = p->buf + buflen;
    94ac:	f854 0c18 	ldr.w	r0, [r4, #-24]
    94b0:	f1a4 0208 	sub.w	r2, r4, #8
    94b4:	e944 2202 	strd	r2, r2, [r4, #-8]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    94b8:	fb03 fc0c 	mul.w	ip, r3, ip
	u32_t *bits = p->buf + buflen;
    94bc:	4460      	add	r0, ip
	for (i = 0; i < p->n_levels; i++) {
    94be:	2100      	movs	r1, #0
    94c0:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    94c4:	4291      	cmp	r1, r2
    94c6:	db07      	blt.n	94d8 <init_static_pools+0x4c>
	for (i = 0; i < p->n_max; i++) {
    94c8:	f04f 0800 	mov.w	r8, #0
    94cc:	f834 3c10 	ldrh.w	r3, [r4, #-16]
    94d0:	4598      	cmp	r8, r3
    94d2:	db23      	blt.n	951c <init_static_pools+0x90>
    94d4:	3418      	adds	r4, #24
    94d6:	e7de      	b.n	9496 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    94d8:	f854 9c0c 	ldr.w	r9, [r4, #-12]
		int nblocks = buflen / sz;
    94dc:	fbbc f2f3 	udiv	r2, ip, r3
		sys_dlist_init(&p->levels[i].free_list);
    94e0:	fb07 f801 	mul.w	r8, r7, r1
		if (nblocks < 32) {
    94e4:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    94e6:	eb09 0e08 	add.w	lr, r9, r8
			bits += (nblocks + 31)/32;
    94ea:	bfc8      	it	gt
    94ec:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    94ee:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    94f2:	f10e 0a04 	add.w	sl, lr, #4
			bits += (nblocks + 31)/32;
    94f6:	bfc8      	it	gt
    94f8:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
    94fa:	f103 0303 	add.w	r3, r3, #3
    94fe:	e9ce aa01 	strd	sl, sl, [lr, #4]
    9502:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
    9506:	bfd4      	ite	le
    9508:	f804 1c0d 	strble.w	r1, [r4, #-13]
			p->levels[i].bits_p = bits;
    950c:	f849 0008 	strgt.w	r0, [r9, r8]
	for (i = 0; i < p->n_levels; i++) {
    9510:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
    9514:	bfc8      	it	gt
    9516:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
    951a:	e7d1      	b.n	94c0 <init_static_pools+0x34>
	return p->buf + lsz * block;
    951c:	f854 2c14 	ldr.w	r2, [r4, #-20]
		sys_dlist_append(&p->levels[0].free_list, block);
    9520:	f854 3c0c 	ldr.w	r3, [r4, #-12]
	return p->buf + lsz * block;
    9524:	f854 0c18 	ldr.w	r0, [r4, #-24]
    9528:	fb02 f208 	mul.w	r2, r2, r8
    952c:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
    952e:	f103 0c04 	add.w	ip, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    9532:	f840 c002 	str.w	ip, [r0, r2]
	node->prev = list->tail;
    9536:	689a      	ldr	r2, [r3, #8]
    9538:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    953a:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    953c:	4628      	mov	r0, r5
    953e:	6011      	str	r1, [r2, #0]
	list->tail = node;
    9540:	6099      	str	r1, [r3, #8]
    9542:	4642      	mov	r2, r8
    9544:	2100      	movs	r1, #0
    9546:	f7ff ff93 	bl	9470 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    954a:	f108 0801 	add.w	r8, r8, #1
    954e:	e7bd      	b.n	94cc <init_static_pools+0x40>
    9550:	20002c2c 	.word	0x20002c2c
    9554:	20002c14 	.word	0x20002c14

00009558 <k_queue_init>:
	list->head = NULL;
    9558:	2300      	movs	r3, #0
	list->tail = NULL;
    955a:	e9c0 3300 	strd	r3, r3, [r0]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    955e:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
    9562:	e9c0 3302 	strd	r3, r3, [r0, #8]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    9566:	4770      	bx	lr

00009568 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    9568:	b510      	push	{r4, lr}
    956a:	f04f 0320 	mov.w	r3, #32
    956e:	f3ef 8411 	mrs	r4, BASEPRI
    9572:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    9576:	b931      	cbnz	r1, 9586 <k_queue_insert+0x1e>
	node->next = list->head;
    9578:	6803      	ldr	r3, [r0, #0]
    957a:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    957c:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    957e:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    9580:	b943      	cbnz	r3, 9594 <k_queue_insert+0x2c>
		list->tail = node;
    9582:	6042      	str	r2, [r0, #4]
    9584:	e006      	b.n	9594 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    9586:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    9588:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    958a:	b98b      	cbnz	r3, 95b0 <k_queue_insert+0x48>
	if (!list->tail) {
    958c:	6843      	ldr	r3, [r0, #4]
    958e:	b96b      	cbnz	r3, 95ac <k_queue_insert+0x44>
		list->head = node;
    9590:	e9c0 2200 	strd	r2, r2, [r0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9594:	2104      	movs	r1, #4
    9596:	3008      	adds	r0, #8
    9598:	f000 fe9e 	bl	a2d8 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    959c:	b150      	cbz	r0, 95b4 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    959e:	f000 fa19 	bl	99d4 <_update_time_slice_before_swap>
	return __swap(key);
    95a2:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    95a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95a8:	f7f7 b940 	b.w	82c <__swap>
		list->tail->next = node;
    95ac:	601a      	str	r2, [r3, #0]
    95ae:	e7e8      	b.n	9582 <k_queue_insert+0x1a>
		prev->next = node;
    95b0:	600a      	str	r2, [r1, #0]
    95b2:	e7ef      	b.n	9594 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    95b4:	f384 8811 	msr	BASEPRI, r4
    95b8:	bd10      	pop	{r4, pc}

000095ba <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    95ba:	460a      	mov	r2, r1
    95bc:	6841      	ldr	r1, [r0, #4]
    95be:	f7ff bfd3 	b.w	9568 <k_queue_insert>

000095c2 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    95c2:	460a      	mov	r2, r1
    95c4:	2100      	movs	r1, #0
    95c6:	f7ff bfcf 	b.w	9568 <k_queue_insert>

000095ca <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    95ca:	b510      	push	{r4, lr}
	__asm__ volatile(
    95cc:	f04f 0320 	mov.w	r3, #32
    95d0:	f3ef 8411 	mrs	r4, BASEPRI
    95d4:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    95d8:	6843      	ldr	r3, [r0, #4]
    95da:	b96b      	cbnz	r3, 95f8 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    95dc:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    95de:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    95e0:	2104      	movs	r1, #4
    95e2:	3008      	adds	r0, #8
    95e4:	f000 fe78 	bl	a2d8 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    95e8:	b140      	cbz	r0, 95fc <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    95ea:	f000 f9f3 	bl	99d4 <_update_time_slice_before_swap>
	return __swap(key);
    95ee:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    95f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95f4:	f7f7 b91a 	b.w	82c <__swap>
		list->tail->next = (sys_snode_t *)head;
    95f8:	6019      	str	r1, [r3, #0]
    95fa:	e7f0      	b.n	95de <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    95fc:	f384 8811 	msr	BASEPRI, r4
    9600:	bd10      	pop	{r4, pc}

00009602 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9602:	b530      	push	{r4, r5, lr}
    9604:	4604      	mov	r4, r0
    9606:	b087      	sub	sp, #28
    9608:	460d      	mov	r5, r1
	__asm__ volatile(
    960a:	f04f 0220 	mov.w	r2, #32
    960e:	f3ef 8311 	mrs	r3, BASEPRI
    9612:	f382 8811 	msr	BASEPRI, r2
    9616:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    9618:	b132      	cbz	r2, 9628 <k_queue_get+0x26>
	if (list->tail == node) {
    961a:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    961c:	6811      	ldr	r1, [r2, #0]
    961e:	6021      	str	r1, [r4, #0]
	if (list->tail == node) {
    9620:	4282      	cmp	r2, r0
		list->tail = list->head;
    9622:	bf08      	it	eq
    9624:	6061      	streq	r1, [r4, #4]
    9626:	e000      	b.n	962a <k_queue_get+0x28>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
    9628:	b911      	cbnz	r1, 9630 <k_queue_get+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    962a:	f383 8811 	msr	BASEPRI, r3
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
    962e:	e014      	b.n	965a <k_queue_get+0x58>
    9630:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    9634:	2104      	movs	r1, #4
    9636:	4603      	mov	r3, r0
    9638:	eb0d 0001 	add.w	r0, sp, r1
    963c:	f000 fd95 	bl	a16a <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    9640:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    9644:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    9646:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    964a:	2101      	movs	r1, #1
    964c:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    964e:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    9652:	f000 fd9d 	bl	a190 <k_poll>
		if (err) {
    9656:	b118      	cbz	r0, 9660 <k_queue_get+0x5e>
			return NULL;
    9658:	2200      	movs	r2, #0
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    965a:	4610      	mov	r0, r2
    965c:	b007      	add	sp, #28
    965e:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
    9660:	f04f 0220 	mov.w	r2, #32
    9664:	f3ef 8311 	mrs	r3, BASEPRI
    9668:	f382 8811 	msr	BASEPRI, r2
    966c:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    966e:	2a00      	cmp	r2, #0
    9670:	d1d3      	bne.n	961a <k_queue_get+0x18>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9672:	f383 8811 	msr	BASEPRI, r3
	} while (!val && timeout == K_FOREVER);
    9676:	1c6b      	adds	r3, r5, #1
    9678:	d0e2      	beq.n	9640 <k_queue_get+0x3e>
    967a:	e7ed      	b.n	9658 <k_queue_get+0x56>

0000967c <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    967c:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    967e:	f990 500a 	ldrsb.w	r5, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    9682:	4a11      	ldr	r2, [pc, #68]	; (96c8 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    9684:	f105 0110 	add.w	r1, r5, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    9688:	114b      	asrs	r3, r1, #5
    968a:	3306      	adds	r3, #6
    968c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9690:	f001 041f 	and.w	r4, r1, #31
    9694:	2101      	movs	r1, #1
    9696:	40a1      	lsls	r1, r4
    9698:	689c      	ldr	r4, [r3, #8]
    969a:	4321      	orrs	r1, r4
    969c:	6099      	str	r1, [r3, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    969e:	f105 0314 	add.w	r3, r5, #20
    96a2:	00db      	lsls	r3, r3, #3
    96a4:	1d19      	adds	r1, r3, #4
	node->prev = list->tail;
    96a6:	4413      	add	r3, r2
    96a8:	4411      	add	r1, r2
	node->next = list;
    96aa:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    96ac:	6899      	ldr	r1, [r3, #8]
    96ae:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    96b0:	6899      	ldr	r1, [r3, #8]
    96b2:	6008      	str	r0, [r1, #0]
	list->tail = node;
    96b4:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    96b6:	69d3      	ldr	r3, [r2, #28]
    96b8:	f993 100a 	ldrsb.w	r1, [r3, #10]
    96bc:	42a9      	cmp	r1, r5
    96be:	bfd8      	it	le
    96c0:	4618      	movle	r0, r3
    96c2:	61d0      	str	r0, [r2, #28]
	_ready_q.prio_bmap[0] = 1;
# ifndef CONFIG_SMP
	_ready_q.cache = thread;
# endif
#endif
}
    96c4:	bd30      	pop	{r4, r5, pc}
    96c6:	bf00      	nop
    96c8:	20000d7c 	.word	0x20000d7c

000096cc <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    96cc:	7a42      	ldrb	r2, [r0, #9]
    96ce:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    96d2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    96d6:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    96d8:	d104      	bne.n	96e4 <_ready_thread+0x18>
    96da:	6a03      	ldr	r3, [r0, #32]
    96dc:	3301      	adds	r3, #1
    96de:	d101      	bne.n	96e4 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    96e0:	f7ff bfcc 	b.w	967c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    96e4:	4770      	bx	lr
	...

000096e8 <_add_timeout>:
{
    96e8:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    96ea:	610b      	str	r3, [r1, #16]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    96ec:	e9c1 0202 	strd	r0, r2, [r1, #8]
	if (!timeout_in_ticks) {
    96f0:	bb1b      	cbnz	r3, 973a <_add_timeout+0x52>
	__asm__ volatile(
    96f2:	f04f 0220 	mov.w	r2, #32
    96f6:	f3ef 8411 	mrs	r4, BASEPRI
    96fa:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    96fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9702:	610a      	str	r2, [r1, #16]
	if (thread) {
    9704:	b180      	cbz	r0, 9728 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    9706:	68ca      	ldr	r2, [r1, #12]
    9708:	b14a      	cbz	r2, 971e <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    970a:	e9d0 1200 	ldrd	r1, r2, [r0]
    970e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9710:	6801      	ldr	r1, [r0, #0]
    9712:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9714:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    9716:	61c3      	str	r3, [r0, #28]
    9718:	f022 0202 	bic.w	r2, r2, #2
    971c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    971e:	f7ff ffd5 	bl	96cc <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9722:	f384 8811 	msr	BASEPRI, r4
}
    9726:	bd70      	pop	{r4, r5, r6, pc}
    9728:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    972c:	694b      	ldr	r3, [r1, #20]
    972e:	2b00      	cmp	r3, #0
    9730:	d0f9      	beq.n	9726 <_add_timeout+0x3e>
			timeout->func(timeout);
    9732:	4608      	mov	r0, r1
}
    9734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    9738:	4718      	bx	r3
	return list->head == list;
    973a:	4a11      	ldr	r2, [pc, #68]	; (9780 <_add_timeout+0x98>)
    973c:	e9d2 3604 	ldrd	r3, r6, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9740:	f102 0010 	add.w	r0, r2, #16
    9744:	4283      	cmp	r3, r0
    9746:	4605      	mov	r5, r0
    9748:	d013      	beq.n	9772 <_add_timeout+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    974a:	b193      	cbz	r3, 9772 <_add_timeout+0x8a>
		if (*delta <= in_q->delta_ticks_from_prev) {
    974c:	6908      	ldr	r0, [r1, #16]
    974e:	691c      	ldr	r4, [r3, #16]
    9750:	42a0      	cmp	r0, r4
    9752:	dc08      	bgt.n	9766 <_add_timeout+0x7e>
		node->prev = insert_point->prev;
    9754:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    9756:	1a20      	subs	r0, r4, r0
    9758:	6118      	str	r0, [r3, #16]
		node->next = insert_point;
    975a:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    975e:	685a      	ldr	r2, [r3, #4]
    9760:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    9762:	6059      	str	r1, [r3, #4]
    9764:	e7df      	b.n	9726 <_add_timeout+0x3e>
		*delta -= in_q->delta_ticks_from_prev;
    9766:	1b00      	subs	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
    9768:	429e      	cmp	r6, r3
    976a:	6108      	str	r0, [r1, #16]
    976c:	d001      	beq.n	9772 <_add_timeout+0x8a>
    976e:	681b      	ldr	r3, [r3, #0]
    9770:	e7eb      	b.n	974a <_add_timeout+0x62>
	node->prev = list->tail;
    9772:	e9c1 5600 	strd	r5, r6, [r1]
	list->tail->next = node;
    9776:	6953      	ldr	r3, [r2, #20]
    9778:	6019      	str	r1, [r3, #0]
	list->tail = node;
    977a:	6151      	str	r1, [r2, #20]
    977c:	e7d3      	b.n	9726 <_add_timeout+0x3e>
    977e:	bf00      	nop
    9780:	20000d7c 	.word	0x20000d7c

00009784 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    9784:	b510      	push	{r4, lr}
	node->prev->next = node->next;
    9786:	e9d0 4300 	ldrd	r4, r3, [r0]
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    978a:	f990 200a 	ldrsb.w	r2, [r0, #10]
    978e:	601c      	str	r4, [r3, #0]
	node->next->prev = node->prev;
    9790:	6804      	ldr	r4, [r0, #0]
	return prio + _NUM_COOP_PRIO;
    9792:	f102 0110 	add.w	r1, r2, #16
    9796:	6063      	str	r3, [r4, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9798:	3214      	adds	r2, #20
    979a:	4b13      	ldr	r3, [pc, #76]	; (97e8 <_remove_thread_from_ready_q+0x64>)
    979c:	00d2      	lsls	r2, r2, #3
    979e:	1d14      	adds	r4, r2, #4
	return list->head == list;
    97a0:	441a      	add	r2, r3
    97a2:	441c      	add	r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    97a4:	6852      	ldr	r2, [r2, #4]
    97a6:	42a2      	cmp	r2, r4
    97a8:	d10c      	bne.n	97c4 <_remove_thread_from_ready_q+0x40>
	return (prio + _NUM_COOP_PRIO) >> 5;
    97aa:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    97ac:	3206      	adds	r2, #6
    97ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    97b2:	2401      	movs	r4, #1
    97b4:	f001 011f 	and.w	r1, r1, #31
    97b8:	fa04 f101 	lsl.w	r1, r4, r1
    97bc:	6894      	ldr	r4, [r2, #8]
    97be:	ea24 0401 	bic.w	r4, r4, r1
    97c2:	6094      	str	r4, [r2, #8]
		clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    97c4:	69da      	ldr	r2, [r3, #28]
    97c6:	4282      	cmp	r2, r0
    97c8:	d10b      	bne.n	97e2 <_remove_thread_from_ready_q+0x5e>
	return __builtin_ffs(op);
    97ca:	6a19      	ldr	r1, [r3, #32]
    97cc:	fa91 f2a1 	rbit	r2, r1
    97d0:	2900      	cmp	r1, #0
    97d2:	fab2 f282 	clz	r2, r2
    97d6:	bf08      	it	eq
    97d8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    97dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    97e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    97e2:	61da      	str	r2, [r3, #28]
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
# endif
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    97e4:	bd10      	pop	{r4, pc}
    97e6:	bf00      	nop
    97e8:	20000d7c 	.word	0x20000d7c

000097ec <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    97ec:	b430      	push	{r4, r5}
    97ee:	680c      	ldr	r4, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    97f0:	42a1      	cmp	r1, r4
    97f2:	d023      	beq.n	983c <_pend_thread+0x50>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    97f4:	b314      	cbz	r4, 983c <_pend_thread+0x50>
    97f6:	f990 300a 	ldrsb.w	r3, [r0, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    97fa:	f994 500a 	ldrsb.w	r5, [r4, #10]
    97fe:	429d      	cmp	r5, r3
    9800:	dd16      	ble.n	9830 <_pend_thread+0x44>
		node->prev = insert_point->prev;
    9802:	6863      	ldr	r3, [r4, #4]
		node->next = insert_point;
    9804:	e9c0 4300 	strd	r4, r3, [r0]
		insert_point->prev->next = node;
    9808:	6863      	ldr	r3, [r4, #4]
    980a:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    980c:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    980e:	7a43      	ldrb	r3, [r0, #9]
    9810:	f043 0302 	orr.w	r3, r3, #2
    9814:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    9816:	1c53      	adds	r3, r2, #1
    9818:	d017      	beq.n	984a <_pend_thread+0x5e>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    981a:	3209      	adds	r2, #9
    981c:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    981e:	bc30      	pop	{r4, r5}
    9820:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    9824:	460a      	mov	r2, r1
    9826:	3301      	adds	r3, #1
    9828:	f100 0110 	add.w	r1, r0, #16
    982c:	f7ff bf5c 	b.w	96e8 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    9830:	684d      	ldr	r5, [r1, #4]
    9832:	42ac      	cmp	r4, r5
    9834:	d002      	beq.n	983c <_pend_thread+0x50>
    9836:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    9838:	2c00      	cmp	r4, #0
    983a:	d1de      	bne.n	97fa <_pend_thread+0xe>
	node->prev = list->tail;
    983c:	684b      	ldr	r3, [r1, #4]
    983e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    9840:	684b      	ldr	r3, [r1, #4]
	node->next = list;
    9842:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    9844:	6018      	str	r0, [r3, #0]
	list->tail = node;
    9846:	6048      	str	r0, [r1, #4]
    9848:	e7e1      	b.n	980e <_pend_thread+0x22>
}
    984a:	bc30      	pop	{r4, r5}
    984c:	4770      	bx	lr
	...

00009850 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    9850:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    9852:	4c06      	ldr	r4, [pc, #24]	; (986c <_pend_current_thread+0x1c>)
{
    9854:	460e      	mov	r6, r1
    9856:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    9858:	68a0      	ldr	r0, [r4, #8]
    985a:	f7ff ff93 	bl	9784 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    985e:	4632      	mov	r2, r6
    9860:	4629      	mov	r1, r5
    9862:	68a0      	ldr	r0, [r4, #8]
}
    9864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    9868:	f7ff bfc0 	b.w	97ec <_pend_thread>
    986c:	20000d7c 	.word	0x20000d7c

00009870 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    9870:	4a09      	ldr	r2, [pc, #36]	; (9898 <__must_switch_threads+0x28>)
    9872:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    9874:	6892      	ldr	r2, [r2, #8]
    9876:	2900      	cmp	r1, #0
    9878:	fa91 f3a1 	rbit	r3, r1
    987c:	f992 000a 	ldrsb.w	r0, [r2, #10]
    9880:	fab3 f383 	clz	r3, r3
    9884:	bf08      	it	eq
    9886:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    988a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    988c:	4298      	cmp	r0, r3
    988e:	bfd4      	ite	le
    9890:	2000      	movle	r0, #0
    9892:	2001      	movgt	r0, #1
    9894:	4770      	bx	lr
    9896:	bf00      	nop
    9898:	20000d7c 	.word	0x20000d7c

0000989c <_reschedule_threads>:
	return _is_preempt(_current) && __must_switch_threads();
    989c:	4b0a      	ldr	r3, [pc, #40]	; (98c8 <_reschedule_threads+0x2c>)
    989e:	689b      	ldr	r3, [r3, #8]
    98a0:	895b      	ldrh	r3, [r3, #10]
    98a2:	2b7f      	cmp	r3, #127	; 0x7f
{
    98a4:	b510      	push	{r4, lr}
    98a6:	4604      	mov	r4, r0
    98a8:	d80a      	bhi.n	98c0 <_reschedule_threads+0x24>
    98aa:	f7ff ffe1 	bl	9870 <__must_switch_threads>
    98ae:	b138      	cbz	r0, 98c0 <_reschedule_threads+0x24>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    98b0:	4b06      	ldr	r3, [pc, #24]	; (98cc <_reschedule_threads+0x30>)
    98b2:	2200      	movs	r2, #0
    98b4:	4620      	mov	r0, r4
}
    98b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    98ba:	601a      	str	r2, [r3, #0]
    98bc:	f7f6 bfb6 	b.w	82c <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    98c0:	f384 8811 	msr	BASEPRI, r4
}
    98c4:	bd10      	pop	{r4, pc}
    98c6:	bf00      	nop
    98c8:	20000d7c 	.word	0x20000d7c
    98cc:	20000f84 	.word	0x20000f84

000098d0 <k_sched_unlock>:
	__asm__ volatile(
    98d0:	f04f 0320 	mov.w	r3, #32
    98d4:	f3ef 8011 	mrs	r0, BASEPRI
    98d8:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    98dc:	4b03      	ldr	r3, [pc, #12]	; (98ec <k_sched_unlock+0x1c>)
    98de:	689a      	ldr	r2, [r3, #8]
    98e0:	7ad3      	ldrb	r3, [r2, #11]
    98e2:	3301      	adds	r3, #1
    98e4:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    98e6:	f7ff bfd9 	b.w	989c <_reschedule_threads>
    98ea:	bf00      	nop
    98ec:	20000d7c 	.word	0x20000d7c

000098f0 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    98f0:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    98f4:	4a12      	ldr	r2, [pc, #72]	; (9940 <_move_thread_to_end_of_prio_q+0x50>)
    98f6:	3314      	adds	r3, #20
    98f8:	00db      	lsls	r3, r3, #3
    98fa:	1d19      	adds	r1, r3, #4
    98fc:	4411      	add	r1, r2
{
    98fe:	b530      	push	{r4, r5, lr}
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    9900:	684c      	ldr	r4, [r1, #4]
    9902:	42a0      	cmp	r0, r4
    9904:	d01b      	beq.n	993e <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    9906:	e9d0 5400 	ldrd	r5, r4, [r0]
    990a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    990c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    990e:	4413      	add	r3, r2
	node->next->prev = node->prev;
    9910:	606c      	str	r4, [r5, #4]
	node->next = list;
    9912:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    9914:	6899      	ldr	r1, [r3, #8]
    9916:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    9918:	6899      	ldr	r1, [r3, #8]
    991a:	6008      	str	r0, [r1, #0]
	list->tail = node;
    991c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    991e:	69d3      	ldr	r3, [r2, #28]
    9920:	4283      	cmp	r3, r0
    9922:	d10b      	bne.n	993c <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    9924:	6a11      	ldr	r1, [r2, #32]
    9926:	fa91 f3a1 	rbit	r3, r1
    992a:	2900      	cmp	r1, #0
    992c:	fab3 f383 	clz	r3, r3
    9930:	bf08      	it	eq
    9932:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9936:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    993c:	61d3      	str	r3, [r2, #28]
}
    993e:	bd30      	pop	{r4, r5, pc}
    9940:	20000d7c 	.word	0x20000d7c

00009944 <_impl_k_yield>:
{
    9944:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9946:	f04f 0320 	mov.w	r3, #32
    994a:	f3ef 8511 	mrs	r5, BASEPRI
    994e:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    9952:	4c09      	ldr	r4, [pc, #36]	; (9978 <_impl_k_yield+0x34>)
    9954:	68a0      	ldr	r0, [r4, #8]
    9956:	f7ff ffcb 	bl	98f0 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    995a:	68a2      	ldr	r2, [r4, #8]
    995c:	69e3      	ldr	r3, [r4, #28]
    995e:	429a      	cmp	r2, r3
    9960:	d102      	bne.n	9968 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9962:	f385 8811 	msr	BASEPRI, r5
}
    9966:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    9968:	4b04      	ldr	r3, [pc, #16]	; (997c <_impl_k_yield+0x38>)
    996a:	2200      	movs	r2, #0
    996c:	601a      	str	r2, [r3, #0]
    996e:	4628      	mov	r0, r5
}
    9970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9974:	f7f6 bf5a 	b.w	82c <__swap>
    9978:	20000d7c 	.word	0x20000d7c
    997c:	20000f84 	.word	0x20000f84

00009980 <_impl_k_current_get>:
}
    9980:	4b01      	ldr	r3, [pc, #4]	; (9988 <_impl_k_current_get+0x8>)
    9982:	6898      	ldr	r0, [r3, #8]
    9984:	4770      	bx	lr
    9986:	bf00      	nop
    9988:	20000d7c 	.word	0x20000d7c

0000998c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    998c:	4b0d      	ldr	r3, [pc, #52]	; (99c4 <_is_thread_time_slicing+0x38>)
    998e:	681b      	ldr	r3, [r3, #0]
    9990:	2b00      	cmp	r3, #0
    9992:	dd14      	ble.n	99be <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    9994:	4b0c      	ldr	r3, [pc, #48]	; (99c8 <_is_thread_time_slicing+0x3c>)
    9996:	681b      	ldr	r3, [r3, #0]
    9998:	4298      	cmp	r0, r3
    999a:	d010      	beq.n	99be <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    999c:	4a0b      	ldr	r2, [pc, #44]	; (99cc <_is_thread_time_slicing+0x40>)
    999e:	f990 300a 	ldrsb.w	r3, [r0, #10]
    99a2:	6812      	ldr	r2, [r2, #0]
    99a4:	4293      	cmp	r3, r2
    99a6:	db0a      	blt.n	99be <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    99a8:	f103 0214 	add.w	r2, r3, #20
    99ac:	4b08      	ldr	r3, [pc, #32]	; (99d0 <_is_thread_time_slicing+0x44>)
    99ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    99b2:	e9d3 0301 	ldrd	r0, r3, [r3, #4]
    99b6:	1ac0      	subs	r0, r0, r3
    99b8:	bf18      	it	ne
    99ba:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    99bc:	4770      	bx	lr
		return 0;
    99be:	2000      	movs	r0, #0
}
    99c0:	4770      	bx	lr
    99c2:	bf00      	nop
    99c4:	20000ea0 	.word	0x20000ea0
    99c8:	0000a9d8 	.word	0x0000a9d8
    99cc:	20000ea4 	.word	0x20000ea4
    99d0:	20000d7c 	.word	0x20000d7c

000099d4 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    99d4:	4b01      	ldr	r3, [pc, #4]	; (99dc <_update_time_slice_before_swap+0x8>)
    99d6:	2200      	movs	r2, #0
    99d8:	601a      	str	r2, [r3, #0]
}
    99da:	4770      	bx	lr
    99dc:	20000f84 	.word	0x20000f84

000099e0 <_find_first_thread_to_unpend.constprop.8>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    99e0:	4b0b      	ldr	r3, [pc, #44]	; (9a10 <_find_first_thread_to_unpend.constprop.8+0x30>)
    99e2:	681a      	ldr	r2, [r3, #0]
    99e4:	6803      	ldr	r3, [r0, #0]
    99e6:	b172      	cbz	r2, 9a06 <_find_first_thread_to_unpend.constprop.8+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    99e8:	4298      	cmp	r0, r3
    99ea:	d108      	bne.n	99fe <_find_first_thread_to_unpend.constprop.8+0x1e>
    99ec:	2300      	movs	r3, #0
    99ee:	e008      	b.n	9a02 <_find_first_thread_to_unpend.constprop.8+0x22>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    99f0:	6a1a      	ldr	r2, [r3, #32]
    99f2:	3202      	adds	r2, #2
    99f4:	d105      	bne.n	9a02 <_find_first_thread_to_unpend.constprop.8+0x22>
	return (node == list->tail) ? NULL : node->next;
    99f6:	6842      	ldr	r2, [r0, #4]
    99f8:	4293      	cmp	r3, r2
    99fa:	d0f7      	beq.n	99ec <_find_first_thread_to_unpend.constprop.8+0xc>
    99fc:	681b      	ldr	r3, [r3, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    99fe:	2b00      	cmp	r3, #0
    9a00:	d1f6      	bne.n	99f0 <_find_first_thread_to_unpend.constprop.8+0x10>
	ARG_UNUSED(from);
#endif

	return (struct k_thread *)sys_dlist_peek_head(wait_q);

}
    9a02:	4618      	mov	r0, r3
    9a04:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a06:	4298      	cmp	r0, r3
    9a08:	bf08      	it	eq
    9a0a:	2300      	moveq	r3, #0
    9a0c:	e7f9      	b.n	9a02 <_find_first_thread_to_unpend.constprop.8+0x22>
    9a0e:	bf00      	nop
    9a10:	20000f80 	.word	0x20000f80

00009a14 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    9a14:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    9a18:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    9a1c:	e9c0 0000 	strd	r0, r0, [r0]
    9a20:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    9a24:	4770      	bx	lr
	...

00009a28 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    9a28:	b570      	push	{r4, r5, r6, lr}
    9a2a:	4605      	mov	r5, r0
	__asm__ volatile(
    9a2c:	f04f 0320 	mov.w	r3, #32
    9a30:	f3ef 8611 	mrs	r6, BASEPRI
    9a34:	f383 8811 	msr	BASEPRI, r3

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    9a38:	f7ff ffd2 	bl	99e0 <_find_first_thread_to_unpend.constprop.8>

	if (thread) {
    9a3c:	4604      	mov	r4, r0
    9a3e:	2800      	cmp	r0, #0
    9a40:	d046      	beq.n	9ad0 <_impl_k_sem_give+0xa8>
	node->prev->next = node->next;
    9a42:	e9d0 2300 	ldrd	r2, r3, [r0]
    9a46:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9a48:	6802      	ldr	r2, [r0, #0]
    9a4a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9a4c:	7a43      	ldrb	r3, [r0, #9]
    9a4e:	f023 0302 	bic.w	r3, r3, #2
    9a52:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9a54:	6a21      	ldr	r1, [r4, #32]
    9a56:	1c4a      	adds	r2, r1, #1
	return _abort_timeout(&thread->base.timeout);
    9a58:	f100 0010 	add.w	r0, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9a5c:	d00e      	beq.n	9a7c <_impl_k_sem_give+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9a5e:	4a22      	ldr	r2, [pc, #136]	; (9ae8 <_impl_k_sem_give+0xc0>)
    9a60:	6923      	ldr	r3, [r4, #16]
    9a62:	6952      	ldr	r2, [r2, #20]
    9a64:	4290      	cmp	r0, r2
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9a66:	bf1e      	ittt	ne
    9a68:	691a      	ldrne	r2, [r3, #16]
    9a6a:	1852      	addne	r2, r2, r1
    9a6c:	611a      	strne	r2, [r3, #16]
	node->prev->next = node->next;
    9a6e:	6962      	ldr	r2, [r4, #20]
    9a70:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    9a72:	6923      	ldr	r3, [r4, #16]
    9a74:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    9a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9a7a:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9a7c:	7a63      	ldrb	r3, [r4, #9]
    9a7e:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    9a82:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9a86:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    9a88:	d105      	bne.n	9a96 <_impl_k_sem_give+0x6e>
    9a8a:	6a23      	ldr	r3, [r4, #32]
    9a8c:	3301      	adds	r3, #1
    9a8e:	d102      	bne.n	9a96 <_impl_k_sem_give+0x6e>
		_add_thread_to_ready_q(thread);
    9a90:	4620      	mov	r0, r4
    9a92:	f7ff fdf3 	bl	967c <_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9a96:	2300      	movs	r3, #0
    9a98:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9a9a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    9a9e:	2b0d      	cmp	r3, #13
    9aa0:	d813      	bhi.n	9aca <_impl_k_sem_give+0xa2>
    9aa2:	b11b      	cbz	r3, 9aac <_impl_k_sem_give+0x84>
    9aa4:	4b11      	ldr	r3, [pc, #68]	; (9aec <_impl_k_sem_give+0xc4>)
    9aa6:	685b      	ldr	r3, [r3, #4]
    9aa8:	051b      	lsls	r3, r3, #20
    9aaa:	d50e      	bpl.n	9aca <_impl_k_sem_give+0xa2>
	return _is_preempt(_current) && __must_switch_threads();
    9aac:	4b0e      	ldr	r3, [pc, #56]	; (9ae8 <_impl_k_sem_give+0xc0>)
    9aae:	689b      	ldr	r3, [r3, #8]
    9ab0:	895b      	ldrh	r3, [r3, #10]
    9ab2:	2b7f      	cmp	r3, #127	; 0x7f
    9ab4:	d809      	bhi.n	9aca <_impl_k_sem_give+0xa2>
    9ab6:	f7ff fedb 	bl	9870 <__must_switch_threads>
    9aba:	b130      	cbz	r0, 9aca <_impl_k_sem_give+0xa2>
	_update_time_slice_before_swap();
    9abc:	f7ff ff8a 	bl	99d4 <_update_time_slice_before_swap>
	return __swap(key);
    9ac0:	4630      	mov	r0, r6
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    9ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ac6:	f7f6 beb1 	b.w	82c <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9aca:	f386 8811 	msr	BASEPRI, r6
    9ace:	bd70      	pop	{r4, r5, r6, pc}
	sem->count += (sem->count != sem->limit);
    9ad0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    9ad4:	429a      	cmp	r2, r3
    9ad6:	bf18      	it	ne
    9ad8:	3301      	addne	r3, #1
    9ada:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    9adc:	2102      	movs	r1, #2
    9ade:	f105 0010 	add.w	r0, r5, #16
    9ae2:	f000 fbf9 	bl	a2d8 <_handle_obj_poll_events>
    9ae6:	e7e8      	b.n	9aba <_impl_k_sem_give+0x92>
    9ae8:	20000d7c 	.word	0x20000d7c
    9aec:	e000ed00 	.word	0xe000ed00

00009af0 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    9af0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9af2:	f04f 0320 	mov.w	r3, #32
    9af6:	f3ef 8411 	mrs	r4, BASEPRI
    9afa:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    9afe:	6883      	ldr	r3, [r0, #8]
    9b00:	b12b      	cbz	r3, 9b0e <_impl_k_sem_take+0x1e>
		sem->count--;
    9b02:	3b01      	subs	r3, #1
    9b04:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9b06:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    9b0a:	2000      	movs	r0, #0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    9b0c:	bd38      	pop	{r3, r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    9b0e:	b921      	cbnz	r1, 9b1a <_impl_k_sem_take+0x2a>
    9b10:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
    9b14:	f06f 000f 	mvn.w	r0, #15
    9b18:	e7f8      	b.n	9b0c <_impl_k_sem_take+0x1c>
	_pend_current_thread(&sem->wait_q, timeout);
    9b1a:	f7ff fe99 	bl	9850 <_pend_current_thread>
	_update_time_slice_before_swap();
    9b1e:	f7ff ff59 	bl	99d4 <_update_time_slice_before_swap>
	return __swap(key);
    9b22:	4620      	mov	r0, r4
}
    9b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9b28:	f7f6 be80 	b.w	82c <__swap>

00009b2c <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    9b2c:	4b03      	ldr	r3, [pc, #12]	; (9b3c <_impl_k_uptime_get_32+0x10>)
    9b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
    9b32:	230a      	movs	r3, #10
    9b34:	4610      	mov	r0, r2
    9b36:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    9b3a:	4770      	bx	lr
    9b3c:	20000f88 	.word	0x20000f88

00009b40 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    9b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b44:	4607      	mov	r7, r0
	__asm__ volatile(
    9b46:	f04f 0320 	mov.w	r3, #32
    9b4a:	f3ef 8011 	mrs	r0, BASEPRI
    9b4e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    9b52:	4961      	ldr	r1, [pc, #388]	; (9cd8 <_nano_sys_clock_tick_announce+0x198>)
    9b54:	e9d1 4500 	ldrd	r4, r5, [r1]
    9b58:	19e2      	adds	r2, r4, r7
    9b5a:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    9b5e:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9b62:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    9b66:	466e      	mov	r6, sp
	list->tail = (sys_dnode_t *)list;
    9b68:	e9cd 6600 	strd	r6, r6, [sp]
	__asm__ volatile(
    9b6c:	f04f 0320 	mov.w	r3, #32
    9b70:	f3ef 8011 	mrs	r0, BASEPRI
    9b74:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    9b78:	4c58      	ldr	r4, [pc, #352]	; (9cdc <_nano_sys_clock_tick_announce+0x19c>)
    9b7a:	4621      	mov	r1, r4
    9b7c:	4602      	mov	r2, r0
    9b7e:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9b82:	428b      	cmp	r3, r1
    9b84:	d000      	beq.n	9b88 <_nano_sys_clock_tick_announce+0x48>
	if (!next) {
    9b86:	b9fb      	cbnz	r3, 9bc8 <_nano_sys_clock_tick_announce+0x88>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9b88:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    9b8c:	68a0      	ldr	r0, [r4, #8]
    9b8e:	f7ff fefd 	bl	998c <_is_thread_time_slicing>
    9b92:	b1b0      	cbz	r0, 9bc2 <_nano_sys_clock_tick_announce+0x82>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    9b94:	4a52      	ldr	r2, [pc, #328]	; (9ce0 <_nano_sys_clock_tick_announce+0x1a0>)
    9b96:	6811      	ldr	r1, [r2, #0]
    9b98:	230a      	movs	r3, #10
    9b9a:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    9b9e:	4b51      	ldr	r3, [pc, #324]	; (9ce4 <_nano_sys_clock_tick_announce+0x1a4>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    9ba0:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    9ba2:	681b      	ldr	r3, [r3, #0]
    9ba4:	429f      	cmp	r7, r3
    9ba6:	db0c      	blt.n	9bc2 <_nano_sys_clock_tick_announce+0x82>
		_time_slice_elapsed = 0;
    9ba8:	2300      	movs	r3, #0
    9baa:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    9bac:	f04f 0320 	mov.w	r3, #32
    9bb0:	f3ef 8511 	mrs	r5, BASEPRI
    9bb4:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    9bb8:	68a0      	ldr	r0, [r4, #8]
    9bba:	f7ff fe99 	bl	98f0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9bbe:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    9bc2:	b003      	add	sp, #12
    9bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    9bc8:	4d47      	ldr	r5, [pc, #284]	; (9ce8 <_nano_sys_clock_tick_announce+0x1a8>)
    9bca:	2101      	movs	r1, #1
    9bcc:	6029      	str	r1, [r5, #0]
    9bce:	46ab      	mov	fp, r5
    9bd0:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    9bd2:	f04f 0c00 	mov.w	ip, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    9bd6:	f06f 0e01 	mvn.w	lr, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    9bda:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    9bdc:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    9bde:	bfaa      	itet	ge
    9be0:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    9be4:	f8c3 c010 	strlt.w	ip, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    9be8:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    9bec:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    9bee:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    9bf0:	691d      	ldr	r5, [r3, #16]
    9bf2:	4298      	cmp	r0, r3
    9bf4:	bf14      	ite	ne
    9bf6:	6818      	ldrne	r0, [r3, #0]
    9bf8:	2000      	moveq	r0, #0
    9bfa:	b9d5      	cbnz	r5, 9c32 <_nano_sys_clock_tick_announce+0xf2>
	node->prev->next = node->next;
    9bfc:	e9d3 5900 	ldrd	r5, r9, [r3]
    9c00:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    9c04:	681d      	ldr	r5, [r3, #0]
    9c06:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    9c0a:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    9c0c:	e9c3 5600 	strd	r5, r6, [r3]
	list->head->prev = node;
    9c10:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    9c12:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    9c14:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    9c16:	f8c3 e010 	str.w	lr, [r3, #16]
    9c1a:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    9c1e:	f04f 0320 	mov.w	r3, #32
    9c22:	f3ef 8211 	mrs	r2, BASEPRI
    9c26:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    9c2a:	4603      	mov	r3, r0
    9c2c:	2800      	cmp	r0, #0
    9c2e:	d1d4      	bne.n	9bda <_nano_sys_clock_tick_announce+0x9a>
    9c30:	e001      	b.n	9c36 <_nano_sys_clock_tick_announce+0xf6>
		} else if (ticks <= 0) {
    9c32:	2900      	cmp	r1, #0
    9c34:	dcf1      	bgt.n	9c1a <_nano_sys_clock_tick_announce+0xda>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9c36:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    9c3a:	9b00      	ldr	r3, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c3c:	42b3      	cmp	r3, r6
    9c3e:	d103      	bne.n	9c48 <_nano_sys_clock_tick_announce+0x108>
	_handling_timeouts = 0;
    9c40:	2300      	movs	r3, #0
    9c42:	f8cb 3000 	str.w	r3, [fp]
    9c46:	e7a1      	b.n	9b8c <_nano_sys_clock_tick_announce+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d0f9      	beq.n	9c40 <_nano_sys_clock_tick_announce+0x100>
    9c4c:	681e      	ldr	r6, [r3, #0]
    9c4e:	9a01      	ldr	r2, [sp, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    9c50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    9c54:	4293      	cmp	r3, r2
    9c56:	bf08      	it	eq
    9c58:	2600      	moveq	r6, #0
		thread->base.timeout.wait_q = NULL;
    9c5a:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    9c5e:	e9d3 1200 	ldrd	r1, r2, [r3]
    9c62:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9c64:	6819      	ldr	r1, [r3, #0]
	struct k_thread *thread = timeout->thread;
    9c66:	6898      	ldr	r0, [r3, #8]
    9c68:	604a      	str	r2, [r1, #4]
	__asm__ volatile(
    9c6a:	f04f 0220 	mov.w	r2, #32
    9c6e:	f3ef 8a11 	mrs	sl, BASEPRI
    9c72:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    9c76:	f8c3 8010 	str.w	r8, [r3, #16]
	if (thread) {
    9c7a:	b308      	cbz	r0, 9cc0 <_nano_sys_clock_tick_announce+0x180>
	if (timeout_obj->wait_q) {
    9c7c:	68db      	ldr	r3, [r3, #12]
    9c7e:	b153      	cbz	r3, 9c96 <_nano_sys_clock_tick_announce+0x156>
	node->prev->next = node->next;
    9c80:	e9d0 3200 	ldrd	r3, r2, [r0]
    9c84:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    9c86:	6803      	ldr	r3, [r0, #0]
    9c88:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9c8a:	7a43      	ldrb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    9c8c:	f8c0 901c 	str.w	r9, [r0, #28]
    9c90:	f023 0302 	bic.w	r3, r3, #2
    9c94:	7243      	strb	r3, [r0, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9c96:	7a43      	ldrb	r3, [r0, #9]
    9c98:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    9c9c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9ca0:	7242      	strb	r2, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    9ca2:	d104      	bne.n	9cae <_nano_sys_clock_tick_announce+0x16e>
    9ca4:	6a03      	ldr	r3, [r0, #32]
    9ca6:	3301      	adds	r3, #1
    9ca8:	d101      	bne.n	9cae <_nano_sys_clock_tick_announce+0x16e>
		_add_thread_to_ready_q(thread);
    9caa:	f7ff fce7 	bl	967c <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9cae:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    9cb2:	2e00      	cmp	r6, #0
    9cb4:	d0c4      	beq.n	9c40 <_nano_sys_clock_tick_announce+0x100>
	return (node == list->tail) ? NULL : node->next;
    9cb6:	9b01      	ldr	r3, [sp, #4]
    9cb8:	42b3      	cmp	r3, r6
    9cba:	d109      	bne.n	9cd0 <_nano_sys_clock_tick_announce+0x190>
    9cbc:	2200      	movs	r2, #0
    9cbe:	e008      	b.n	9cd2 <_nano_sys_clock_tick_announce+0x192>
    9cc0:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    9cc4:	695a      	ldr	r2, [r3, #20]
    9cc6:	2a00      	cmp	r2, #0
    9cc8:	d0f3      	beq.n	9cb2 <_nano_sys_clock_tick_announce+0x172>
			timeout->func(timeout);
    9cca:	4618      	mov	r0, r3
    9ccc:	4790      	blx	r2
    9cce:	e7f0      	b.n	9cb2 <_nano_sys_clock_tick_announce+0x172>
    9cd0:	6832      	ldr	r2, [r6, #0]
    9cd2:	4633      	mov	r3, r6
    9cd4:	4616      	mov	r6, r2
    9cd6:	e7c2      	b.n	9c5e <_nano_sys_clock_tick_announce+0x11e>
    9cd8:	20000f88 	.word	0x20000f88
    9cdc:	20000d7c 	.word	0x20000d7c
    9ce0:	20000f84 	.word	0x20000f84
    9ce4:	20000ea0 	.word	0x20000ea0
    9ce8:	20000f80 	.word	0x20000f80

00009cec <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    9cec:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    9cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9cf6:	4903      	ldr	r1, [pc, #12]	; (9d04 <k_sys_work_q_init+0x18>)
    9cf8:	4803      	ldr	r0, [pc, #12]	; (9d08 <k_sys_work_q_init+0x1c>)
    9cfa:	f000 f96b 	bl	9fd4 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    9cfe:	2000      	movs	r0, #0
    9d00:	bd08      	pop	{r3, pc}
    9d02:	bf00      	nop
    9d04:	20002500 	.word	0x20002500
    9d08:	20000f90 	.word	0x20000f90

00009d0c <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    9d0c:	7a43      	ldrb	r3, [r0, #9]
    9d0e:	06da      	lsls	r2, r3, #27
    9d10:	d104      	bne.n	9d1c <_is_thread_ready+0x10>
    9d12:	6a00      	ldr	r0, [r0, #32]
    9d14:	1c43      	adds	r3, r0, #1
    9d16:	4258      	negs	r0, r3
    9d18:	4158      	adcs	r0, r3
    9d1a:	4770      	bx	lr
    9d1c:	2000      	movs	r0, #0
}
    9d1e:	4770      	bx	lr

00009d20 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9d20:	6903      	ldr	r3, [r0, #16]
    9d22:	1c5a      	adds	r2, r3, #1
    9d24:	d010      	beq.n	9d48 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9d26:	4909      	ldr	r1, [pc, #36]	; (9d4c <_abort_timeout+0x2c>)
    9d28:	6802      	ldr	r2, [r0, #0]
    9d2a:	6949      	ldr	r1, [r1, #20]
    9d2c:	4288      	cmp	r0, r1
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9d2e:	bf1e      	ittt	ne
    9d30:	6911      	ldrne	r1, [r2, #16]
    9d32:	185b      	addne	r3, r3, r1
    9d34:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    9d36:	6843      	ldr	r3, [r0, #4]
    9d38:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9d3a:	6802      	ldr	r2, [r0, #0]
    9d3c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    9d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d42:	6103      	str	r3, [r0, #16]
	return 0;
    9d44:	2000      	movs	r0, #0
    9d46:	4770      	bx	lr
		return _INACTIVE;
    9d48:	4618      	mov	r0, r3
}
    9d4a:	4770      	bx	lr
    9d4c:	20000d7c 	.word	0x20000d7c

00009d50 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    9d50:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    9d52:	f04f 0320 	mov.w	r3, #32
    9d56:	f3ef 8611 	mrs	r6, BASEPRI
    9d5a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    9d5e:	4a18      	ldr	r2, [pc, #96]	; (9dc0 <schedule_new_thread.part.13+0x70>)
	timeout->thread = thread;
    9d60:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    9d62:	230a      	movs	r3, #10
    9d64:	3109      	adds	r1, #9
    9d66:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    9d6a:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    9d6c:	6201      	str	r1, [r0, #32]
    9d6e:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    9d70:	2300      	movs	r3, #0
    9d72:	61c3      	str	r3, [r0, #28]
    9d74:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d78:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    9d7a:	f100 0510 	add.w	r5, r0, #16
    9d7e:	d018      	beq.n	9db2 <schedule_new_thread.part.13+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9d80:	b1bb      	cbz	r3, 9db2 <schedule_new_thread.part.13+0x62>
    9d82:	f8d2 c014 	ldr.w	ip, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    9d86:	6a04      	ldr	r4, [r0, #32]
    9d88:	691f      	ldr	r7, [r3, #16]
    9d8a:	42bc      	cmp	r4, r7
    9d8c:	dc0a      	bgt.n	9da4 <schedule_new_thread.part.13+0x54>
		node->prev = insert_point->prev;
    9d8e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    9d90:	1b3c      	subs	r4, r7, r4
    9d92:	611c      	str	r4, [r3, #16]
		node->next = insert_point;
    9d94:	e9c0 3204 	strd	r3, r2, [r0, #16]
		insert_point->prev->next = node;
    9d98:	685a      	ldr	r2, [r3, #4]
    9d9a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    9d9c:	605d      	str	r5, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9d9e:	f386 8811 	msr	BASEPRI, r6
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    9da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*delta -= in_q->delta_ticks_from_prev;
    9da4:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    9da6:	4563      	cmp	r3, ip
    9da8:	6204      	str	r4, [r0, #32]
    9daa:	d002      	beq.n	9db2 <schedule_new_thread.part.13+0x62>
    9dac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9dae:	2b00      	cmp	r3, #0
    9db0:	d1e9      	bne.n	9d86 <schedule_new_thread.part.13+0x36>
	node->prev = list->tail;
    9db2:	6953      	ldr	r3, [r2, #20]
    9db4:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    9db6:	6953      	ldr	r3, [r2, #20]
	node->next = list;
    9db8:	6101      	str	r1, [r0, #16]
	list->tail->next = node;
    9dba:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9dbc:	6155      	str	r5, [r2, #20]
    9dbe:	e7ee      	b.n	9d9e <schedule_new_thread.part.13+0x4e>
    9dc0:	20000d7c 	.word	0x20000d7c

00009dc4 <k_is_in_isr>:
    9dc4:	f3ef 8005 	mrs	r0, IPSR
    9dc8:	280d      	cmp	r0, #13
    9dca:	d807      	bhi.n	9ddc <k_is_in_isr+0x18>
    9dcc:	b138      	cbz	r0, 9dde <k_is_in_isr+0x1a>
    9dce:	4b04      	ldr	r3, [pc, #16]	; (9de0 <k_is_in_isr+0x1c>)
    9dd0:	6858      	ldr	r0, [r3, #4]
    9dd2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    9dd6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    9dda:	4770      	bx	lr
    9ddc:	2001      	movs	r0, #1
}
    9dde:	4770      	bx	lr
    9de0:	e000ed00 	.word	0xe000ed00

00009de4 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    9de4:	4b02      	ldr	r3, [pc, #8]	; (9df0 <_is_thread_essential+0xc>)
    9de6:	689b      	ldr	r3, [r3, #8]
    9de8:	7a18      	ldrb	r0, [r3, #8]
}
    9dea:	f000 0001 	and.w	r0, r0, #1
    9dee:	4770      	bx	lr
    9df0:	20000d7c 	.word	0x20000d7c

00009df4 <_thread_entry>:
{
    9df4:	b508      	push	{r3, lr}
    9df6:	4604      	mov	r4, r0
    9df8:	4608      	mov	r0, r1
    9dfa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    9dfc:	461a      	mov	r2, r3
    9dfe:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    9e00:	f7ff fdbe 	bl	9980 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    9e04:	f7f6 ffc2 	bl	d8c <_impl_k_thread_abort>

00009e08 <_impl_k_thread_start>:
{
    9e08:	b510      	push	{r4, lr}
    9e0a:	4601      	mov	r1, r0
	__asm__ volatile(
    9e0c:	f04f 0320 	mov.w	r3, #32
    9e10:	f3ef 8411 	mrs	r4, BASEPRI
    9e14:	f383 8811 	msr	BASEPRI, r3
    9e18:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    9e1a:	075a      	lsls	r2, r3, #29
    9e1c:	d402      	bmi.n	9e24 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9e1e:	f384 8811 	msr	BASEPRI, r4
}
    9e22:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9e24:	f023 0304 	bic.w	r3, r3, #4
    9e28:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    9e2a:	f7ff ff6f 	bl	9d0c <_is_thread_ready>
    9e2e:	2800      	cmp	r0, #0
    9e30:	d0f5      	beq.n	9e1e <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    9e32:	4608      	mov	r0, r1
    9e34:	f7ff fc22 	bl	967c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    9e38:	4b07      	ldr	r3, [pc, #28]	; (9e58 <_impl_k_thread_start+0x50>)
    9e3a:	689b      	ldr	r3, [r3, #8]
    9e3c:	895b      	ldrh	r3, [r3, #10]
    9e3e:	2b7f      	cmp	r3, #127	; 0x7f
    9e40:	d8ed      	bhi.n	9e1e <_impl_k_thread_start+0x16>
    9e42:	f7ff fd15 	bl	9870 <__must_switch_threads>
    9e46:	2800      	cmp	r0, #0
    9e48:	d0e9      	beq.n	9e1e <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    9e4a:	f7ff fdc3 	bl	99d4 <_update_time_slice_before_swap>
	return __swap(key);
    9e4e:	4620      	mov	r0, r4
}
    9e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e54:	f7f6 bcea 	b.w	82c <__swap>
    9e58:	20000d7c 	.word	0x20000d7c

00009e5c <_setup_new_thread>:
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9e5c:	f7f6 bef2 	b.w	c44 <_new_thread>

00009e60 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    9e60:	b570      	push	{r4, r5, r6, lr}
    9e62:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9e64:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
    9e68:	9604      	str	r6, [sp, #16]
    9e6a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    9e6c:	9603      	str	r6, [sp, #12]
    9e6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    9e70:	9602      	str	r6, [sp, #8]
    9e72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9e74:	9601      	str	r6, [sp, #4]
    9e76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9e78:	9600      	str	r6, [sp, #0]
{
    9e7a:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9e7c:	f7f6 fee2 	bl	c44 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    9e80:	1c6b      	adds	r3, r5, #1
    9e82:	d003      	beq.n	9e8c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    9e84:	b92d      	cbnz	r5, 9e92 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    9e86:	4620      	mov	r0, r4
    9e88:	f7ff ffbe 	bl	9e08 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    9e8c:	4620      	mov	r0, r4
    9e8e:	b006      	add	sp, #24
    9e90:	bd70      	pop	{r4, r5, r6, pc}
    9e92:	4629      	mov	r1, r5
    9e94:	4620      	mov	r0, r4
    9e96:	f7ff ff5b 	bl	9d50 <schedule_new_thread.part.13>
    9e9a:	e7f7      	b.n	9e8c <_impl_k_thread_create+0x2c>

00009e9c <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    9e9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    9e9e:	b510      	push	{r4, lr}
    9ea0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    9ea2:	b103      	cbz	r3, 9ea6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    9ea4:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    9ea6:	4620      	mov	r0, r4
    9ea8:	f7ff ff30 	bl	9d0c <_is_thread_ready>
    9eac:	b138      	cbz	r0, 9ebe <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    9eae:	4620      	mov	r0, r4
    9eb0:	f7ff fc68 	bl	9784 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    9eb4:	7a63      	ldrb	r3, [r4, #9]
    9eb6:	f043 0308 	orr.w	r3, r3, #8
    9eba:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    9ebc:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    9ebe:	7a63      	ldrb	r3, [r4, #9]
    9ec0:	079b      	lsls	r3, r3, #30
    9ec2:	d508      	bpl.n	9ed6 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    9ec4:	e9d4 2300 	ldrd	r2, r3, [r4]
    9ec8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9eca:	6822      	ldr	r2, [r4, #0]
    9ecc:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    9ece:	7a63      	ldrb	r3, [r4, #9]
    9ed0:	f023 0302 	bic.w	r3, r3, #2
    9ed4:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    9ed6:	6a23      	ldr	r3, [r4, #32]
    9ed8:	3301      	adds	r3, #1
    9eda:	d0eb      	beq.n	9eb4 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    9edc:	f104 0010 	add.w	r0, r4, #16
    9ee0:	f7ff ff1e 	bl	9d20 <_abort_timeout>
    9ee4:	e7e6      	b.n	9eb4 <_k_thread_single_abort+0x18>
	...

00009ee8 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    9ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    9eea:	4f21      	ldr	r7, [pc, #132]	; (9f70 <_init_static_threads+0x88>)
    9eec:	4d21      	ldr	r5, [pc, #132]	; (9f74 <_init_static_threads+0x8c>)
{
    9eee:	b087      	sub	sp, #28
    9ef0:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    9ef2:	42bd      	cmp	r5, r7
    9ef4:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    9ef8:	d314      	bcc.n	9f24 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    9efa:	4b1f      	ldr	r3, [pc, #124]	; (9f78 <_init_static_threads+0x90>)
    9efc:	689a      	ldr	r2, [r3, #8]
    9efe:	7ad3      	ldrb	r3, [r2, #11]
    9f00:	3b01      	subs	r3, #1
    9f02:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    9f04:	f04f 0320 	mov.w	r3, #32
    9f08:	f3ef 8511 	mrs	r5, BASEPRI
    9f0c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    9f10:	4c18      	ldr	r4, [pc, #96]	; (9f74 <_init_static_threads+0x8c>)
    9f12:	42b4      	cmp	r4, r6
    9f14:	d320      	bcc.n	9f58 <_init_static_threads+0x70>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9f16:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    9f1a:	b007      	add	sp, #28
    9f1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    9f20:	f7ff bcd6 	b.w	98d0 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9f24:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    9f28:	9304      	str	r3, [sp, #16]
    9f2a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    9f2e:	9303      	str	r3, [sp, #12]
    9f30:	f854 3c14 	ldr.w	r3, [r4, #-20]
    9f34:	9302      	str	r3, [sp, #8]
    9f36:	f854 3c18 	ldr.w	r3, [r4, #-24]
    9f3a:	9301      	str	r3, [sp, #4]
    9f3c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    9f40:	9300      	str	r3, [sp, #0]
    9f42:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    9f46:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    9f4a:	f7f6 fe7b 	bl	c44 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9f4e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    9f52:	64dd      	str	r5, [r3, #76]	; 0x4c
    9f54:	4625      	mov	r5, r4
    9f56:	e7cc      	b.n	9ef2 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    9f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9f5a:	1c4b      	adds	r3, r1, #1
    9f5c:	d003      	beq.n	9f66 <_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    9f5e:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    9f60:	b919      	cbnz	r1, 9f6a <_init_static_threads+0x82>
    9f62:	f7ff ff51 	bl	9e08 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    9f66:	342c      	adds	r4, #44	; 0x2c
    9f68:	e7d3      	b.n	9f12 <_init_static_threads+0x2a>
    9f6a:	f7ff fef1 	bl	9d50 <schedule_new_thread.part.13>
    9f6e:	e7fa      	b.n	9f66 <_init_static_threads+0x7e>
    9f70:	20002c14 	.word	0x20002c14
    9f74:	20002c14 	.word	0x20002c14
    9f78:	20000d7c 	.word	0x20000d7c

00009f7c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    9f7c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    9f7e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    9f80:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    9f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    9f86:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    9f88:	72c3      	strb	r3, [r0, #11]
	t->wait_q = NULL;
    9f8a:	e9c0 3207 	strd	r3, r2, [r0, #28]
	t->thread = NULL;
    9f8e:	6183      	str	r3, [r0, #24]
	t->func = func;
    9f90:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    9f92:	4770      	bx	lr

00009f94 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    9f94:	b510      	push	{r4, lr}
    9f96:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    9f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f9c:	4620      	mov	r0, r4
    9f9e:	f7ff fb30 	bl	9602 <k_queue_get>
		if (!work) {
    9fa2:	4603      	mov	r3, r0
    9fa4:	2800      	cmp	r0, #0
    9fa6:	d0f7      	beq.n	9f98 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fa8:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    9faa:	6842      	ldr	r2, [r0, #4]
    9fac:	f3bf 8f5b 	dmb	ish
    9fb0:	e853 1f00 	ldrex	r1, [r3]
    9fb4:	f021 0c01 	bic.w	ip, r1, #1
    9fb8:	e843 ce00 	strex	lr, ip, [r3]
    9fbc:	f1be 0f00 	cmp.w	lr, #0
    9fc0:	d1f6      	bne.n	9fb0 <work_q_main+0x1c>
    9fc2:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    9fc6:	07cb      	lsls	r3, r1, #31
    9fc8:	d500      	bpl.n	9fcc <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    9fca:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    9fcc:	f7ff fcba 	bl	9944 <_impl_k_yield>
    9fd0:	e7e2      	b.n	9f98 <work_q_main+0x4>
	...

00009fd4 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    9fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fd6:	b087      	sub	sp, #28
    9fd8:	4604      	mov	r4, r0
    9fda:	461f      	mov	r7, r3
    9fdc:	460d      	mov	r5, r1
    9fde:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    9fe0:	f7ff faba 	bl	9558 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    9fe4:	2000      	movs	r0, #0
    9fe6:	e9cd 0004 	strd	r0, r0, [sp, #16]
    9fea:	e9cd 0702 	strd	r0, r7, [sp, #8]
    9fee:	e9cd 4000 	strd	r4, r0, [sp]
    9ff2:	4b04      	ldr	r3, [pc, #16]	; (a004 <k_work_q_start+0x30>)
    9ff4:	4632      	mov	r2, r6
    9ff6:	4629      	mov	r1, r5
    9ff8:	f104 0010 	add.w	r0, r4, #16
    9ffc:	f7ff ff30 	bl	9e60 <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    a000:	b007      	add	sp, #28
    a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a004:	00009f95 	.word	0x00009f95

0000a008 <sys_dlist_remove>:
	node->prev->next = node->next;
    a008:	e9d0 2300 	ldrd	r2, r3, [r0]
    a00c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a00e:	6802      	ldr	r2, [r0, #0]
    a010:	6053      	str	r3, [r2, #4]
}
    a012:	4770      	bx	lr

0000a014 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    a014:	b570      	push	{r4, r5, r6, lr}
    a016:	2414      	movs	r4, #20
    a018:	4615      	mov	r5, r2
    a01a:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    a01e:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    a020:	2900      	cmp	r1, #0
    a022:	da00      	bge.n	a026 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    a024:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    a026:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    a028:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    a02a:	f013 030f 	ands.w	r3, r3, #15
    a02e:	d006      	beq.n	a03e <clear_event_registrations+0x2a>
    a030:	2b02      	cmp	r3, #2
    a032:	d901      	bls.n	a038 <clear_event_registrations+0x24>
    a034:	2b04      	cmp	r3, #4
    a036:	d102      	bne.n	a03e <clear_event_registrations+0x2a>
		sys_dlist_remove(&event->_node);
    a038:	4620      	mov	r0, r4
    a03a:	f7ff ffe5 	bl	a008 <sys_dlist_remove>
    a03e:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    a042:	f04f 0320 	mov.w	r3, #32
    a046:	f3ef 8511 	mrs	r5, BASEPRI
    a04a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    a04e:	3901      	subs	r1, #1
    a050:	3c14      	subs	r4, #20
    a052:	e7e5      	b.n	a020 <clear_event_registrations+0xc>

0000a054 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    a056:	2300      	movs	r3, #0
    a058:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    a05a:	6883      	ldr	r3, [r0, #8]
{
    a05c:	4605      	mov	r5, r0
    a05e:	460e      	mov	r6, r1
    a060:	4617      	mov	r7, r2
	if (!event->poller) {
    a062:	2b00      	cmp	r3, #0
    a064:	d047      	beq.n	a0f6 <signal_poll_event+0xa2>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    a066:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    a068:	7a4b      	ldrb	r3, [r1, #9]
    a06a:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    a06e:	0798      	lsls	r0, r3, #30
    a070:	724a      	strb	r2, [r1, #9]
    a072:	d540      	bpl.n	a0f6 <signal_poll_event+0xa2>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    a074:	6a0b      	ldr	r3, [r1, #32]
    a076:	3302      	adds	r3, #2
    a078:	d048      	beq.n	a10c <signal_poll_event+0xb8>
	sys_dlist_remove(&thread->base.k_q_node);
    a07a:	4608      	mov	r0, r1
    a07c:	f7ff ffc4 	bl	a008 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a080:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a082:	6a0c      	ldr	r4, [r1, #32]
    a084:	f023 0302 	bic.w	r3, r3, #2
    a088:	1c62      	adds	r2, r4, #1
    a08a:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    a08c:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a090:	d00c      	beq.n	a0ac <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a092:	4b20      	ldr	r3, [pc, #128]	; (a114 <signal_poll_event+0xc0>)
    a094:	695b      	ldr	r3, [r3, #20]
    a096:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    a098:	bf1f      	itttt	ne
    a09a:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a09c:	6913      	ldrne	r3, [r2, #16]
    a09e:	191b      	addne	r3, r3, r4
    a0a0:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    a0a2:	f7ff ffb1 	bl	a008 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    a0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a0aa:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    a0ac:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    a0ae:	2e00      	cmp	r6, #0
    a0b0:	bf0c      	ite	eq
    a0b2:	f06f 0303 	mvneq.w	r3, #3
    a0b6:	2300      	movne	r3, #0
    a0b8:	f010 041f 	ands.w	r4, r0, #31
    a0bc:	664b      	str	r3, [r1, #100]	; 0x64
    a0be:	d11a      	bne.n	a0f6 <signal_poll_event+0xa2>
    a0c0:	6a0b      	ldr	r3, [r1, #32]
    a0c2:	3301      	adds	r3, #1
    a0c4:	d117      	bne.n	a0f6 <signal_poll_event+0xa2>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    a0c6:	4608      	mov	r0, r1
    a0c8:	f7ff fad8 	bl	967c <_add_thread_to_ready_q>
    a0cc:	f3ef 8305 	mrs	r3, IPSR
    a0d0:	2b0d      	cmp	r3, #13
    a0d2:	d819      	bhi.n	a108 <signal_poll_event+0xb4>
    a0d4:	b123      	cbz	r3, a0e0 <signal_poll_event+0x8c>
    a0d6:	4b10      	ldr	r3, [pc, #64]	; (a118 <signal_poll_event+0xc4>)
    a0d8:	6858      	ldr	r0, [r3, #4]
    a0da:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    a0de:	d009      	beq.n	a0f4 <signal_poll_event+0xa0>
	return _is_preempt(_current) && __must_switch_threads();
    a0e0:	4b0c      	ldr	r3, [pc, #48]	; (a114 <signal_poll_event+0xc0>)
    a0e2:	689b      	ldr	r3, [r3, #8]
    a0e4:	895b      	ldrh	r3, [r3, #10]
    a0e6:	2b7f      	cmp	r3, #127	; 0x7f
    a0e8:	d80e      	bhi.n	a108 <signal_poll_event+0xb4>
    a0ea:	f7ff fbc1 	bl	9870 <__must_switch_threads>
    a0ee:	3000      	adds	r0, #0
    a0f0:	bf18      	it	ne
    a0f2:	2001      	movne	r0, #1
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    a0f4:	6038      	str	r0, [r7, #0]
	event->state |= state;
    a0f6:	7b6b      	ldrb	r3, [r5, #13]
    a0f8:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
	event->poller = NULL;
    a0fc:	2000      	movs	r0, #0
	event->state |= state;
    a0fe:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    a102:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    a104:	736b      	strb	r3, [r5, #13]

ready_event:
	set_event_ready(event, state);
	return 0;
}
    a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    a108:	2000      	movs	r0, #0
    a10a:	e7f3      	b.n	a0f4 <signal_poll_event+0xa0>
		return -EAGAIN;
    a10c:	f06f 000a 	mvn.w	r0, #10
    a110:	e7f9      	b.n	a106 <signal_poll_event+0xb2>
    a112:	bf00      	nop
    a114:	20000d7c 	.word	0x20000d7c
    a118:	e000ed00 	.word	0xe000ed00

0000a11c <add_event>:
{
    a11c:	b530      	push	{r4, r5, lr}
    a11e:	e9d0 3400 	ldrd	r3, r4, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    a122:	4298      	cmp	r0, r3
    a124:	d009      	beq.n	a13a <add_event+0x1e>
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    a126:	b144      	cbz	r4, a13a <add_event+0x1e>
    a128:	68a5      	ldr	r5, [r4, #8]
    a12a:	6812      	ldr	r2, [r2, #0]
    a12c:	682d      	ldr	r5, [r5, #0]
    a12e:	f992 200a 	ldrsb.w	r2, [r2, #10]
    a132:	f995 500a 	ldrsb.w	r5, [r5, #10]
    a136:	4295      	cmp	r5, r2
    a138:	da08      	bge.n	a14c <add_event+0x30>
	node->prev = list->tail;
    a13a:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    a13e:	6843      	ldr	r3, [r0, #4]
    a140:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a142:	6041      	str	r1, [r0, #4]
    a144:	e010      	b.n	a168 <add_event+0x4c>
	return (node == list->tail) ? NULL : node->next;
    a146:	42a3      	cmp	r3, r4
    a148:	d0f7      	beq.n	a13a <add_event+0x1e>
    a14a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    a14c:	2b00      	cmp	r3, #0
    a14e:	d0f4      	beq.n	a13a <add_event+0x1e>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    a150:	689d      	ldr	r5, [r3, #8]
    a152:	682d      	ldr	r5, [r5, #0]
    a154:	f995 500a 	ldrsb.w	r5, [r5, #10]
    a158:	4295      	cmp	r5, r2
    a15a:	ddf4      	ble.n	a146 <add_event+0x2a>
		node->prev = insert_point->prev;
    a15c:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    a15e:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    a162:	685a      	ldr	r2, [r3, #4]
    a164:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a166:	6059      	str	r1, [r3, #4]
}
    a168:	bd30      	pop	{r4, r5, pc}

0000a16a <k_poll_event_init>:
{
    a16a:	b530      	push	{r4, r5, lr}
	event->type = type;
    a16c:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    a16e:	6103      	str	r3, [r0, #16]
	event->type = type;
    a170:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    a174:	7b81      	ldrb	r1, [r0, #14]
    a176:	f362 0100 	bfi	r1, r2, #0, #1
    a17a:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    a17c:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    a17e:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    a180:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    a184:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    a188:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    a18a:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    a18c:	81c2      	strh	r2, [r0, #14]
}
    a18e:	bd30      	pop	{r4, r5, pc}

0000a190 <k_poll>:
{
    a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a194:	b087      	sub	sp, #28
    a196:	4680      	mov	r8, r0
    a198:	9101      	str	r1, [sp, #4]
    a19a:	4691      	mov	r9, r2
    a19c:	f04f 0320 	mov.w	r3, #32
    a1a0:	f3ef 8111 	mrs	r1, BASEPRI
    a1a4:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    a1a8:	4d4a      	ldr	r5, [pc, #296]	; (a2d4 <k_poll+0x144>)
    a1aa:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    a1ac:	7a53      	ldrb	r3, [r2, #9]
    a1ae:	f043 0320 	orr.w	r3, r3, #32
    a1b2:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a1b4:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    a1b8:	f10d 0a18 	add.w	sl, sp, #24
    a1bc:	68aa      	ldr	r2, [r5, #8]
    a1be:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    a1c2:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    a1c4:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    a1c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    a1ca:	9b01      	ldr	r3, [sp, #4]
    a1cc:	429f      	cmp	r7, r3
    a1ce:	db15      	blt.n	a1fc <k_poll+0x6c>
	__asm__ volatile(
    a1d0:	f04f 0320 	mov.w	r3, #32
    a1d4:	f3ef 8711 	mrs	r7, BASEPRI
    a1d8:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    a1dc:	68aa      	ldr	r2, [r5, #8]
    a1de:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    a1e0:	f013 0420 	ands.w	r4, r3, #32
    a1e4:	d150      	bne.n	a288 <k_poll+0xf8>
		clear_event_registrations(events, last_registered, key);
    a1e6:	463a      	mov	r2, r7
    a1e8:	4631      	mov	r1, r6
    a1ea:	4640      	mov	r0, r8
    a1ec:	f7ff ff12 	bl	a014 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a1f0:	f387 8811 	msr	BASEPRI, r7
}
    a1f4:	4620      	mov	r0, r4
    a1f6:	b007      	add	sp, #28
    a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    a1fc:	f04f 0220 	mov.w	r2, #32
    a200:	f3ef 8b11 	mrs	fp, BASEPRI
    a204:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    a208:	7b61      	ldrb	r1, [r4, #13]
    a20a:	f001 020f 	and.w	r2, r1, #15
    a20e:	2a02      	cmp	r2, #2
    a210:	d003      	beq.n	a21a <k_poll+0x8a>
    a212:	2a04      	cmp	r2, #4
    a214:	d004      	beq.n	a220 <k_poll+0x90>
    a216:	2a01      	cmp	r2, #1
    a218:	d116      	bne.n	a248 <k_poll+0xb8>
		if (event->signal->signaled) {
    a21a:	6920      	ldr	r0, [r4, #16]
    a21c:	6880      	ldr	r0, [r0, #8]
    a21e:	e001      	b.n	a224 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    a220:	6920      	ldr	r0, [r4, #16]
    a222:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    a224:	b180      	cbz	r0, a248 <k_poll+0xb8>
	event->state |= state;
    a226:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    a22a:	f362 1107 	bfi	r1, r2, #4, #4
    a22e:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    a230:	68a9      	ldr	r1, [r5, #8]
	event->poller = NULL;
    a232:	2300      	movs	r3, #0
    a234:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~states;
    a236:	7a4a      	ldrb	r2, [r1, #9]
    a238:	f022 0220 	bic.w	r2, r2, #32
    a23c:	724a      	strb	r2, [r1, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a23e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    a242:	3701      	adds	r7, #1
    a244:	3414      	adds	r4, #20
    a246:	e7c0      	b.n	a1ca <k_poll+0x3a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    a248:	f1b9 0f00 	cmp.w	r9, #0
    a24c:	d0f7      	beq.n	a23e <k_poll+0xae>
    a24e:	68a9      	ldr	r1, [r5, #8]
    a250:	7a49      	ldrb	r1, [r1, #9]
    a252:	068b      	lsls	r3, r1, #26
    a254:	d5f3      	bpl.n	a23e <k_poll+0xae>
	switch (event->type) {
    a256:	2a02      	cmp	r2, #2
    a258:	d007      	beq.n	a26a <k_poll+0xda>
    a25a:	2a04      	cmp	r2, #4
    a25c:	d00f      	beq.n	a27e <k_poll+0xee>
    a25e:	2a01      	cmp	r2, #1
    a260:	d109      	bne.n	a276 <k_poll+0xe6>
		add_event(&event->signal->poll_events, event, poller);
    a262:	4652      	mov	r2, sl
    a264:	4621      	mov	r1, r4
    a266:	6920      	ldr	r0, [r4, #16]
    a268:	e003      	b.n	a272 <k_poll+0xe2>
		add_event(&event->sem->poll_events, event, poller);
    a26a:	6920      	ldr	r0, [r4, #16]
    a26c:	4652      	mov	r2, sl
    a26e:	4621      	mov	r1, r4
    a270:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    a272:	f7ff ff53 	bl	a11c <add_event>
	event->poller = poller;
    a276:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    a27a:	3601      	adds	r6, #1
    a27c:	e7df      	b.n	a23e <k_poll+0xae>
		add_event(&event->queue->poll_events, event, poller);
    a27e:	6920      	ldr	r0, [r4, #16]
    a280:	4652      	mov	r2, sl
    a282:	4621      	mov	r1, r4
    a284:	3008      	adds	r0, #8
    a286:	e7f4      	b.n	a272 <k_poll+0xe2>
    a288:	f023 0320 	bic.w	r3, r3, #32
    a28c:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    a28e:	f1b9 0f00 	cmp.w	r9, #0
    a292:	d104      	bne.n	a29e <k_poll+0x10e>
    a294:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    a298:	f06f 040a 	mvn.w	r4, #10
    a29c:	e7aa      	b.n	a1f4 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    a29e:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    a2a0:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    a2a2:	e9cd 0004 	strd	r0, r0, [sp, #16]
	_pend_current_thread(&wait_q, timeout);
    a2a6:	f7ff fad3 	bl	9850 <_pend_current_thread>
	_update_time_slice_before_swap();
    a2aa:	f7ff fb93 	bl	99d4 <_update_time_slice_before_swap>
	return __swap(key);
    a2ae:	4638      	mov	r0, r7
    a2b0:	f7f6 fabc 	bl	82c <__swap>
    a2b4:	4604      	mov	r4, r0
	__asm__ volatile(
    a2b6:	f04f 0320 	mov.w	r3, #32
    a2ba:	f3ef 8511 	mrs	r5, BASEPRI
    a2be:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    a2c2:	462a      	mov	r2, r5
    a2c4:	4631      	mov	r1, r6
    a2c6:	4640      	mov	r0, r8
    a2c8:	f7ff fea4 	bl	a014 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a2cc:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    a2d0:	e790      	b.n	a1f4 <k_poll+0x64>
    a2d2:	bf00      	nop
    a2d4:	20000d7c 	.word	0x20000d7c

0000a2d8 <_handle_obj_poll_events>:

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    a2d8:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    a2da:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    a2dc:	42a0      	cmp	r0, r4
    a2de:	d102      	bne.n	a2e6 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    a2e0:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    a2e2:	b002      	add	sp, #8
    a2e4:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    a2e6:	4620      	mov	r0, r4
    a2e8:	f7ff fe8e 	bl	a008 <sys_dlist_remove>
	if (!poll_event) {
    a2ec:	2c00      	cmp	r4, #0
    a2ee:	d0f7      	beq.n	a2e0 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    a2f0:	aa01      	add	r2, sp, #4
    a2f2:	f7ff feaf 	bl	a054 <signal_poll_event>
	return must_reschedule;
    a2f6:	9801      	ldr	r0, [sp, #4]
    a2f8:	e7f3      	b.n	a2e2 <_handle_obj_poll_events+0xa>

0000a2fa <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    a2fa:	4770      	bx	lr
